"use strict";

var _ = require("underscore");
var React = require("react");
var Table = require("react-bootstrap").Table;
var DropdownButton = require("react-bootstrap").DropdownButton;
var MenuItem = require("react-bootstrap").MenuItem;
var ButtonToolbar = require("react-bootstrap").ButtonToolbar;
var Button = require("react-bootstrap").Button;
var Glyphicon = require("react-bootstrap").Glyphicon;

var FieldConstants = require("../constants/FieldConstants");
var TextInput = require("../components/TextInput.react");

var BomImportAttribute = React.createClass({displayName: "BomImportAttribute",

    propTypes: {
        attribute: React.PropTypes.object.isRequired,
        index: React.PropTypes.number.isRequired,
        onSave: React.PropTypes.func.isRequired,
        onChange: React.PropTypes.func.isRequired,
        onEdit: React.PropTypes.func.isRequired,
        onSkip: React.PropTypes.func.isRequired,
        fields: React.PropTypes.array.isRequired,
        allTypes: React.PropTypes.object.isRequired
    },

    getInitialState: function() {
        var name = this.props.attribute.name;

        return {
            name: name
        };
    },

    /**
    * @return {object}
    */
    render: function() {
        switch(this.props.attribute.status) {
            case "readonly":
                return this.renderReadOnly();

            case "active":
                return this.renderDefault(true);

            case "saved":
                return this.renderSaved();

            case "skipped":
                return this.renderSkipped();

            default:
                return this.renderDefault(false);
        }
    },

    renderReadOnly: function() {
        //var name = this._getName();
        var name = this.state.name;

        return (
            React.createElement("th", {className: "readonly"}, 
                React.createElement("p", null, name), 
                React.createElement("span", null, "(autogenerated)")
            ));
    },

    renderDefault: function(active) {
        var name = this.state.name;
        var attribute = this.props.attribute;
        var field;
        var fieldElement;
        var attributeElement;
        var buttonToolbar;

        // Find the best matching field for this attribute
        if (attribute.fieldId) {
            if (attribute.fieldId === FieldConstants.CUSTOM_FIELD.id) {
                field = FieldConstants.CUSTOM_FIELD;
            }
            else {
                field = _.find(this.props.fields, function(result) {
                    return result.id === attribute.fieldId;
                }, this);
            }
        }

        // No match found, we have a custom column
        if (!field || field.id === FieldConstants.CUSTOM_FIELD.id) {

            fieldElement = this.renderField("New Column");

            if (name) {
                attributeElement = this.renderAttribute( name );
            }

            buttonToolbar = this.renderMatchButtons( !!name );
        }
        // Found a matching field
        else {
            if (!name) {
                fieldElement = this.renderField( field.name );
                buttonToolbar = this.renderMatchButtons( true );
            }
            // If the imported name doesn't match the field's main name
            // let the user pick between the two
            else if (field.name !== name) {
                fieldElement = this.renderField( field.name, "(our column name)" );
                attributeElement = this.renderAttribute( name, "(your column name)" );
                buttonToolbar = this.renderDiffButtons( field.name, name );
            }
            // If the imported name match the main field name, use it
            else {
                fieldElement = this.renderField( field.name, "(yours and ours)" );
                buttonToolbar = this.renderMatchButtons( !!name );
            }
        }

        return (
            React.createElement("th", {className: active?"active":"default"}, 
                fieldElement, 
                attributeElement, 
                buttonToolbar
            )
        );
    },

    renderSkipped: function() {
        var name = this.state.name;

        return (
            React.createElement("th", {className: "skipped"}, 
                React.createElement("p", null, name), 
                React.createElement(Button, {bsStyle: "default", onClick: this.onCancelSkip}, "Unskip")
            ));
    },

    renderSaved: function() {
        //var name = this.state.savedName;
        var name = this.props.attribute.savedName;

        return (
            React.createElement("th", {className: "saved"}, 
                React.createElement("p", null, name), 
                React.createElement(Button, {bsStyle: "default", onClick: this.onCancelSave}, "Edit")
            ));
    },

    renderField: function(title, label) {
        var labelElement;

        var options = this.props.fields.map(function(result) {
            return (
                React.createElement(MenuItem, {
                    className: result.disabled ? "disabled" : "", 
                    key: result.id || result.cid, 
                    eventKey: result.id || result.cid}, result.name));
        });

        if (label) {
            labelElement = (React.createElement("div", null, React.createElement("label", null, label)));
        }

        return (
            React.createElement("div", {className: "form-group"}, 
                React.createElement(DropdownButton, {
                    bsStyle: "default", 
                    title: title, 
                    onSelect: this.onSelectField}, 
                        options, 
                        React.createElement(MenuItem, {divider: true}), 
                        React.createElement(MenuItem, {eventKey: FieldConstants.CUSTOM_FIELD.id}, "New Column")
                ), 
                labelElement
            ));
    },

    renderAttribute: function(name, label) {
        var nameElement;
        var labelElement;

        if (this.state.isEditing) {
            nameElement = (
                React.createElement(TextInput, {
                    className: "edit", 
                    onSave: this.onSaveName, 
                    value: name}));
        }
        else {
            nameElement = (
                React.createElement(ButtonToolbar, null, 
                    React.createElement("div", {className: "btn-group attribute-name"}, 
                        name || "Untitled"
                    ), 
                    React.createElement(Button, {className: "btn-nobg", onClick: this.onEditName}, 
                        React.createElement(Glyphicon, {glyph: "pencil"})
                    )
                ));
        }

        if (label) {
            labelElement = (React.createElement("div", null, React.createElement("label", null, label)));
        }

        return  (
            React.createElement("div", {className: "form-group"}, 
                nameElement, 
                labelElement
            ));
    },

    renderMatchButtons: function( canSave ) {
        return (
            React.createElement(ButtonToolbar, null, 
                React.createElement(Button, {bsStyle: "primary", onClick: this.onSave, disabled: !canSave}, "Save"), 
                React.createElement(Button, {bsStyle: "default", onClick: this.onSkip}, "Skip")
            ));
    },

    renderDiffButtons: function(ours, yours) {
        return (
            React.createElement(ButtonToolbar, null, 
                React.createElement(Button, {bsStyle: "primary", onClick: this.onSaveOurs}, "Ours"), 
                React.createElement(Button, {bsStyle: "default", onClick: this.onSave, disabled: !yours}, "Yours"), 
                React.createElement(Button, {bsStyle: "default", onClick: this.onSkip}, "Skip")
            ));
    },

    onSelectField: function(fieldId) {
        // var field;

        // // If the name is not set, and the selected field isn't the Custom field
        // if (!this.state.name && fieldId !== FieldConstants.CUSTOM_FIELD.id) {
        //     // Get the field
        //     field = _.find(this.props.fields, function(result) {
        //         return result.id === fieldId;
        //     }, this);

        //     // Assign the name to the attribute
        //     this.onSaveName( field.name );
        // }
        if (FieldConstants.CUSTOM_FIELD.id !== fieldId) {
            var field = _.findWhere(this.props.fields, {id: fieldId});
            if (!field || field.disabled) return;
        }

        this.props.onChange(this.props.index, fieldId);
    },

    onEditName: function(event) {
        this.setState({
            isEditing: true
        })
    },

    onSaveName: function(name) {
        this.setState({
            name: name,
            isEditing: false
        });
    },

    onSkip: function(event) {
        this.props.onSkip( this.props.index, true );
        // this.setState({
        //     isSkipped: true
        // });
    },

    onCancelSkip: function(event) {
        this.props.onSkip( this.props.index, false );
        // this.setState({
        //     isSkipped: false
        // });
    },

    onSaveOurs: function(event) {
        var field = _.find(this.props.fields, function(result) {
            return result.id === this.props.attribute.fieldId;
        }, this);
        if (!field) return;

        // this.setState({
        //     name: field.name
        // })

        this.onSaveAttribute(field.name);
    },

    onSave: function(event) {
        var name = this.state.name;
        var fieldId = this.props.attribute.fieldId;
        var field;

        // If the name is not set, and the selected field isn't the Custom field
        if (!name && fieldId !== FieldConstants.CUSTOM_FIELD.id) {
            // Get the field
            field = _.find(this.props.fields, function(result) {
                return result.id === fieldId;
            });

            // Assign the name to the attribute
            if (field) {
                name = field.name
            }
        }

        if (name) {
            this.onSaveAttribute(name);
        }
    },

    onSaveAttribute: function(name) {
        var fieldId = this.props.attribute.fieldId;

        // If user manually chose the custom field,
        // pass undefined to create a new field
        if (fieldId === FieldConstants.CUSTOM_FIELD.id) {
            fieldId = undefined;
        }

        this.props.onSave( this.props.index, name, fieldId );
    },

    onCancelSave: function() {
        this.props.onEdit( this.props.index );
    },

});

module.exports = BomImportAttribute;
