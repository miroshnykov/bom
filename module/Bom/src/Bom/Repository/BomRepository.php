<?php

namespace Bom\Repository;

use Bom\Entity\Bom;
use Doctrine\ORM\EntityRepository;

/**
 * BomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BomRepository extends VersionedRepository {

    private function getCommentCounts($bomIds) {
        $queryString = "
            SELECT
                (CASE
                    WHEN type='bom' THEN entity_id
                    WHEN type='item' THEN (SELECT i.bom_id FROM bomitem i WHERE i.id = entity_id)
                    ELSE NULL END) AS bom_id,
                SUM(CASE WHEN category='warning' THEN 1 ELSE 0 END) AS warning_count,
                SUM(CASE WHEN category='error'   THEN 1 ELSE 0 END) AS error_count,
                SUM(CASE WHEN category='comment' THEN 1 ELSE 0 END) AS comment_count
            FROM
                comment
            WHERE
                (type='bom' AND entity_id IN (?)) OR
                (type='item' AND entity_id IN (SELECT id FROM bomitem WHERE bom_id IN (?)))
            GROUP BY
                bom_id
            ";

        return
            $this
                ->getEntityManager()
                ->getConnection()
                ->executeQuery(
                    $queryString,
                    array($bomIds, $bomIds),
                    array(
                        \Doctrine\DBAL\Connection::PARAM_INT_ARRAY,
                        \Doctrine\DBAL\Connection::PARAM_INT_ARRAY))
                ->fetchAll();
    }

    private function getItemCounts($bomIds) {
        $queryString = "
            SELECT
                b,
                COUNT(i.id) AS total_items,
                SUM(CASE WHEN i.isApproved=TRUE THEN 1 ELSE 0 END) as approved_count
            FROM
                Bom\Entity\Bom b
                JOIN b.bomItems i
            WHERE
                b.id IN (:bomIds)
            GROUP BY
                b.id
            ";

        return
            $this
                ->getEntityManager()
                ->createQuery($queryString)
                ->setParameters(array('bomIds' => $bomIds))
                ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

    /**
     * Get the boms of a company hydrated into an array.
     */
    public function getArrayByCompany($companyToken) {
        $queryString = "
            SELECT
                partial b.{id},
                h,
                partial a.{id, name, position, visible},
                partial f.{id}
            FROM
                Bom\Entity\Bom b
                JOIN b.company c
                JOIN b.current h
                LEFT JOIN b.bomFields a
                LEFT JOIN a.field f
            WHERE
                c.token = :companyToken and b.deletedAt is null
            ";

        $boms =
            $this
                ->getEntityManager()
                ->createQuery($queryString)
                ->setParameters(array('companyToken' => $companyToken))
                ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $bomIds = array();

        // Clean up array to return association ids instead of partial objects
        foreach($boms as &$bom) {
            if (isset($bom['bomFields']) && is_array($bom['bomFields'])) {
                foreach($bom['bomFields'] as &$bomField) {
                    if (isset($bomField['field'])) {
                        $bomField['fieldId'] = $bomField['field']['id'];
                        unset($bomField['field']);
                    }
                }
            }

            $bomIds[] = $bom['id'];

            if (isset($bom['current'])) {
                $bom['name'] = $bom['current']['name'];
                unset($bom['current']);
            }
        }

        $itemCounts = $this->getItemCounts($bomIds);
        $commentCounts = $this->getCommentCounts($bomIds);

        foreach($boms as &$bom) {
            foreach($itemCounts as &$item) {
                if($item[0]['id'] !== $bom['id']) {
                    continue;
                }

                $bom['totalItems'] = $item['total_items'];
                $bom['approvedCount'] = $item['approved_count'];
                break;
            }

            foreach($commentCounts as &$comment) {
                if($comment['bom_id'] !== $bom['id']) {
                    continue;
                }

                $bom['warningCount'] = $comment['warning_count'];
                $bom['errorCount']   = $comment['error_count'];
                $bom['commentCount'] = $comment['comment_count'];
                break;
            }
        }

        return $boms;
    }

    /**
     * Get a bom by that is owned by a specific company.
     */
    public function getOneByCompanyAndId($companyToken, $bomId) {
        $queryString = "SELECT b, f, i, cm "
            . "FROM Bom\Entity\Bom b "
            . "JOIN b.company c "
            . "LEFT JOIN b.bomFields f "
            . "LEFT JOIN b.bomItems i WITH i.deletedAt is null "
            . "LEFT JOIN i.bomItemFields v WITH v.deletedAt is null "
            . "LEFT JOIN b.comments cm "
            . "WHERE c.token = :companyToken AND b.id = :bomId and b.deletedAt is null ";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'bomId' => $bomId,
            'companyToken' => $companyToken,
        ));
        $boms = $query->getResult(); // array of Bom objects

        if(isset($boms[0]) && $boms[0]){
            return $boms[0];
        }
    }

    public function getOneBySourceFile($key) {

        $queryString = "SELECT b "
            . "FROM Bom\Entity\Bom b "
            . "JOIN b.current h "
            . "WHERE h.sourceFile = :key and b.deletedAt is null ";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'key' => $key
        ));
        $bom = $query->getResult();

        if(isset($bom[0]) && $bom[0]){
            return $bom[0];
        }
    }

}
