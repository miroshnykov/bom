<?php

namespace Bom\Repository;

use Doctrine\ORM\EntityRepository;
use Bom\Entity\BomView;

/**
 * BomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BomViewRepository extends EntityRepository {

    public function getArrayByCompanyOrDefault($companyToken) {

        $queryString = "SELECT b, bf, partial f.{id}, partial c.{id, token}  "
            . "FROM Bom\Entity\BomView b "
            . "LEFT JOIN b.company c "
            . "JOIN b.bomViewFields bf JOIN bf.field f "
            . "WHERE (c.token = :companyToken OR c IS NULL) and b.deletedAt is null "
            . "ORDER BY bf.position ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'companyToken' => $companyToken,
        ));

        $views = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY); // array of Bom objects

        // Clean up array to return association ids instead of partial objects
        foreach($views as &$view) {
            // Set default field true if company is null
            $view['default'] = !isset($view['company']) || !$view['company'];
            unset($view['company']);

            // Only need the field ids
            if (isset($view['bomViewFields'])) {
                $view['fieldIds'] = array();

                if (is_array($view['bomViewFields'])) {
                    foreach($view['bomViewFields'] as $bomViewField) {
                        $view['fieldIds'][] = $bomViewField['field']['id'];
                    }
                }
                unset($view['bomViewFields']);
            }
        }

        return $views;
    }

    public function getOneByCompanyAndId($companyToken, $id) {
        $queryString =
            "SELECT b, f, bf "
            . "FROM Bom\Entity\BomView b "
            . "JOIN b.company c "
            . "LEFT JOIN b.bomViewFields bf "
            . "LEFT JOIN bf.field f "
            . "WHERE c.token = :companyToken and b.id = :id and b.deletedAt is null "
            . "ORDER BY  bf.position ASC ";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'companyToken' => $companyToken,
            'id' => $id,
        ));

        $views = $query->getResult(); // array of objects

        if(isset($views[0]) && $views[0]){
            return $views[0];
        }
    }
}
