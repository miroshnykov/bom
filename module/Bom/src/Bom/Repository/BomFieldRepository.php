<?php

namespace Bom\Repository;

use Doctrine\ORM\EntityRepository;
use Bom\Entity\BomField;

/**
 * BomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BomFieldRepository extends EntityRepository {

    /**
     * Get the bom attributes of a bom after a specified position.
     */
    public function getAfterPosition($bomId, $position) {

        $queryString = "SELECT f "
            . "FROM Bom\Entity\BomField f "
            . "JOIN f.bom b WITH b.deletedAt is null "
            . "WHERE b.id = :bomId AND f.position > :position and f.deletedAt is null "
            . "ORDER BY f.position ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'bomId' => $bomId,
            'position' => $position
        ));

        $bomFields = $query->getResult();
        return $bomFields;
    }

    /**
     * Get a bom attribute by that is owned by a specific company.
     */
    public function getOneByCompanyBomAndId($companyToken, $bomId, $attributeId) {
        $queryString =
            "SELECT bf "
            . "FROM Bom\Entity\BomField bf "
            . "JOIN bf.bom b WITH b.deletedAt is null "
            . "JOIN b.company c "
            . "WHERE c.token = :companyToken AND b.id = :bomId AND bf.id = :attributeId and bf.deletedAt is null ";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'bomId' => $bomId,
            'companyToken' => $companyToken,
            'attributeId' => $attributeId
        ));
        $attributes = $query->getResult(); // array of objects

        if (isset($attributes[0]) && $attributes[0]) {
            return $attributes[0];
        }
    }
}
