<?php

namespace Bom\Repository;

use Doctrine\ORM\EntityRepository;
use Bom\Entity\Field;

/**
 * FieldRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FieldRepository extends EntityRepository
{
    /**
     * Get array of fields for a company and the defaults.
     */
    public function getArrayByCompanyOrDefault($companyToken) {

        $queryString = "SELECT partial f.{id, name, regex}, partial t.{id}, partial c.{id, token} FROM Bom\Entity\Field f "
                . "LEFT JOIN f.company c "
                . "LEFT JOIN f.type t "
                . "WHERE c.token = :companyToken OR c IS NULL and f.deletedAt is null "
                . "ORDER BY f.id ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'companyToken' => $companyToken
        ));

        $fields = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        // Clean up array to return association ids instead of partial objects
        foreach($fields as &$field) {
            if (isset($field['type'])) {
                $field['typeId'] = $field['type']['id'];
                unset($field['type']);
            }

            if (isset($field['company']) && !is_null($field['company'])) {
                $field['companyToken'] = $field['company']['token'];
            }

            unset($field['company']);
        }

        return $fields;
    }

    /**
     * Get array of fields for a company and the defaults.
     */
    public function getByCompanyOrDefault($companyToken) {

        $queryString = "SELECT partial f.{id, name, regex, type }, partial t.{id}, partial c.{id, token} FROM Bom\Entity\Field f "
            . "LEFT JOIN f.company c "
            . "LEFT JOIN f.type t "
            . "WHERE c.token = :companyToken OR c IS NULL and f.deletedAt is null "
            . "ORDER BY f.id ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'companyToken' => $companyToken
        ));

        $fields = $query->getResult();
        return $fields;
    }

    /**
     * Get a company field with the matching id.
     */
    public function getOneByCompanyAndId($companyToken, $fieldId) {

        $queryString = "SELECT f FROM Bom\Entity\Field f "
            . "LEFT JOIN f.company c "
            . "LEFT JOIN f.type t "
            . "WHERE f.id = :fieldId AND (c.token = :companyToken OR c IS NULL) and f.deletedAt is null "
            . "ORDER BY f.id ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'fieldId' => $fieldId,
            'companyToken' => $companyToken
        ));
        $fields = $query->getResult(); // array of Product objects

        if(isset($fields[0]) && $fields[0]){
            return $fields[0];
        }
    }
}
