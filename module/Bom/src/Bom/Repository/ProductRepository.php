<?php

namespace Bom\Repository;

use Doctrine\ORM\EntityRepository;
use Bom\Entity\Product;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends VersionedRepository {

    /**
     * Get the products of a company hydrated into an array.
     */

    public function getArrayByCompany($companyToken) {
        $queryString = "SELECT partial p.{id}, h, partial b.{id}, partial chg.{id} , partial cm.{id} "
            . "FROM Bom\Entity\Product p "
            . "JOIN p.company c "
            . "JOIN p.current h "
            . "LEFT JOIN p.boms b WITH b.deletedAt is null "
            . "LEFT JOIN p.changes chg "
            . "LEFT JOIN p.comments cm "
            . "WHERE c.token = :companyToken and b.deletedAt is null and p.deletedAt is null "
            . "ORDER BY h.name ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'companyToken' => $companyToken,
        ));

        $products = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        // Clean up array to return array of bom ids, instead of array of partial bom objects
        foreach($products as &$product) {
            if (isset($product['boms'])) {
                if (is_array($product['boms'])) {
                    $product['bomIds'] = array();

                    foreach($product['boms'] as $bom) {
                        $product['bomIds'][] = $bom['id'];
                    }
                }

                unset($product['boms']);
            }
            if (isset($product['current'])) {
                $product['name'] = $product['current']['name'];
                unset($product['current']);
            }

            if (isset($product['changes']) && is_array($product['changes'])) {
                // TODO optimize in DQL with COUNT
                $product['totalChanges'] = count($product['changes']);
                unset($product['changes']);
            }

            if (isset($product['comments']) && is_array($product['comments'])) {
                // TODO optimize in DQL with COUNT
                $product['totalComments'] = count($product['comments']);
                unset($product['comments']);
            }
        }

        return $products;
    }

    /**
     * Get the count products of a company.
     */
    public function getCountByCompany($companyToken) {
        $queryString = "SELECT COUNT(p) "
            . "FROM Bom\Entity\Product p "
            . "JOIN p.company c "
            . "WHERE c.token = :companyToken AND p.deletedAt IS NULL";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'companyToken' => $companyToken,
        ));

        return $query->getSingleScalarResult();
    }

    /**
     * Get a product by that is owned by a specific company.
     */
    public function getOneByCompanyAndId($companyToken, $productId) {
        $queryString = "SELECT p FROM Bom\Entity\Product p "
            . "JOIN p.company c "
            . "JOIN p.current h "
            . "WHERE p.id = :productId AND c.token = :companyToken and p.deletedAt is null "
            . "ORDER BY h.name ASC";

        $query = $this->getEntityManager()->createQuery($queryString);
        $query->setParameters(array(
            'productId' => $productId,
            'companyToken' => $companyToken,
        ));

        $products = $query->getResult(); // array of Product objects

        if(isset($products[0]) && $products[0]){
            return $products[0];
        }
    }
}
