{"version":3,"names":[],"mappings":"","sources":["bom.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\n(function (window) {\n\ttry {\n\t\trequire(\"es5-shim/es5-shim\");\n\t\trequire(\"es5-shim/es5-sham\");\n\t\trequire(\"es6-promise\").polyfill();\n\n\t\t// Needs to be set globally, as jQuery-ui plugins assume it is global.\n\t\tglobal.jQuery = global.$ = require(\"jquery\");\n\n\t\trequire(\"jquery-mousewheel\");\n\t\trequire(\"jquery-nicescroll\");\n\n\n\t\tvar Backbone = require(\"backbone\");\n\t\tBackbone.$ = global.jQuery;\n\n\t\tvar Cocktail = require(\"backbone.cocktail\");\n\t\tCocktail.patch(Backbone);\n\n\t\tvar EventManager = require(\"events/EventManager\");\n\t\tvar eventManager = new EventManager();\n\t\teventManager.start();\n\n\t\tvar React = require(\"react\");\n\t\tvar Router = require(\"routers/BomRouter\");\n\t\tvar Handler = Router.Handler;\n\n\t\tRouter.run(function (Handler, state) {\n\t\t\tvar params = state.params;\n\t\t\tReact.render(React.createElement(Handler, {params: params}), document.getElementById(\"app\"));\n\t\t});\n\t} catch(error) {\n\t\tconsole.error(\"Caught exception: \", error);\n\t}\n}(window));\n\n\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"backbone\":\"backbone\",\"backbone.cocktail\":\"backbone.cocktail\",\"es5-shim/es5-sham\":5,\"es5-shim/es5-shim\":6,\"es6-promise\":7,\"events/EventManager\":156,\"jquery\":\"jquery\",\"jquery-mousewheel\":\"jquery-mousewheel\",\"jquery-nicescroll\":\"jquery-nicescroll\",\"react\":\"react\",\"routers/BomRouter\":174}],2:[function(require,module,exports){\n// Backbone React Component\n// ========================\n//\n//     Backbone.React.Component v0.8.1\n//\n//     (c) 2014 \"Magalhas\" José Magalhães <magalhas@gmail.com>\n//     Backbone.React.Component can be freely distributed under the MIT license.\n//\n//\n// `Backbone.React.Component` is a mixin that glues [Backbone](http://backbonejs.org/)\n// models and collections into [React](http://facebook.github.io/react/) components.\n//\n// When the component is mounted, a wrapper starts listening to models and\n// collections changes to automatically set your component state and achieve UI\n// binding through reactive updates.\n//\n//\n//\n// Basic Usage\n//\n//     var MyComponent = React.createClass({\n//       mixins: [Backbone.React.Component.mixin],\n//       render: function () {\n//         return <div>{this.state.foo}</div>;\n//       }\n//     });\n//     var model = new Backbone.Model({foo: 'bar'});\n//     React.render(<MyComponent model={model} />, document.body);\n\n(function (root, factory) {\n  // Universal module definition\n  if (typeof define === 'function' && define.amd) {\n    define(['react', 'backbone', 'underscore'], factory);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(require('react'), require('backbone'), require('underscore'));\n  } else {\n    factory(root.React, root.Backbone, root._);\n  }\n}(this, function (React, Backbone, _) {\n  'use strict';\n  if (!Backbone.React) {\n    Backbone.React = {};\n  }\n  if (!Backbone.React.Component) {\n    Backbone.React.Component = {};\n  }\n  // Mixin used in all component instances. Exported through `Backbone.React.Component.mixin`.\n  var mixin = Backbone.React.Component.mixin = {\n    // Types of the context passed to child components. Only\n    // `hasParentBackboneMixin` is required all of the others are optional.\n    childContextTypes: {\n      hasParentBackboneMixin: React.PropTypes.bool.isRequired,\n      parentModel: React.PropTypes.any,\n      parentCollection: React.PropTypes.any\n    },\n    // Types of the context received from the parent component. All of them are\n    // optional.\n    contextTypes: {\n      hasParentBackboneMixin: React.PropTypes.bool,\n      parentModel: React.PropTypes.any,\n      parentCollection: React.PropTypes.any\n    },\n    // Passes data to our child components.\n    getChildContext: function () {\n      return {\n        hasParentBackboneMixin: true,\n        parentModel: this.getModel(),\n        parentCollection: this.getCollection()\n      };\n    },\n    // Sets `this.el` and `this.$el` when the component mounts.\n    componentDidMount: function () {\n      this.setElement(React.findDOMNode(this));\n    },\n    // Sets `this.el` and `this.$el` when the component updates.\n    componentDidUpdate: function () {\n      this.setElement(React.findDOMNode(this));\n    },\n    // When the component gets the initial state, instance a `Wrapper` to take\n    // care of models and collections binding with `this.state`.\n    getInitialState: function () {\n      var initialState = {};\n\n      if (!this.wrapper) {\n        this.wrapper = new Wrapper(this, initialState);\n      }\n\n      return initialState;\n    },\n    // When the component mounts, instance a `Wrapper` to take care\n    // of models and collections binding with `this.state`.\n    componentWillMount: function () {\n      if (!this.wrapper) {\n        this.wrapper = new Wrapper(this);\n      }\n    },\n    // When the component unmounts, dispose listeners and delete\n    // `this.wrapper` reference.\n    componentWillUnmount: function () {\n      if (this.wrapper) {\n        this.wrapper.stopListening();\n        delete this.wrapper;\n      }\n    },\n    // In order to allow passing nested models and collections as reference we\n    // filter `nextProps.model` and `nextProps.collection`.\n    componentWillReceiveProps: function (nextProps) {\n      var model = nextProps.model;\n      var collection = nextProps.collection;\n\n      if (this.wrapper.model && model) {\n        if (this.wrapper.model !== model) {\n          this.wrapper.stopListening();\n          this.wrapper = new Wrapper(this, void 0, nextProps);\n        }\n      } else if (model) {\n        this.wrapper = new Wrapper(this, void 0, nextProps);\n      }\n\n      if (this.wrapper.collection && collection) {\n        if (this.wrapper.collection !== collection) {\n          this.wrapper.stopListening();\n          this.wrapper = new Wrapper(this, void 0, nextProps);\n        }\n      } else if (collection) {\n        this.wrapper = new Wrapper(this, void 0, nextProps);\n      }\n    },\n    // Shortcut to `@$el.find` if jQuery ins present, else if fallbacks to DOM\n    // native `querySelector`. Inspired by `Backbone.View`.\n    $: function () {\n      var els;\n\n      if (this.$el) {\n        els = this.$el.find.apply(this.$el, arguments);\n      } else {\n        var el = React.findDOMNode(this);\n        els = el.querySelector.apply(el, arguments);\n      }\n\n      return els;\n    },\n    // Grabs the collection from `@wrapper.collection` or `@context.parentCollection`\n    getCollection: function () {\n      return this.wrapper.collection || this.context.parentCollection;\n    },\n    // Grabs the model from `@wrapper.model` or `@context.parentModel`\n    getModel: function () {\n      return this.wrapper.model || this.context.parentModel;\n    },\n    // Sets a DOM element to render/mount this component on this.el and this.$el.\n    setElement: function (el) {\n      if (el && Backbone.$ && el instanceof Backbone.$) {\n        if (el.length > 1) {\n          throw new Error('You can only assign one element to a component');\n        }\n        this.el = el[0];\n        this.$el = el;\n      } else if (el) {\n        this.el = el;\n        if (Backbone.$) {\n          this.$el = Backbone.$(el);\n        }\n      }\n      return this;\n    }\n  };\n  // Binds models and collections to a `React.Component`. It mixes `Backbone.Events`.\n  function Wrapper (component, initialState, nextProps) {\n    // Object to store wrapper state (not the component state)\n    this.state = {};\n    // 1:1 relation with the `component`\n    this.component = component;\n    // Use `nextProps` or `component.props` and grab `model` and `collection`\n    // from there\n    var props = nextProps || component.props || {};\n    var model, collection;\n\n    if (component.overrideModel && typeof component.overrideModel === 'function'){\n      // Define overrideModel() method on your `React class` to programatically supply a model object\n      // Will override `this.props.model`\n      model = component.overrideModel();\n    } else {\n      model = props.model;\n    }\n\n    if (component.overrideCollection && typeof component.overrideCollection === 'function'){\n      // Define overrideCollection() method on your `React class` to programatically supply a collection object\n      // Will override `this.props.collection`\n      collection = component.overrideCollection();\n    } else {\n      collection = props.collection;\n    }\n\n    this.setModels(model, initialState);\n    this.setCollections(collection, initialState);\n  }\n  // Mixing `Backbone.Events` into `Wrapper.prototype`\n  _.extend(Wrapper.prototype, Backbone.Events, {\n    // Sets `this.state` when a model/collection request results in error. It delegates\n    // to `this.setState`. It listens to `Backbone.Model#error` and `Backbone.Collection#error`.\n    onError: function (modelOrCollection, res, options) {\n      // Set state only if there's no silent option\n      if (!options.silent) {\n        this.component.setState({\n          isRequesting: false,\n          hasError: true,\n          error: res\n        });\n      }\n    },\n    onInvalid: function (model, res, options) {\n      if (!options.silent) {\n        this.component.setState({\n          isInvalid: true\n        });\n      }\n    },\n    // Sets `this.state` when a model/collection request starts. It delegates to\n    // `this.setState`. It listens to `Backbone.Model#request` and\n    // `Backbone.Collection#request`.\n    onRequest: function (modelOrCollection, xhr, options) {\n      // Set `state` only if there's no silent option\n      if (!options.silent) {\n        this.component.setState({\n          isRequesting: true,\n          hasError: false,\n          isInvalid: false\n        });\n      }\n    },\n    // Sets `this.state` when a model/collection syncs. It delegates to `this.setState`.\n    // It listens to `Backbone.Model#sync` and `Backbone.Collection#sync`\n    onSync: function (modelOrCollection, res, options) {\n      // Calls `setState` only if there's no silent option\n      if (!options.silent) {\n        this.component.setState({isRequesting: false});\n      }\n    },\n    // Check if `models` is a `Backbone.Model` or an hashmap of them, sets them\n    // to the component state and binds to update on any future changes\n    setModels: function (models, initialState, isDeferred) {\n      if (typeof models !== 'undefined' && (models.attributes ||\n          typeof models === 'object' && _.values(models)[0].attributes)) {\n        // The model(s) bound to this component\n        this.model = models;\n        // Set model(s) attributes on `initialState` for the first render\n        this.setStateBackbone(models, void 0, initialState, isDeferred);\n        this.startModelListeners(models);\n      }\n    },\n    // Check if `collections` is a `Backbone.Model` or an hashmap of them,\n    // sets them to the component state and binds to update on any future changes\n    setCollections: function (collections, initialState, isDeferred) {\n      if (typeof collections !== 'undefined' && (collections.models ||\n          typeof collections === 'object' && _.values(collections)[0].models)) {\n        // The collection(s) bound to this component\n        this.collection = collections;\n        // Set collection(s) models on `initialState` for the first render\n        this.setStateBackbone(collections, void 0, initialState, isDeferred);\n        this.startCollectionListeners(collections);\n      }\n    },\n    // Used internally to set `this.collection` or `this.model` on `this.state`. Delegates to\n    // `this.setState`. It listens to `Backbone.Collection` events such as `add`, `remove`,\n    // `change`, `sort`, `reset` and to `Backbone.Model` `change`.\n    setStateBackbone: function (modelOrCollection, key, target, isDeferred) {\n      if (!(modelOrCollection.models || modelOrCollection.attributes)) {\n        for (key in modelOrCollection)\n            this.setStateBackbone(modelOrCollection[key], key, target);\n        return;\n      }\n      this.setState.apply(this, arguments);\n    },\n    // Sets a model, collection or object into state by delegating to `this.component.setState`.\n    setState: function (modelOrCollection, key, target, isDeferred) {\n      var state = {};\n      var newState = modelOrCollection.toJSON ? modelOrCollection.toJSON() : modelOrCollection;\n\n      if (key) {\n        state[key] = newState;\n      } else if (modelOrCollection.models) {\n        state.collection = newState;\n      } else {\n        state.model = newState;\n      }\n\n      if (target) {\n        _.extend(target, state);\n      } else if (isDeferred) {\n        this.nextState = _.extend(this.nextState || {}, state);\n        _.defer(_.bind(function () {\n          if (this.nextState) {\n            this.component.setState(this.nextState);\n            this.nextState = null;\n          }\n        }, this));\n      } else {\n        this.component.setState(state);\n      }\n    },\n    // Binds the component to any collection changes.\n    startCollectionListeners: function (collection, key) {\n      if (!collection) collection = this.collection;\n      if (collection) {\n        if (collection.models)\n          this\n            .listenTo(collection, 'add remove change sort reset',\n              _.partial(this.setStateBackbone, collection, key, void 0, true))\n            .listenTo(collection, 'error', this.onError)\n            .listenTo(collection, 'request', this.onRequest)\n            .listenTo(collection, 'sync', this.onSync);\n        else if (typeof collection === 'object')\n          for (key in collection)\n            if (collection.hasOwnProperty(key))\n              this.startCollectionListeners(collection[key], key);\n      }\n    },\n    // Binds the component to any model changes.\n    startModelListeners: function (model, key) {\n      if (!model) model = this.model;\n      if (model) {\n        if (model.attributes)\n          this\n            .listenTo(model, 'change',\n              _.partial(this.setStateBackbone, model, key, void 0, true))\n            .listenTo(model, 'error', this.onError)\n            .listenTo(model, 'request', this.onRequest)\n            .listenTo(model, 'sync', this.onSync)\n            .listenTo(model, 'invalid', this.onInvalid);\n        else if (typeof model === 'object')\n          for (key in model)\n            this.startModelListeners(model[key], key);\n      }\n    }\n  });\n\n  // Expose `Backbone.React.Component.mixin`.\n  return mixin;\n}));\n// <a href=\"https://github.com/magalhas/backbone-react-component\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://github-camo.global.ssl.fastly.net/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n\n},{\"backbone\":\"backbone\",\"react\":\"react\",\"underscore\":\"underscore\"}],3:[function(require,module,exports){\n// Backbone.Validation v0.11.5\n//\n// Copyright (c) 2011-2015 Thomas Pedersen\n// Distributed under MIT License\n//\n// Documentation and full license available at:\n// http://thedersen.com/projects/backbone-validation\n(function (factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory(require('backbone'), require('underscore'));\n  } else if (typeof define === 'function' && define.amd) {\n    define(['backbone', 'underscore'], factory);\n  }\n}(function (Backbone, _) {\n  Backbone.Validation = (function(_){\n    'use strict';\n  \n    // Default options\n    // ---------------\n  \n    var defaultOptions = {\n      forceUpdate: false,\n      selector: 'name',\n      labelFormatter: 'sentenceCase',\n      valid: Function.prototype,\n      invalid: Function.prototype\n    };\n  \n  \n    // Helper functions\n    // ----------------\n  \n    // Formatting functions used for formatting error messages\n    var formatFunctions = {\n      // Uses the configured label formatter to format the attribute name\n      // to make it more readable for the user\n      formatLabel: function(attrName, model) {\n        return defaultLabelFormatters[defaultOptions.labelFormatter](attrName, model);\n      },\n  \n      // Replaces nummeric placeholders like {0} in a string with arguments\n      // passed to the function\n      format: function() {\n        var args = Array.prototype.slice.call(arguments),\n            text = args.shift();\n        return text.replace(/\\{(\\d+)\\}/g, function(match, number) {\n          return typeof args[number] !== 'undefined' ? args[number] : match;\n        });\n      }\n    };\n  \n    // Flattens an object\n    // eg:\n    //\n    //     var o = {\n    //       owner: {\n    //         name: 'Backbone',\n    //         address: {\n    //           street: 'Street',\n    //           zip: 1234\n    //         }\n    //       }\n    //     };\n    //\n    // becomes:\n    //\n    //     var o = {\n    //       'owner': {\n    //         name: 'Backbone',\n    //         address: {\n    //           street: 'Street',\n    //           zip: 1234\n    //         }\n    //       },\n    //       'owner.name': 'Backbone',\n    //       'owner.address': {\n    //         street: 'Street',\n    //         zip: 1234\n    //       },\n    //       'owner.address.street': 'Street',\n    //       'owner.address.zip': 1234\n    //     };\n    // This may seem redundant, but it allows for maximum flexibility\n    // in validation rules.\n    var flatten = function (obj, into, prefix) {\n      into = into || {};\n      prefix = prefix || '';\n  \n      _.each(obj, function(val, key) {\n        if(obj.hasOwnProperty(key)) {\n          if (!!val && _.isArray(val)) {\n            _.forEach(val, function(v, k) {\n              flatten(v, into, prefix + key + '.' + k + '.');\n              into[prefix + key + '.' + k] = v;\n            });\n          } else if (!!val && typeof val === 'object' && val.constructor === Object) {\n            flatten(val, into, prefix + key + '.');\n          }\n  \n          // Register the current level object as well\n          into[prefix + key] = val;\n        }\n      });\n  \n      return into;\n    };\n  \n    // Validation\n    // ----------\n  \n    var Validation = (function(){\n  \n      // Returns an object with undefined properties for all\n      // attributes on the model that has defined one or more\n      // validation rules.\n      var getValidatedAttrs = function(model, attrs) {\n        attrs = attrs || _.keys(_.result(model, 'validation') || {});\n        return _.reduce(attrs, function(memo, key) {\n          memo[key] = void 0;\n          return memo;\n        }, {});\n      };\n  \n      // Returns an array with attributes passed through options\n      var getOptionsAttrs = function(options, view) {\n        var attrs = options.attributes;\n        if (_.isFunction(attrs)) {\n          attrs = attrs(view);\n        } else if (_.isString(attrs) && (_.isFunction(defaultAttributeLoaders[attrs]))) {\n          attrs = defaultAttributeLoaders[attrs](view);\n        }\n        if (_.isArray(attrs)) {\n          return attrs;\n        }\n      };\n  \n  \n      // Looks on the model for validations for a specified\n      // attribute. Returns an array of any validators defined,\n      // or an empty array if none is defined.\n      var getValidators = function(model, attr) {\n        var attrValidationSet = model.validation ? _.result(model, 'validation')[attr] || {} : {};\n  \n        // If the validator is a function or a string, wrap it in a function validator\n        if (_.isFunction(attrValidationSet) || _.isString(attrValidationSet)) {\n          attrValidationSet = {\n            fn: attrValidationSet\n          };\n        }\n  \n        // Stick the validator object into an array\n        if(!_.isArray(attrValidationSet)) {\n          attrValidationSet = [attrValidationSet];\n        }\n  \n        // Reduces the array of validators into a new array with objects\n        // with a validation method to call, the value to validate against\n        // and the specified error message, if any\n        return _.reduce(attrValidationSet, function(memo, attrValidation) {\n          _.each(_.without(_.keys(attrValidation), 'msg'), function(validator) {\n            memo.push({\n              fn: defaultValidators[validator],\n              val: attrValidation[validator],\n              msg: attrValidation.msg\n            });\n          });\n          return memo;\n        }, []);\n      };\n  \n      // Validates an attribute against all validators defined\n      // for that attribute. If one or more errors are found,\n      // the first error message is returned.\n      // If the attribute is valid, an empty string is returned.\n      var validateAttr = function(model, attr, value, computed) {\n        // Reduces the array of validators to an error message by\n        // applying all the validators and returning the first error\n        // message, if any.\n        return _.reduce(getValidators(model, attr), function(memo, validator){\n          // Pass the format functions plus the default\n          // validators as the context to the validator\n          var ctx = _.extend({}, formatFunctions, defaultValidators),\n              result = validator.fn.call(ctx, value, attr, validator.val, model, computed);\n  \n          if(result === false || memo === false) {\n            return false;\n          }\n          if (result && !memo) {\n            return _.result(validator, 'msg') || result;\n          }\n          return memo;\n        }, '');\n      };\n  \n      // Loops through the model's attributes and validates the specified attrs.\n      // Returns and object containing names of invalid attributes\n      // as well as error messages.\n      var validateModel = function(model, attrs, validatedAttrs) {\n        var error,\n            invalidAttrs = {},\n            isValid = true,\n            computed = _.clone(attrs);\n  \n        _.each(validatedAttrs, function(val, attr) {\n          error = validateAttr(model, attr, val, computed);\n          if (error) {\n            invalidAttrs[attr] = error;\n            isValid = false;\n          }\n        });\n  \n        return {\n          invalidAttrs: invalidAttrs,\n          isValid: isValid\n        };\n      };\n  \n      // Contains the methods that are mixed in on the model when binding\n      var mixin = function(view, options) {\n        return {\n  \n          // Check whether or not a value, or a hash of values\n          // passes validation without updating the model\n          preValidate: function(attr, value) {\n            var self = this,\n                result = {},\n                error;\n  \n            if(_.isObject(attr)){\n              _.each(attr, function(value, key) {\n                error = self.preValidate(key, value);\n                if(error){\n                  result[key] = error;\n                }\n              });\n  \n              return _.isEmpty(result) ? undefined : result;\n            }\n            else {\n              return validateAttr(this, attr, value, _.extend({}, this.attributes));\n            }\n          },\n  \n          // Check to see if an attribute, an array of attributes or the\n          // entire model is valid. Passing true will force a validation\n          // of the model.\n          isValid: function(option) {\n            var flattened, attrs, error, invalidAttrs;\n  \n            option = option || getOptionsAttrs(options, view);\n  \n            if(_.isString(option)){\n              attrs = [option];\n            } else if(_.isArray(option)) {\n              attrs = option;\n            }\n            if (attrs) {\n              flattened = flatten(this.attributes);\n              //Loop through all associated views\n              _.each(this.associatedViews, function(view) {\n                _.each(attrs, function (attr) {\n                  error = validateAttr(this, attr, flattened[attr], _.extend({}, this.attributes));\n                  if (error) {\n                    options.invalid(view, attr, error, options.selector);\n                    invalidAttrs = invalidAttrs || {};\n                    invalidAttrs[attr] = error;\n                  } else {\n                    options.valid(view, attr, options.selector);\n                  }\n                }, this);\n              }, this);\n            }\n  \n            if(option === true) {\n              invalidAttrs = this.validate();\n            }\n            if (invalidAttrs) {\n              this.trigger('invalid', this, invalidAttrs, {validationError: invalidAttrs});\n            }\n            return attrs ? !invalidAttrs : this.validation ? this._isValid : true;\n          },\n  \n          // This is called by Backbone when it needs to perform validation.\n          // You can call it manually without any parameters to validate the\n          // entire model.\n          validate: function(attrs, setOptions){\n            var model = this,\n                validateAll = !attrs,\n                opt = _.extend({}, options, setOptions),\n                validatedAttrs = getValidatedAttrs(model, getOptionsAttrs(options, view)),\n                allAttrs = _.extend({}, validatedAttrs, model.attributes, attrs),\n                flattened = flatten(allAttrs),\n                changedAttrs = attrs ? flatten(attrs) : flattened,\n                result = validateModel(model, allAttrs, _.pick(flattened, _.keys(validatedAttrs)));\n  \n            model._isValid = result.isValid;\n  \n            //After validation is performed, loop through all associated views\n            _.each(model.associatedViews, function(view){\n  \n              // After validation is performed, loop through all validated and changed attributes\n              // and call the valid and invalid callbacks so the view is updated.\n              _.each(validatedAttrs, function(val, attr){\n                  var invalid = result.invalidAttrs.hasOwnProperty(attr),\n                    changed = changedAttrs.hasOwnProperty(attr);\n  \n                  if(!invalid){\n                    opt.valid(view, attr, opt.selector);\n                  }\n                  if(invalid && (changed || validateAll)){\n                    opt.invalid(view, attr, result.invalidAttrs[attr], opt.selector);\n                  }\n              });\n            });\n  \n            // Trigger validated events.\n            // Need to defer this so the model is actually updated before\n            // the event is triggered.\n            _.defer(function() {\n              model.trigger('validated', model._isValid, model, result.invalidAttrs);\n              model.trigger('validated:' + (model._isValid ? 'valid' : 'invalid'), model, result.invalidAttrs);\n            });\n  \n            // Return any error messages to Backbone, unless the forceUpdate flag is set.\n            // Then we do not return anything and fools Backbone to believe the validation was\n            // a success. That way Backbone will update the model regardless.\n            if (!opt.forceUpdate && _.intersection(_.keys(result.invalidAttrs), _.keys(changedAttrs)).length > 0) {\n              return result.invalidAttrs;\n            }\n          }\n        };\n      };\n  \n      // Helper to mix in validation on a model. Stores the view in the associated views array.\n      var bindModel = function(view, model, options) {\n        if (model.associatedViews) {\n          model.associatedViews.push(view);\n        } else {\n          model.associatedViews = [view];\n        }\n        _.extend(model, mixin(view, options));\n      };\n  \n      // Removes view from associated views of the model or the methods\n      // added to a model if no view or single view provided\n      var unbindModel = function(model, view) {\n        if (view && model.associatedViews && model.associatedViews.length > 1){\n          model.associatedViews = _.without(model.associatedViews, view);\n        } else {\n          delete model.validate;\n          delete model.preValidate;\n          delete model.isValid;\n          delete model.associatedViews;\n        }\n      };\n  \n      // Mix in validation on a model whenever a model is\n      // added to a collection\n      var collectionAdd = function(model) {\n        bindModel(this.view, model, this.options);\n      };\n  \n      // Remove validation from a model whenever a model is\n      // removed from a collection\n      var collectionRemove = function(model) {\n        unbindModel(model);\n      };\n  \n      // Returns the public methods on Backbone.Validation\n      return {\n  \n        // Current version of the library\n        version: '0.11.3',\n  \n        // Called to configure the default options\n        configure: function(options) {\n          _.extend(defaultOptions, options);\n        },\n  \n        // Hooks up validation on a view with a model\n        // or collection\n        bind: function(view, options) {\n          options = _.extend({}, defaultOptions, defaultCallbacks, options);\n  \n          var model = options.model || view.model,\n              collection = options.collection || view.collection;\n  \n          if(typeof model === 'undefined' && typeof collection === 'undefined'){\n            throw 'Before you execute the binding your view must have a model or a collection.\\n' +\n                  'See http://thedersen.com/projects/backbone-validation/#using-form-model-validation for more information.';\n          }\n  \n          if(model) {\n            bindModel(view, model, options);\n          }\n          else if(collection) {\n            collection.each(function(model){\n              bindModel(view, model, options);\n            });\n            collection.bind('add', collectionAdd, {view: view, options: options});\n            collection.bind('remove', collectionRemove);\n          }\n        },\n  \n        // Removes validation from a view with a model\n        // or collection\n        unbind: function(view, options) {\n          options = _.extend({}, options);\n          var model = options.model || view.model,\n              collection = options.collection || view.collection;\n  \n          if(model) {\n            unbindModel(model, view);\n          }\n          else if(collection) {\n            collection.each(function(model){\n              unbindModel(model, view);\n            });\n            collection.unbind('add', collectionAdd);\n            collection.unbind('remove', collectionRemove);\n          }\n        },\n  \n        // Used to extend the Backbone.Model.prototype\n        // with validation\n        mixin: mixin(null, defaultOptions)\n      };\n    }());\n  \n  \n    // Callbacks\n    // ---------\n  \n    var defaultCallbacks = Validation.callbacks = {\n  \n      // Gets called when a previously invalid field in the\n      // view becomes valid. Removes any error message.\n      // Should be overridden with custom functionality.\n      valid: function(view, attr, selector) {\n        view.$('[' + selector + '~=\"' + attr + '\"]')\n            .removeClass('invalid')\n            .removeAttr('data-error');\n      },\n  \n      // Gets called when a field in the view becomes invalid.\n      // Adds a error message.\n      // Should be overridden with custom functionality.\n      invalid: function(view, attr, error, selector) {\n        view.$('[' + selector + '~=\"' + attr + '\"]')\n            .addClass('invalid')\n            .attr('data-error', error);\n      }\n    };\n  \n  \n    // Patterns\n    // --------\n  \n    var defaultPatterns = Validation.patterns = {\n      // Matches any digit(s) (i.e. 0-9)\n      digits: /^\\d+$/,\n  \n      // Matches any number (e.g. 100.000)\n      number: /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/,\n  \n      // Matches a valid email address (e.g. mail@example.com)\n      email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n  \n      // Mathes any valid url (e.g. http://www.xample.com)\n      url: /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i\n    };\n  \n  \n    // Error messages\n    // --------------\n  \n    // Error message for the build in validators.\n    // {x} gets swapped out with arguments form the validator.\n    var defaultMessages = Validation.messages = {\n      required: '{0} is required',\n      acceptance: '{0} must be accepted',\n      min: '{0} must be greater than or equal to {1}',\n      max: '{0} must be less than or equal to {1}',\n      range: '{0} must be between {1} and {2}',\n      length: '{0} must be {1} characters',\n      minLength: '{0} must be at least {1} characters',\n      maxLength: '{0} must be at most {1} characters',\n      rangeLength: '{0} must be between {1} and {2} characters',\n      oneOf: '{0} must be one of: {1}',\n      equalTo: '{0} must be the same as {1}',\n      digits: '{0} must only contain digits',\n      number: '{0} must be a number',\n      email: '{0} must be a valid email',\n      url: '{0} must be a valid url',\n      inlinePattern: '{0} is invalid'\n    };\n  \n    // Label formatters\n    // ----------------\n  \n    // Label formatters are used to convert the attribute name\n    // to a more human friendly label when using the built in\n    // error messages.\n    // Configure which one to use with a call to\n    //\n    //     Backbone.Validation.configure({\n    //       labelFormatter: 'label'\n    //     });\n    var defaultLabelFormatters = Validation.labelFormatters = {\n  \n      // Returns the attribute name with applying any formatting\n      none: function(attrName) {\n        return attrName;\n      },\n  \n      // Converts attributeName or attribute_name to Attribute name\n      sentenceCase: function(attrName) {\n        return attrName.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(match, index) {\n          return index === 0 ? match.toUpperCase() : ' ' + match.toLowerCase();\n        }).replace(/_/g, ' ');\n      },\n  \n      // Looks for a label configured on the model and returns it\n      //\n      //      var Model = Backbone.Model.extend({\n      //        validation: {\n      //          someAttribute: {\n      //            required: true\n      //          }\n      //        },\n      //\n      //        labels: {\n      //          someAttribute: 'Custom label'\n      //        }\n      //      });\n      label: function(attrName, model) {\n        return (model.labels && model.labels[attrName]) || defaultLabelFormatters.sentenceCase(attrName, model);\n      }\n    };\n  \n    // AttributeLoaders\n  \n    var defaultAttributeLoaders = Validation.attributeLoaders = {\n      inputNames: function (view) {\n        var attrs = [];\n        if (view) {\n          view.$('form [name]').each(function () {\n            if (/^(?:input|select|textarea)$/i.test(this.nodeName) && this.name &&\n              this.type !== 'submit' && attrs.indexOf(this.name) === -1) {\n              attrs.push(this.name);\n            }\n          });\n        }\n        return attrs;\n      }\n    };\n  \n  \n    // Built in validators\n    // -------------------\n  \n    var defaultValidators = Validation.validators = (function(){\n      // Use native trim when defined\n      var trim = String.prototype.trim ?\n        function(text) {\n          return text === null ? '' : String.prototype.trim.call(text);\n        } :\n        function(text) {\n          var trimLeft = /^\\s+/,\n              trimRight = /\\s+$/;\n  \n          return text === null ? '' : text.toString().replace(trimLeft, '').replace(trimRight, '');\n        };\n  \n      // Determines whether or not a value is a number\n      var isNumber = function(value){\n        return _.isNumber(value) || (_.isString(value) && value.match(defaultPatterns.number));\n      };\n  \n      // Determines whether or not a value is empty\n      var hasValue = function(value) {\n        return !(_.isNull(value) || _.isUndefined(value) || (_.isString(value) && trim(value) === '') || (_.isArray(value) && _.isEmpty(value)));\n      };\n  \n      return {\n        // Function validator\n        // Lets you implement a custom function used for validation\n        fn: function(value, attr, fn, model, computed) {\n          if(_.isString(fn)){\n            fn = model[fn];\n          }\n          return fn.call(model, value, attr, computed);\n        },\n  \n        // Required validator\n        // Validates if the attribute is required or not\n        // This can be specified as either a boolean value or a function that returns a boolean value\n        required: function(value, attr, required, model, computed) {\n          var isRequired = _.isFunction(required) ? required.call(model, value, attr, computed) : required;\n          if(!isRequired && !hasValue(value)) {\n            return false; // overrides all other validators\n          }\n          if (isRequired && !hasValue(value)) {\n            return this.format(defaultMessages.required, this.formatLabel(attr, model));\n          }\n        },\n  \n        // Acceptance validator\n        // Validates that something has to be accepted, e.g. terms of use\n        // `true` or 'true' are valid\n        acceptance: function(value, attr, accept, model) {\n          if(value !== 'true' && (!_.isBoolean(value) || value === false)) {\n            return this.format(defaultMessages.acceptance, this.formatLabel(attr, model));\n          }\n        },\n  \n        // Min validator\n        // Validates that the value has to be a number and equal to or greater than\n        // the min value specified\n        min: function(value, attr, minValue, model) {\n          if (!isNumber(value) || value < minValue) {\n            return this.format(defaultMessages.min, this.formatLabel(attr, model), minValue);\n          }\n        },\n  \n        // Max validator\n        // Validates that the value has to be a number and equal to or less than\n        // the max value specified\n        max: function(value, attr, maxValue, model) {\n          if (!isNumber(value) || value > maxValue) {\n            return this.format(defaultMessages.max, this.formatLabel(attr, model), maxValue);\n          }\n        },\n  \n        // Range validator\n        // Validates that the value has to be a number and equal to or between\n        // the two numbers specified\n        range: function(value, attr, range, model) {\n          if(!isNumber(value) || value < range[0] || value > range[1]) {\n            return this.format(defaultMessages.range, this.formatLabel(attr, model), range[0], range[1]);\n          }\n        },\n  \n        // Length validator\n        // Validates that the value has to be a string with length equal to\n        // the length value specified\n        length: function(value, attr, length, model) {\n          if (!_.isString(value) || value.length !== length) {\n            return this.format(defaultMessages.length, this.formatLabel(attr, model), length);\n          }\n        },\n  \n        // Min length validator\n        // Validates that the value has to be a string with length equal to or greater than\n        // the min length value specified\n        minLength: function(value, attr, minLength, model) {\n          if (!_.isString(value) || value.length < minLength) {\n            return this.format(defaultMessages.minLength, this.formatLabel(attr, model), minLength);\n          }\n        },\n  \n        // Max length validator\n        // Validates that the value has to be a string with length equal to or less than\n        // the max length value specified\n        maxLength: function(value, attr, maxLength, model) {\n          if (!_.isString(value) || value.length > maxLength) {\n            return this.format(defaultMessages.maxLength, this.formatLabel(attr, model), maxLength);\n          }\n        },\n  \n        // Range length validator\n        // Validates that the value has to be a string and equal to or between\n        // the two numbers specified\n        rangeLength: function(value, attr, range, model) {\n          if (!_.isString(value) || value.length < range[0] || value.length > range[1]) {\n            return this.format(defaultMessages.rangeLength, this.formatLabel(attr, model), range[0], range[1]);\n          }\n        },\n  \n        // One of validator\n        // Validates that the value has to be equal to one of the elements in\n        // the specified array. Case sensitive matching\n        oneOf: function(value, attr, values, model) {\n          if(!_.include(values, value)){\n            return this.format(defaultMessages.oneOf, this.formatLabel(attr, model), values.join(', '));\n          }\n        },\n  \n        // Equal to validator\n        // Validates that the value has to be equal to the value of the attribute\n        // with the name specified\n        equalTo: function(value, attr, equalTo, model, computed) {\n          if(value !== computed[equalTo]) {\n            return this.format(defaultMessages.equalTo, this.formatLabel(attr, model), this.formatLabel(equalTo, model));\n          }\n        },\n  \n        // Pattern validator\n        // Validates that the value has to match the pattern specified.\n        // Can be a regular expression or the name of one of the built in patterns\n        pattern: function(value, attr, pattern, model) {\n          if (!hasValue(value) || !value.toString().match(defaultPatterns[pattern] || pattern)) {\n            return this.format(defaultMessages[pattern] || defaultMessages.inlinePattern, this.formatLabel(attr, model), pattern);\n          }\n        }\n      };\n    }());\n  \n    // Set the correct context for all validators\n    // when used from within a method validator\n    _.each(defaultValidators, function(validator, key){\n      defaultValidators[key] = _.bind(defaultValidators[key], _.extend({}, formatFunctions, defaultValidators));\n    });\n  \n    return Validation;\n  }(_));\n  return Backbone.Validation;\n}));\n},{\"backbone\":\"backbone\",\"underscore\":\"underscore\"}],4:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],5:[function(require,module,exports){\n/*!\n * https://github.com/es-shims/es5-shim\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE\n */\n\n// vim: ts=4 sts=4 sw=4 expandtab\n\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.\n;\n\n// UMD (Universal Module Definition)\n// see https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n    'use strict';\n\n    /* global define, exports, module */\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory();\n  }\n}(this, function () {\n\nvar call = Function.prototype.call;\nvar prototypeOfObject = Object.prototype;\nvar owns = call.bind(prototypeOfObject.hasOwnProperty);\n\n// If JS engine supports accessors creating shortcuts.\nvar defineGetter;\nvar defineSetter;\nvar lookupGetter;\nvar lookupSetter;\nvar supportsAccessors = owns(prototypeOfObject, '__defineGetter__');\nif (supportsAccessors) {\n    /* eslint-disable no-underscore-dangle */\n    defineGetter = call.bind(prototypeOfObject.__defineGetter__);\n    defineSetter = call.bind(prototypeOfObject.__defineSetter__);\n    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);\n    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);\n    /* eslint-enable no-underscore-dangle */\n}\n\n// ES5 15.2.3.2\n// http://es5.github.com/#x15.2.3.2\nif (!Object.getPrototypeOf) {\n    // https://github.com/es-shims/es5-shim/issues#issue/2\n    // http://ejohn.org/blog/objectgetprototypeof/\n    // recommended by fschaefer on github\n    //\n    // sure, and webreflection says ^_^\n    // ... this will nerever possibly return null\n    // ... Opera Mini breaks here with infinite loops\n    Object.getPrototypeOf = function getPrototypeOf(object) {\n        /* eslint-disable no-proto */\n        var proto = object.__proto__;\n        /* eslint-enable no-proto */\n        if (proto || proto === null) {\n            return proto;\n        } else if (object.constructor) {\n            return object.constructor.prototype;\n        } else {\n            return prototypeOfObject;\n        }\n    };\n}\n\n// ES5 15.2.3.3\n// http://es5.github.com/#x15.2.3.3\n\nvar doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {\n    try {\n        object.sentinel = 0;\n        return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;\n    } catch (exception) {\n        return false;\n    }\n};\n\n// check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.\nif (Object.defineProperty) {\n    var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});\n    var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||\n    doesGetOwnPropertyDescriptorWork(document.createElement('div'));\n    if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {\n        var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;\n    }\n}\n\nif (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {\n    var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';\n\n    /* eslint-disable no-proto */\n    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {\n        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {\n            throw new TypeError(ERR_NON_OBJECT + object);\n        }\n\n        // make a valiant attempt to use the real getOwnPropertyDescriptor\n        // for I8's DOM elements.\n        if (getOwnPropertyDescriptorFallback) {\n            try {\n                return getOwnPropertyDescriptorFallback.call(Object, object, property);\n            } catch (exception) {\n                // try the shim if the real one doesn't work\n            }\n        }\n\n        var descriptor;\n\n        // If object does not owns property return undefined immediately.\n        if (!owns(object, property)) {\n            return descriptor;\n        }\n\n        // If object has a property then it's for sure both `enumerable` and\n        // `configurable`.\n        descriptor = { enumerable: true, configurable: true };\n\n        // If JS engine supports accessor properties then property may be a\n        // getter or setter.\n        if (supportsAccessors) {\n            // Unfortunately `__lookupGetter__` will return a getter even\n            // if object has own non getter property along with a same named\n            // inherited getter. To avoid misbehavior we temporary remove\n            // `__proto__` so that `__lookupGetter__` will return getter only\n            // if it's owned by an object.\n            var prototype = object.__proto__;\n            var notPrototypeOfObject = object !== prototypeOfObject;\n            // avoid recursion problem, breaking in Opera Mini when\n            // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')\n            // or any other Object.prototype accessor\n            if (notPrototypeOfObject) {\n                object.__proto__ = prototypeOfObject;\n            }\n\n            var getter = lookupGetter(object, property);\n            var setter = lookupSetter(object, property);\n\n            if (notPrototypeOfObject) {\n                // Once we have getter and setter we can put values back.\n                object.__proto__ = prototype;\n            }\n\n            if (getter || setter) {\n                if (getter) {\n                    descriptor.get = getter;\n                }\n                if (setter) {\n                    descriptor.set = setter;\n                }\n                // If it was accessor property we're done and return here\n                // in order to avoid adding `value` to the descriptor.\n                return descriptor;\n            }\n        }\n\n        // If we got this far we know that object has an own property that is\n        // not an accessor so we set it as a value and return descriptor.\n        descriptor.value = object[property];\n        descriptor.writable = true;\n        return descriptor;\n    };\n    /* eslint-enable no-proto */\n}\n\n// ES5 15.2.3.4\n// http://es5.github.com/#x15.2.3.4\nif (!Object.getOwnPropertyNames) {\n    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {\n        return Object.keys(object);\n    };\n}\n\n// ES5 15.2.3.5\n// http://es5.github.com/#x15.2.3.5\nif (!Object.create) {\n\n    // Contributed by Brandon Benvie, October, 2012\n    var createEmpty;\n    var supportsProto = !({ __proto__: null } instanceof Object);\n                        // the following produces false positives\n                        // in Opera Mini => not a reliable check\n                        // Object.prototype.__proto__ === null\n\n    // Check for document.domain and active x support\n    // No need to use active x approach when document.domain is not set\n    // see https://github.com/es-shims/es5-shim/issues/150\n    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n    /* global ActiveXObject */\n    var shouldUseActiveX = function shouldUseActiveX() {\n        // return early if document.domain not set\n        if (!document.domain) {\n            return false;\n        }\n\n        try {\n            return !!new ActiveXObject('htmlfile');\n        } catch (exception) {\n            return false;\n        }\n    };\n\n    // This supports IE8 when document.domain is used\n    // see https://github.com/es-shims/es5-shim/issues/150\n    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n    var getEmptyViaActiveX = function getEmptyViaActiveX() {\n        var empty;\n        var xDoc;\n\n        xDoc = new ActiveXObject('htmlfile');\n\n        xDoc.write('<script><\\/script>');\n        xDoc.close();\n\n        empty = xDoc.parentWindow.Object.prototype;\n        xDoc = null;\n\n        return empty;\n    };\n\n    // The original implementation using an iframe\n    // before the activex approach was added\n    // see https://github.com/es-shims/es5-shim/issues/150\n    var getEmptyViaIFrame = function getEmptyViaIFrame() {\n        var iframe = document.createElement('iframe');\n        var parent = document.body || document.documentElement;\n        var empty;\n\n        iframe.style.display = 'none';\n        parent.appendChild(iframe);\n        /* eslint-disable no-script-url */\n        iframe.src = 'javascript:';\n        /* eslint-enable no-script-url */\n\n        empty = iframe.contentWindow.Object.prototype;\n        parent.removeChild(iframe);\n        iframe = null;\n\n        return empty;\n    };\n\n    /* global document */\n    if (supportsProto || typeof document === 'undefined') {\n        createEmpty = function () {\n            return { __proto__: null };\n        };\n    } else {\n        // In old IE __proto__ can't be used to manually set `null`, nor does\n        // any other method exist to make an object that inherits from nothing,\n        // aside from Object.prototype itself. Instead, create a new global\n        // object and *steal* its Object.prototype and strip it bare. This is\n        // used as the prototype to create nullary objects.\n        createEmpty = function () {\n            // Determine which approach to use\n            // see https://github.com/es-shims/es5-shim/issues/150\n            var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();\n\n            delete empty.constructor;\n            delete empty.hasOwnProperty;\n            delete empty.propertyIsEnumerable;\n            delete empty.isPrototypeOf;\n            delete empty.toLocaleString;\n            delete empty.toString;\n            delete empty.valueOf;\n            /* eslint-disable no-proto */\n            empty.__proto__ = null;\n            /* eslint-enable no-proto */\n\n            var Empty = function Empty() {};\n            Empty.prototype = empty;\n            // short-circuit future calls\n            createEmpty = function () {\n                return new Empty();\n            };\n            return new Empty();\n        };\n    }\n\n    Object.create = function create(prototype, properties) {\n\n        var object;\n        var Type = function Type() {}; // An empty constructor.\n\n        if (prototype === null) {\n            object = createEmpty();\n        } else {\n            if (typeof prototype !== 'object' && typeof prototype !== 'function') {\n                // In the native implementation `parent` can be `null`\n                // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)\n                // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`\n                // like they are in modern browsers. Using `Object.create` on DOM elements\n                // is...err...probably inappropriate, but the native version allows for it.\n                throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome\n            }\n            Type.prototype = prototype;\n            object = new Type();\n            // IE has no built-in implementation of `Object.getPrototypeOf`\n            // neither `__proto__`, but this manually setting `__proto__` will\n            // guarantee that `Object.getPrototypeOf` will work as expected with\n            // objects created using `Object.create`\n            /* eslint-disable no-proto */\n            object.__proto__ = prototype;\n            /* eslint-enable no-proto */\n        }\n\n        if (properties !== void 0) {\n            Object.defineProperties(object, properties);\n        }\n\n        return object;\n    };\n}\n\n// ES5 15.2.3.6\n// http://es5.github.com/#x15.2.3.6\n\n// Patch for WebKit and IE8 standard mode\n// Designed by hax <hax.github.com>\n// related issue: https://github.com/es-shims/es5-shim/issues#issue/5\n// IE8 Reference:\n//     http://msdn.microsoft.com/en-us/library/dd282900.aspx\n//     http://msdn.microsoft.com/en-us/library/dd229916.aspx\n// WebKit Bugs:\n//     https://bugs.webkit.org/show_bug.cgi?id=36423\n\nvar doesDefinePropertyWork = function doesDefinePropertyWork(object) {\n    try {\n        Object.defineProperty(object, 'sentinel', {});\n        return 'sentinel' in object;\n    } catch (exception) {\n        return false;\n    }\n};\n\n// check whether defineProperty works if it's given. Otherwise,\n// shim partially.\nif (Object.defineProperty) {\n    var definePropertyWorksOnObject = doesDefinePropertyWork({});\n    var definePropertyWorksOnDom = typeof document === 'undefined' ||\n        doesDefinePropertyWork(document.createElement('div'));\n    if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {\n        var definePropertyFallback = Object.defineProperty,\n            definePropertiesFallback = Object.defineProperties;\n    }\n}\n\nif (!Object.defineProperty || definePropertyFallback) {\n    var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';\n    var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';\n    var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';\n\n    Object.defineProperty = function defineProperty(object, property, descriptor) {\n        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {\n            throw new TypeError(ERR_NON_OBJECT_TARGET + object);\n        }\n        if ((typeof descriptor !== 'object' && typeof descriptor !== 'function') || descriptor === null) {\n            throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);\n        }\n        // make a valiant attempt to use the real defineProperty\n        // for I8's DOM elements.\n        if (definePropertyFallback) {\n            try {\n                return definePropertyFallback.call(Object, object, property, descriptor);\n            } catch (exception) {\n                // try the shim if the real one doesn't work\n            }\n        }\n\n        // If it's a data property.\n        if ('value' in descriptor) {\n            // fail silently if 'writable', 'enumerable', or 'configurable'\n            // are requested but not supported\n            /*\n            // alternate approach:\n            if ( // can't implement these features; allow false but not true\n                ('writable' in descriptor && !descriptor.writable) ||\n                ('enumerable' in descriptor && !descriptor.enumerable) ||\n                ('configurable' in descriptor && !descriptor.configurable)\n            ))\n                throw new RangeError(\n                    'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'\n                );\n            */\n\n            if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {\n                // As accessors are supported only on engines implementing\n                // `__proto__` we can safely override `__proto__` while defining\n                // a property to make sure that we don't hit an inherited\n                // accessor.\n                /* eslint-disable no-proto */\n                var prototype = object.__proto__;\n                object.__proto__ = prototypeOfObject;\n                // Deleting a property anyway since getter / setter may be\n                // defined on object itself.\n                delete object[property];\n                object[property] = descriptor.value;\n                // Setting original `__proto__` back now.\n                object.__proto__ = prototype;\n                /* eslint-enable no-proto */\n            } else {\n                object[property] = descriptor.value;\n            }\n        } else {\n            if (!supportsAccessors) {\n                throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n            }\n            // If we got that far then getters and setters can be defined !!\n            if ('get' in descriptor) {\n                defineGetter(object, property, descriptor.get);\n            }\n            if ('set' in descriptor) {\n                defineSetter(object, property, descriptor.set);\n            }\n        }\n        return object;\n    };\n}\n\n// ES5 15.2.3.7\n// http://es5.github.com/#x15.2.3.7\nif (!Object.defineProperties || definePropertiesFallback) {\n    Object.defineProperties = function defineProperties(object, properties) {\n        // make a valiant attempt to use the real defineProperties\n        if (definePropertiesFallback) {\n            try {\n                return definePropertiesFallback.call(Object, object, properties);\n            } catch (exception) {\n                // try the shim if the real one doesn't work\n            }\n        }\n\n        Object.keys(properties).forEach(function (property) {\n            if (property !== '__proto__') {\n                Object.defineProperty(object, property, properties[property]);\n            }\n        });\n        return object;\n    };\n}\n\n// ES5 15.2.3.8\n// http://es5.github.com/#x15.2.3.8\nif (!Object.seal) {\n    Object.seal = function seal(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.seal can only be called on Objects.');\n        }\n        // this is misleading and breaks feature-detection, but\n        // allows \"securable\" code to \"gracefully\" degrade to working\n        // but insecure code.\n        return object;\n    };\n}\n\n// ES5 15.2.3.9\n// http://es5.github.com/#x15.2.3.9\nif (!Object.freeze) {\n    Object.freeze = function freeze(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.freeze can only be called on Objects.');\n        }\n        // this is misleading and breaks feature-detection, but\n        // allows \"securable\" code to \"gracefully\" degrade to working\n        // but insecure code.\n        return object;\n    };\n}\n\n// detect a Rhino bug and patch it\ntry {\n    Object.freeze(function () {});\n} catch (exception) {\n    Object.freeze = (function (freezeObject) {\n        return function freeze(object) {\n            if (typeof object === 'function') {\n                return object;\n            } else {\n                return freezeObject(object);\n            }\n        };\n    }(Object.freeze));\n}\n\n// ES5 15.2.3.10\n// http://es5.github.com/#x15.2.3.10\nif (!Object.preventExtensions) {\n    Object.preventExtensions = function preventExtensions(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.preventExtensions can only be called on Objects.');\n        }\n        // this is misleading and breaks feature-detection, but\n        // allows \"securable\" code to \"gracefully\" degrade to working\n        // but insecure code.\n        return object;\n    };\n}\n\n// ES5 15.2.3.11\n// http://es5.github.com/#x15.2.3.11\nif (!Object.isSealed) {\n    Object.isSealed = function isSealed(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.isSealed can only be called on Objects.');\n        }\n        return false;\n    };\n}\n\n// ES5 15.2.3.12\n// http://es5.github.com/#x15.2.3.12\nif (!Object.isFrozen) {\n    Object.isFrozen = function isFrozen(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.isFrozen can only be called on Objects.');\n        }\n        return false;\n    };\n}\n\n// ES5 15.2.3.13\n// http://es5.github.com/#x15.2.3.13\nif (!Object.isExtensible) {\n    Object.isExtensible = function isExtensible(object) {\n        // 1. If Type(O) is not Object throw a TypeError exception.\n        if (Object(object) !== object) {\n            throw new TypeError('Object.isExtensible can only be called on Objects.');\n        }\n        // 2. Return the Boolean value of the [[Extensible]] internal property of O.\n        var name = '';\n        while (owns(object, name)) {\n            name += '?';\n        }\n        object[name] = true;\n        var returnValue = owns(object, name);\n        delete object[name];\n        return returnValue;\n    };\n}\n\n}));\n\n},{}],6:[function(require,module,exports){\n/*!\n * https://github.com/es-shims/es5-shim\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE\n */\n\n// vim: ts=4 sts=4 sw=4 expandtab\n\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.\n;\n\n// UMD (Universal Module Definition)\n// see https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n    'use strict';\n\n    /* global define, exports, module */\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory();\n    }\n}(this, function () {\n\n/**\n * Brings an environment as close to ECMAScript 5 compliance\n * as is possible with the facilities of erstwhile engines.\n *\n * Annotated ES5: http://es5.github.com/ (specific links below)\n * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\n * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/\n */\n\n// Shortcut to an often accessed properties, in order to avoid multiple\n// dereference that costs universally.\nvar ArrayPrototype = Array.prototype;\nvar ObjectPrototype = Object.prototype;\nvar FunctionPrototype = Function.prototype;\nvar StringPrototype = String.prototype;\nvar NumberPrototype = Number.prototype;\nvar array_slice = ArrayPrototype.slice;\nvar array_splice = ArrayPrototype.splice;\nvar array_push = ArrayPrototype.push;\nvar array_unshift = ArrayPrototype.unshift;\nvar array_concat = ArrayPrototype.concat;\nvar call = FunctionPrototype.call;\n\n// Having a toString local variable name breaks in Opera so use to_string.\nvar to_string = ObjectPrototype.toString;\n\nvar isArray = Array.isArray || function isArray(obj) {\n    return to_string.call(obj) === '[object Array]';\n};\n\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, tryFunctionObject = function tryFunctionObject(value) { try { fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]'; isCallable = function isCallable(value) { if (typeof value !== 'function') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };\nvar isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };\nvar isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };\n\nvar isArguments = function isArguments(value) {\n    var str = to_string.call(value);\n    var isArgs = str === '[object Arguments]';\n    if (!isArgs) {\n        isArgs = !isArray(value) &&\n          value !== null &&\n          typeof value === 'object' &&\n          typeof value.length === 'number' &&\n          value.length >= 0 &&\n          isCallable(value.callee);\n    }\n    return isArgs;\n};\n\n/* inlined from http://npmjs.com/define-properties */\nvar defineProperties = (function (has) {\n  var supportsDescriptors = Object.defineProperty && (function () {\n      try {\n          var obj = {};\n          Object.defineProperty(obj, 'x', { enumerable: false, value: obj });\n          for (var _ in obj) { return false; }\n          return obj.x === obj;\n      } catch (e) { /* this is ES3 */\n          return false;\n      }\n  }());\n\n  // Define configurable, writable and non-enumerable props\n  // if they don't exist.\n  var defineProperty;\n  if (supportsDescriptors) {\n      defineProperty = function (object, name, method, forceAssign) {\n          if (!forceAssign && (name in object)) { return; }\n          Object.defineProperty(object, name, {\n              configurable: true,\n              enumerable: false,\n              writable: true,\n              value: method\n          });\n      };\n  } else {\n      defineProperty = function (object, name, method, forceAssign) {\n          if (!forceAssign && (name in object)) { return; }\n          object[name] = method;\n      };\n  }\n  return function defineProperties(object, map, forceAssign) {\n      for (var name in map) {\n          if (has.call(map, name)) {\n            defineProperty(object, name, map[name], forceAssign);\n          }\n      }\n  };\n}(ObjectPrototype.hasOwnProperty));\n\n//\n// Util\n// ======\n//\n\n/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */\nvar isPrimitive = function isPrimitive(input) {\n    var type = typeof input;\n    return input === null || (type !== 'object' && type !== 'function');\n};\n\nvar ES = {\n    // ES5 9.4\n    // http://es5.github.com/#x9.4\n    // http://jsperf.com/to-integer\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */\n    ToInteger: function ToInteger(num) {\n        var n = +num;\n        if (n !== n) { // isNaN\n            n = 0;\n        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));\n        }\n        return n;\n    },\n\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */\n    ToPrimitive: function ToPrimitive(input) {\n        var val, valueOf, toStr;\n        if (isPrimitive(input)) {\n            return input;\n        }\n        valueOf = input.valueOf;\n        if (isCallable(valueOf)) {\n            val = valueOf.call(input);\n            if (isPrimitive(val)) {\n                return val;\n            }\n        }\n        toStr = input.toString;\n        if (isCallable(toStr)) {\n            val = toStr.call(input);\n            if (isPrimitive(val)) {\n                return val;\n            }\n        }\n        throw new TypeError();\n    },\n\n    // ES5 9.9\n    // http://es5.github.com/#x9.9\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */\n    ToObject: function (o) {\n        /* jshint eqnull: true */\n        if (o == null) { // this matches both null and undefined\n            throw new TypeError(\"can't convert \" + o + ' to object');\n        }\n        return Object(o);\n    },\n\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */\n    ToUint32: function ToUint32(x) {\n        return x >>> 0;\n    }\n};\n\n//\n// Function\n// ========\n//\n\n// ES-5 15.3.4.5\n// http://es5.github.com/#x15.3.4.5\n\nvar Empty = function Empty() {};\n\ndefineProperties(FunctionPrototype, {\n    bind: function bind(that) { // .length is 1\n        // 1. Let Target be the this value.\n        var target = this;\n        // 2. If IsCallable(Target) is false, throw a TypeError exception.\n        if (!isCallable(target)) {\n            throw new TypeError('Function.prototype.bind called on incompatible ' + target);\n        }\n        // 3. Let A be a new (possibly empty) internal list of all of the\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.\n        // XXX slicedArgs will stand in for \"A\" if used\n        var args = array_slice.call(arguments, 1); // for normal call\n        // 4. Let F be a new native ECMAScript object.\n        // 11. Set the [[Prototype]] internal property of F to the standard\n        //   built-in Function prototype object as specified in 15.3.3.1.\n        // 12. Set the [[Call]] internal property of F as described in\n        //   15.3.4.5.1.\n        // 13. Set the [[Construct]] internal property of F as described in\n        //   15.3.4.5.2.\n        // 14. Set the [[HasInstance]] internal property of F as described in\n        //   15.3.4.5.3.\n        var bound;\n        var binder = function () {\n\n            if (this instanceof bound) {\n                // 15.3.4.5.2 [[Construct]]\n                // When the [[Construct]] internal method of a function object,\n                // F that was created using the bind function is called with a\n                // list of arguments ExtraArgs, the following steps are taken:\n                // 1. Let target be the value of F's [[TargetFunction]]\n                //   internal property.\n                // 2. If target has no [[Construct]] internal method, a\n                //   TypeError exception is thrown.\n                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\n                //   property.\n                // 4. Let args be a new list containing the same values as the\n                //   list boundArgs in the same order followed by the same\n                //   values as the list ExtraArgs in the same order.\n                // 5. Return the result of calling the [[Construct]] internal\n                //   method of target providing args as the arguments.\n\n                var result = target.apply(\n                    this,\n                    array_concat.call(args, array_slice.call(arguments))\n                );\n                if (Object(result) === result) {\n                    return result;\n                }\n                return this;\n\n            } else {\n                // 15.3.4.5.1 [[Call]]\n                // When the [[Call]] internal method of a function object, F,\n                // which was created using the bind function is called with a\n                // this value and a list of arguments ExtraArgs, the following\n                // steps are taken:\n                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\n                //   property.\n                // 2. Let boundThis be the value of F's [[BoundThis]] internal\n                //   property.\n                // 3. Let target be the value of F's [[TargetFunction]] internal\n                //   property.\n                // 4. Let args be a new list containing the same values as the\n                //   list boundArgs in the same order followed by the same\n                //   values as the list ExtraArgs in the same order.\n                // 5. Return the result of calling the [[Call]] internal method\n                //   of target providing boundThis as the this value and\n                //   providing args as the arguments.\n\n                // equiv: target.call(this, ...boundArgs, ...args)\n                return target.apply(\n                    that,\n                    array_concat.call(args, array_slice.call(arguments))\n                );\n\n            }\n\n        };\n\n        // 15. If the [[Class]] internal property of Target is \"Function\", then\n        //     a. Let L be the length property of Target minus the length of A.\n        //     b. Set the length own property of F to either 0 or L, whichever is\n        //       larger.\n        // 16. Else set the length own property of F to 0.\n\n        var boundLength = Math.max(0, target.length - args.length);\n\n        // 17. Set the attributes of the length own property of F to the values\n        //   specified in 15.3.5.1.\n        var boundArgs = [];\n        for (var i = 0; i < boundLength; i++) {\n            boundArgs.push('$' + i);\n        }\n\n        // XXX Build a dynamic function with desired amount of arguments is the only\n        // way to set the length property of a function.\n        // In environments where Content Security Policies enabled (Chrome extensions,\n        // for ex.) all use of eval or Function costructor throws an exception.\n        // However in all of these environments Function.prototype.bind exists\n        // and so this code will never be executed.\n        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n\n        if (target.prototype) {\n            Empty.prototype = target.prototype;\n            bound.prototype = new Empty();\n            // Clean up dangling references.\n            Empty.prototype = null;\n        }\n\n        // TODO\n        // 18. Set the [[Extensible]] internal property of F to true.\n\n        // TODO\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\n        // 20. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\n        //   false.\n        // 21. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\n        //   and false.\n\n        // TODO\n        // NOTE Function objects created using Function.prototype.bind do not\n        // have a prototype property or the [[Code]], [[FormalParameters]], and\n        // [[Scope]] internal properties.\n        // XXX can't delete prototype in pure-js.\n\n        // 22. Return F.\n        return bound;\n    }\n});\n\n// _Please note: Shortcuts are defined after `Function.prototype.bind` as we\n// us it in defining shortcuts.\nvar owns = call.bind(ObjectPrototype.hasOwnProperty);\n\n//\n// Array\n// =====\n//\n\n// ES5 15.4.4.12\n// http://es5.github.com/#x15.4.4.12\nvar spliceNoopReturnsEmptyArray = (function () {\n    var a = [1, 2];\n    var result = a.splice();\n    return a.length === 2 && isArray(result) && result.length === 0;\n}());\ndefineProperties(ArrayPrototype, {\n    // Safari 5.0 bug where .splice() returns undefined\n    splice: function splice(start, deleteCount) {\n        if (arguments.length === 0) {\n            return [];\n        } else {\n            return array_splice.apply(this, arguments);\n        }\n    }\n}, !spliceNoopReturnsEmptyArray);\n\nvar spliceWorksWithEmptyObject = (function () {\n    var obj = {};\n    ArrayPrototype.splice.call(obj, 0, 0, 1);\n    return obj.length === 1;\n}());\ndefineProperties(ArrayPrototype, {\n    splice: function splice(start, deleteCount) {\n        if (arguments.length === 0) { return []; }\n        var args = arguments;\n        this.length = Math.max(ES.ToInteger(this.length), 0);\n        if (arguments.length > 0 && typeof deleteCount !== 'number') {\n            args = array_slice.call(arguments);\n            if (args.length < 2) {\n                args.push(this.length - start);\n            } else {\n                args[1] = ES.ToInteger(deleteCount);\n            }\n        }\n        return array_splice.apply(this, args);\n    }\n}, !spliceWorksWithEmptyObject);\n\n// ES5 15.4.4.12\n// http://es5.github.com/#x15.4.4.13\n// Return len+argCount.\n// [bugfix, ielt8]\n// IE < 8 bug: [].unshift(0) === undefined but should be \"1\"\nvar hasUnshiftReturnValueBug = [].unshift(0) !== 1;\ndefineProperties(ArrayPrototype, {\n    unshift: function () {\n        array_unshift.apply(this, arguments);\n        return this.length;\n    }\n}, hasUnshiftReturnValueBug);\n\n// ES5 15.4.3.2\n// http://es5.github.com/#x15.4.3.2\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray\ndefineProperties(Array, { isArray: isArray });\n\n// The IsCallable() check in the Array functions\n// has been replaced with a strict check on the\n// internal class of the object to trap cases where\n// the provided function was actually a regular\n// expression literal, which in V8 and\n// JavaScriptCore is a typeof \"function\".  Only in\n// V8 are regular expression literals permitted as\n// reduce parameters, so it is desirable in the\n// general case for the shim to match the more\n// strict and common behavior of rejecting regular\n// expressions.\n\n// ES5 15.4.4.18\n// http://es5.github.com/#x15.4.4.18\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach\n\n// Check failure of by-index access of string characters (IE < 9)\n// and failure of `0 in boxedString` (Rhino)\nvar boxedString = Object('a');\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);\n\nvar properlyBoxesContext = function properlyBoxed(method) {\n    // Check node 0.6.21 bug where third parameter is not boxed\n    var properlyBoxesNonStrict = true;\n    var properlyBoxesStrict = true;\n    if (method) {\n        method.call('foo', function (_, __, context) {\n            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }\n        });\n\n        method.call([1], function () {\n            'use strict';\n\n            properlyBoxesStrict = typeof this === 'string';\n        }, 'x');\n    }\n    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;\n};\n\ndefineProperties(ArrayPrototype, {\n    forEach: function forEach(callbackfn /*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var i = -1;\n        var length = self.length >>> 0;\n        var T;\n        if (arguments.length > 1) {\n          T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.forEach callback must be a function');\n        }\n\n        while (++i < length) {\n            if (i in self) {\n                // Invoke the callback function with call, passing arguments:\n                // context, property value, property key, thisArg object\n                if (typeof T !== 'undefined') {\n                    callbackfn.call(T, self[i], i, object);\n                } else {\n                    callbackfn(self[i], i, object);\n                }\n            }\n        }\n    }\n}, !properlyBoxesContext(ArrayPrototype.forEach));\n\n// ES5 15.4.4.19\n// http://es5.github.com/#x15.4.4.19\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map\ndefineProperties(ArrayPrototype, {\n    map: function map(callbackfn/*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var length = self.length >>> 0;\n        var result = Array(length);\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.map callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self) {\n                if (typeof T !== 'undefined') {\n                    result[i] = callbackfn.call(T, self[i], i, object);\n                } else {\n                    result[i] = callbackfn(self[i], i, object);\n                }\n            }\n        }\n        return result;\n    }\n}, !properlyBoxesContext(ArrayPrototype.map));\n\n// ES5 15.4.4.20\n// http://es5.github.com/#x15.4.4.20\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\ndefineProperties(ArrayPrototype, {\n    filter: function filter(callbackfn /*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var length = self.length >>> 0;\n        var result = [];\n        var value;\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.filter callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self) {\n                value = self[i];\n                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {\n                    result.push(value);\n                }\n            }\n        }\n        return result;\n    }\n}, !properlyBoxesContext(ArrayPrototype.filter));\n\n// ES5 15.4.4.16\n// http://es5.github.com/#x15.4.4.16\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every\ndefineProperties(ArrayPrototype, {\n    every: function every(callbackfn /*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var length = self.length >>> 0;\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.every callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}, !properlyBoxesContext(ArrayPrototype.every));\n\n// ES5 15.4.4.17\n// http://es5.github.com/#x15.4.4.17\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some\ndefineProperties(ArrayPrototype, {\n    some: function some(callbackfn/*, thisArg */) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var length = self.length >>> 0;\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.some callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}, !properlyBoxesContext(ArrayPrototype.some));\n\n// ES5 15.4.4.21\n// http://es5.github.com/#x15.4.4.21\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce\nvar reduceCoercesToObject = false;\nif (ArrayPrototype.reduce) {\n    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}\ndefineProperties(ArrayPrototype, {\n    reduce: function reduce(callbackfn /*, initialValue*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var length = self.length >>> 0;\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.reduce callback must be a function');\n        }\n\n        // no value to return if no initial value and an empty array\n        if (length === 0 && arguments.length === 1) {\n            throw new TypeError('reduce of empty array with no initial value');\n        }\n\n        var i = 0;\n        var result;\n        if (arguments.length >= 2) {\n            result = arguments[1];\n        } else {\n            do {\n                if (i in self) {\n                    result = self[i++];\n                    break;\n                }\n\n                // if array contains no values, no initial value to return\n                if (++i >= length) {\n                    throw new TypeError('reduce of empty array with no initial value');\n                }\n            } while (true);\n        }\n\n        for (; i < length; i++) {\n            if (i in self) {\n                result = callbackfn(result, self[i], i, object);\n            }\n        }\n\n        return result;\n    }\n}, !reduceCoercesToObject);\n\n// ES5 15.4.4.22\n// http://es5.github.com/#x15.4.4.22\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight\nvar reduceRightCoercesToObject = false;\nif (ArrayPrototype.reduceRight) {\n    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}\ndefineProperties(ArrayPrototype, {\n    reduceRight: function reduceRight(callbackfn/*, initial*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? this.split('') : object;\n        var length = self.length >>> 0;\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.reduceRight callback must be a function');\n        }\n\n        // no value to return if no initial value, empty array\n        if (length === 0 && arguments.length === 1) {\n            throw new TypeError('reduceRight of empty array with no initial value');\n        }\n\n        var result;\n        var i = length - 1;\n        if (arguments.length >= 2) {\n            result = arguments[1];\n        } else {\n            do {\n                if (i in self) {\n                    result = self[i--];\n                    break;\n                }\n\n                // if array contains no values, no initial value to return\n                if (--i < 0) {\n                    throw new TypeError('reduceRight of empty array with no initial value');\n                }\n            } while (true);\n        }\n\n        if (i < 0) {\n            return result;\n        }\n\n        do {\n            if (i in self) {\n                result = callbackfn(result, self[i], i, object);\n            }\n        } while (i--);\n\n        return result;\n    }\n}, !reduceRightCoercesToObject);\n\n// ES5 15.4.4.14\n// http://es5.github.com/#x15.4.4.14\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\nvar hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;\ndefineProperties(ArrayPrototype, {\n    indexOf: function indexOf(searchElement /*, fromIndex */) {\n        var self = splitString && isString(this) ? this.split('') : ES.ToObject(this);\n        var length = self.length >>> 0;\n\n        if (length === 0) {\n            return -1;\n        }\n\n        var i = 0;\n        if (arguments.length > 1) {\n            i = ES.ToInteger(arguments[1]);\n        }\n\n        // handle negative indices\n        i = i >= 0 ? i : Math.max(0, length + i);\n        for (; i < length; i++) {\n            if (i in self && self[i] === searchElement) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}, hasFirefox2IndexOfBug);\n\n// ES5 15.4.4.15\n// http://es5.github.com/#x15.4.4.15\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf\nvar hasFirefox2LastIndexOfBug = Array.prototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;\ndefineProperties(ArrayPrototype, {\n    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */) {\n        var self = splitString && isString(this) ? this.split('') : ES.ToObject(this);\n        var length = self.length >>> 0;\n\n        if (length === 0) {\n            return -1;\n        }\n        var i = length - 1;\n        if (arguments.length > 1) {\n            i = Math.min(i, ES.ToInteger(arguments[1]));\n        }\n        // handle negative indices\n        i = i >= 0 ? i : length - Math.abs(i);\n        for (; i >= 0; i--) {\n            if (i in self && searchElement === self[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}, hasFirefox2LastIndexOfBug);\n\n//\n// Object\n// ======\n//\n\n// ES5 15.2.3.14\n// http://es5.github.com/#x15.2.3.14\n\n// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\nvar hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString'),\n    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),\n    hasStringEnumBug = !owns('x', '0'),\n    dontEnums = [\n        'toString',\n        'toLocaleString',\n        'valueOf',\n        'hasOwnProperty',\n        'isPrototypeOf',\n        'propertyIsEnumerable',\n        'constructor'\n    ],\n    dontEnumsLength = dontEnums.length;\n\ndefineProperties(Object, {\n    keys: function keys(object) {\n        var isFn = isCallable(object),\n            isArgs = isArguments(object),\n            isObject = object !== null && typeof object === 'object',\n            isStr = isObject && isString(object);\n\n        if (!isObject && !isFn && !isArgs) {\n            throw new TypeError('Object.keys called on a non-object');\n        }\n\n        var theKeys = [];\n        var skipProto = hasProtoEnumBug && isFn;\n        if ((isStr && hasStringEnumBug) || isArgs) {\n            for (var i = 0; i < object.length; ++i) {\n                theKeys.push(String(i));\n            }\n        }\n\n        if (!isArgs) {\n            for (var name in object) {\n                if (!(skipProto && name === 'prototype') && owns(object, name)) {\n                    theKeys.push(String(name));\n                }\n            }\n        }\n\n        if (hasDontEnumBug) {\n            var ctor = object.constructor,\n                skipConstructor = ctor && ctor.prototype === object;\n            for (var j = 0; j < dontEnumsLength; j++) {\n                var dontEnum = dontEnums[j];\n                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {\n                    theKeys.push(dontEnum);\n                }\n            }\n        }\n        return theKeys;\n    }\n});\n\nvar keysWorksWithArguments = Object.keys && (function () {\n    // Safari 5.0 bug\n    return Object.keys(arguments).length === 2;\n}(1, 2));\nvar originalKeys = Object.keys;\ndefineProperties(Object, {\n    keys: function keys(object) {\n        if (isArguments(object)) {\n            return originalKeys(ArrayPrototype.slice.call(object));\n        } else {\n            return originalKeys(object);\n        }\n    }\n}, !keysWorksWithArguments);\n\n//\n// Date\n// ====\n//\n\n// ES5 15.9.5.43\n// http://es5.github.com/#x15.9.5.43\n// This function returns a String value represent the instance in time\n// represented by this Date object. The format of the String is the Date Time\n// string format defined in 15.9.1.15. All fields are present in the String.\n// The time zone is always UTC, denoted by the suffix Z. If the time value of\n// this object is not a finite Number a RangeError exception is thrown.\nvar negativeDate = -62198755200000;\nvar negativeYearString = '-000001';\nvar hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;\n\ndefineProperties(Date.prototype, {\n    toISOString: function toISOString() {\n        var result, length, value, year, month;\n        if (!isFinite(this)) {\n            throw new RangeError('Date.prototype.toISOString called on non-finite value.');\n        }\n\n        year = this.getUTCFullYear();\n\n        month = this.getUTCMonth();\n        // see https://github.com/es-shims/es5-shim/issues/111\n        year += Math.floor(month / 12);\n        month = (month % 12 + 12) % 12;\n\n        // the date time string format is specified in 15.9.1.15.\n        result = [month + 1, this.getUTCDate(), this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds()];\n        year = (\n            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +\n            ('00000' + Math.abs(year)).slice((0 <= year && year <= 9999) ? -4 : -6)\n        );\n\n        length = result.length;\n        while (length--) {\n            value = result[length];\n            // pad months, days, hours, minutes, and seconds to have two\n            // digits.\n            if (value < 10) {\n                result[length] = '0' + value;\n            }\n        }\n        // pad milliseconds to have three digits.\n        return (\n            year + '-' + result.slice(0, 2).join('-') +\n            'T' + result.slice(2).join(':') + '.' +\n            ('000' + this.getUTCMilliseconds()).slice(-3) + 'Z'\n        );\n    }\n}, hasNegativeDateBug);\n\n// ES5 15.9.5.44\n// http://es5.github.com/#x15.9.5.44\n// This function provides a String representation of a Date object for use by\n// JSON.stringify (15.12.3).\nvar dateToJSONIsSupported = (function () {\n    try {\n        return Date.prototype.toJSON &&\n            new Date(NaN).toJSON() === null &&\n            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&\n            Date.prototype.toJSON.call({ // generic\n                toISOString: function () { return true; }\n            });\n    } catch (e) {\n        return false;\n    }\n}());\nif (!dateToJSONIsSupported) {\n    Date.prototype.toJSON = function toJSON(key) {\n        // When the toJSON method is called with argument key, the following\n        // steps are taken:\n\n        // 1.  Let O be the result of calling ToObject, giving it the this\n        // value as its argument.\n        // 2. Let tv be ES.ToPrimitive(O, hint Number).\n        var O = Object(this);\n        var tv = ES.ToPrimitive(O);\n        // 3. If tv is a Number and is not finite, return null.\n        if (typeof tv === 'number' && !isFinite(tv)) {\n            return null;\n        }\n        // 4. Let toISO be the result of calling the [[Get]] internal method of\n        // O with argument \"toISOString\".\n        var toISO = O.toISOString;\n        // 5. If IsCallable(toISO) is false, throw a TypeError exception.\n        if (!isCallable(toISO)) {\n            throw new TypeError('toISOString property is not callable');\n        }\n        // 6. Return the result of calling the [[Call]] internal method of\n        //  toISO with O as the this value and an empty argument list.\n        return toISO.call(O);\n\n        // NOTE 1 The argument is ignored.\n\n        // NOTE 2 The toJSON function is intentionally generic; it does not\n        // require that its this value be a Date object. Therefore, it can be\n        // transferred to other kinds of objects for use as a method. However,\n        // it does require that any such object have a toISOString method. An\n        // object is free to use the argument key to filter its\n        // stringification.\n    };\n}\n\n// ES5 15.9.4.2\n// http://es5.github.com/#x15.9.4.2\n// based on work shared by Daniel Friesen (dantman)\n// http://gist.github.com/303249\nvar supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;\nvar acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));\nvar doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));\nif (!Date.parse || doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {\n    // XXX global assignment won't work in embeddings that use\n    // an alternate object for the context.\n    /* global Date: true */\n    /* eslint-disable no-undef */\n    Date = (function (NativeDate) {\n    /* eslint-enable no-undef */\n        // Date.length === 7\n        var DateShim = function Date(Y, M, D, h, m, s, ms) {\n            var length = arguments.length;\n            var date;\n            if (this instanceof NativeDate) {\n                date = length === 1 && String(Y) === Y ? // isString(Y)\n                    // We explicitly pass it through parse:\n                    new NativeDate(DateShim.parse(Y)) :\n                    // We have to manually make calls depending on argument\n                    // length here\n                    length >= 7 ? new NativeDate(Y, M, D, h, m, s, ms) :\n                    length >= 6 ? new NativeDate(Y, M, D, h, m, s) :\n                    length >= 5 ? new NativeDate(Y, M, D, h, m) :\n                    length >= 4 ? new NativeDate(Y, M, D, h) :\n                    length >= 3 ? new NativeDate(Y, M, D) :\n                    length >= 2 ? new NativeDate(Y, M) :\n                    length >= 1 ? new NativeDate(Y) :\n                                  new NativeDate();\n            } else {\n                date = NativeDate.apply(this, arguments);\n            }\n            // Prevent mixups with unfixed Date object\n            defineProperties(date, { constructor: DateShim }, true);\n            return date;\n        };\n\n        // 15.9.1.15 Date Time String Format.\n        var isoDateExpression = new RegExp('^' +\n            '(\\\\d{4}|[+-]\\\\d{6})' + // four-digit year capture or sign +\n                                      // 6-digit extended year\n            '(?:-(\\\\d{2})' + // optional month capture\n            '(?:-(\\\\d{2})' + // optional day capture\n            '(?:' + // capture hours:minutes:seconds.milliseconds\n                'T(\\\\d{2})' + // hours capture\n                ':(\\\\d{2})' + // minutes capture\n                '(?:' + // optional :seconds.milliseconds\n                    ':(\\\\d{2})' + // seconds capture\n                    '(?:(\\\\.\\\\d{1,}))?' + // milliseconds capture\n                ')?' +\n            '(' + // capture UTC offset component\n                'Z|' + // UTC capture\n                '(?:' + // offset specifier +/-hours:minutes\n                    '([-+])' + // sign capture\n                    '(\\\\d{2})' + // hours offset capture\n                    ':(\\\\d{2})' + // minutes offset capture\n                ')' +\n            ')?)?)?)?' +\n        '$');\n\n        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n\n        var dayFromMonth = function dayFromMonth(year, month) {\n            var t = month > 1 ? 1 : 0;\n            return (\n                months[month] +\n                Math.floor((year - 1969 + t) / 4) -\n                Math.floor((year - 1901 + t) / 100) +\n                Math.floor((year - 1601 + t) / 400) +\n                365 * (year - 1970)\n            );\n        };\n\n        var toUTC = function toUTC(t) {\n            return Number(new NativeDate(1970, 0, 1, 0, 0, 0, t));\n        };\n\n        // Copy any custom methods a 3rd party library may have added\n        for (var key in NativeDate) {\n            if (owns(NativeDate, key)) {\n                DateShim[key] = NativeDate[key];\n            }\n        }\n\n        // Copy \"native\" methods explicitly; they may be non-enumerable\n        defineProperties(DateShim, {\n            now: NativeDate.now,\n            UTC: NativeDate.UTC\n        }, true);\n        DateShim.prototype = NativeDate.prototype;\n        defineProperties(DateShim.prototype, {\n            constructor: DateShim\n        }, true);\n\n        // Upgrade Date.parse to handle simplified ISO 8601 strings\n        var parseShim = function parse(string) {\n            var match = isoDateExpression.exec(string);\n            if (match) {\n                // parse months, days, hours, minutes, seconds, and milliseconds\n                // provide default values if necessary\n                // parse the UTC offset component\n                var year = Number(match[1]),\n                    month = Number(match[2] || 1) - 1,\n                    day = Number(match[3] || 1) - 1,\n                    hour = Number(match[4] || 0),\n                    minute = Number(match[5] || 0),\n                    second = Number(match[6] || 0),\n                    millisecond = Math.floor(Number(match[7] || 0) * 1000),\n                    // When time zone is missed, local offset should be used\n                    // (ES 5.1 bug)\n                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112\n                    isLocalTime = Boolean(match[4] && !match[8]),\n                    signOffset = match[9] === '-' ? 1 : -1,\n                    hourOffset = Number(match[10] || 0),\n                    minuteOffset = Number(match[11] || 0),\n                    result;\n                if (\n                    hour < (\n                        minute > 0 || second > 0 || millisecond > 0 ?\n                        24 : 25\n                    ) &&\n                    minute < 60 && second < 60 && millisecond < 1000 &&\n                    month > -1 && month < 12 && hourOffset < 24 &&\n                    minuteOffset < 60 && // detect invalid offsets\n                    day > -1 &&\n                    day < (\n                        dayFromMonth(year, month + 1) -\n                        dayFromMonth(year, month)\n                    )\n                ) {\n                    result = (\n                        (dayFromMonth(year, month) + day) * 24 +\n                        hour +\n                        hourOffset * signOffset\n                    ) * 60;\n                    result = (\n                        (result + minute + minuteOffset * signOffset) * 60 +\n                        second\n                    ) * 1000 + millisecond;\n                    if (isLocalTime) {\n                        result = toUTC(result);\n                    }\n                    if (-8.64e15 <= result && result <= 8.64e15) {\n                        return result;\n                    }\n                }\n                return NaN;\n            }\n            return NativeDate.parse.apply(this, arguments);\n        };\n        defineProperties(DateShim, { parse: parseShim });\n\n        return DateShim;\n    }(Date));\n    /* global Date: false */\n}\n\n// ES5 15.9.4.4\n// http://es5.github.com/#x15.9.4.4\nif (!Date.now) {\n    Date.now = function now() {\n        return new Date().getTime();\n    };\n}\n\n//\n// Number\n// ======\n//\n\n// ES5.1 15.7.4.5\n// http://es5.github.com/#x15.7.4.5\nvar hasToFixedBugs = NumberPrototype.toFixed && (\n  (0.00008).toFixed(3) !== '0.000' ||\n  (0.9).toFixed(0) !== '1' ||\n  (1.255).toFixed(2) !== '1.25' ||\n  (1000000000000000128).toFixed(0) !== '1000000000000000128'\n);\n\nvar toFixedHelpers = {\n  base: 1e7,\n  size: 6,\n  data: [0, 0, 0, 0, 0, 0],\n  multiply: function multiply(n, c) {\n      var i = -1;\n      var c2 = c;\n      while (++i < toFixedHelpers.size) {\n          c2 += n * toFixedHelpers.data[i];\n          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;\n          c2 = Math.floor(c2 / toFixedHelpers.base);\n      }\n  },\n  divide: function divide(n) {\n      var i = toFixedHelpers.size, c = 0;\n      while (--i >= 0) {\n          c += toFixedHelpers.data[i];\n          toFixedHelpers.data[i] = Math.floor(c / n);\n          c = (c % n) * toFixedHelpers.base;\n      }\n  },\n  numToString: function numToString() {\n      var i = toFixedHelpers.size;\n      var s = '';\n      while (--i >= 0) {\n          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {\n              var t = String(toFixedHelpers.data[i]);\n              if (s === '') {\n                  s = t;\n              } else {\n                  s += '0000000'.slice(0, 7 - t.length) + t;\n              }\n          }\n      }\n      return s;\n  },\n  pow: function pow(x, n, acc) {\n      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));\n  },\n  log: function log(x) {\n      var n = 0;\n      var x2 = x;\n      while (x2 >= 4096) {\n          n += 12;\n          x2 /= 4096;\n      }\n      while (x2 >= 2) {\n          n += 1;\n          x2 /= 2;\n      }\n      return n;\n  }\n};\n\ndefineProperties(NumberPrototype, {\n    toFixed: function toFixed(fractionDigits) {\n        var f, x, s, m, e, z, j, k;\n\n        // Test for NaN and round fractionDigits down\n        f = Number(fractionDigits);\n        f = f !== f ? 0 : Math.floor(f);\n\n        if (f < 0 || f > 20) {\n            throw new RangeError('Number.toFixed called with invalid number of decimals');\n        }\n\n        x = Number(this);\n\n        // Test for NaN\n        if (x !== x) {\n            return 'NaN';\n        }\n\n        // If it is too big or small, return the string value of the number\n        if (x <= -1e21 || x >= 1e21) {\n            return String(x);\n        }\n\n        s = '';\n\n        if (x < 0) {\n            s = '-';\n            x = -x;\n        }\n\n        m = '0';\n\n        if (x > 1e-21) {\n            // 1e-21 < x < 1e21\n            // -70 < log2(x) < 70\n            e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;\n            z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));\n            z *= 0x10000000000000; // Math.pow(2, 52);\n            e = 52 - e;\n\n            // -18 < e < 122\n            // x = z / 2 ^ e\n            if (e > 0) {\n                toFixedHelpers.multiply(0, z);\n                j = f;\n\n                while (j >= 7) {\n                    toFixedHelpers.multiply(1e7, 0);\n                    j -= 7;\n                }\n\n                toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);\n                j = e - 1;\n\n                while (j >= 23) {\n                    toFixedHelpers.divide(1 << 23);\n                    j -= 23;\n                }\n\n                toFixedHelpers.divide(1 << j);\n                toFixedHelpers.multiply(1, 1);\n                toFixedHelpers.divide(2);\n                m = toFixedHelpers.numToString();\n            } else {\n                toFixedHelpers.multiply(0, z);\n                toFixedHelpers.multiply(1 << (-e), 0);\n                m = toFixedHelpers.numToString() + '0.00000000000000000000'.slice(2, 2 + f);\n            }\n        }\n\n        if (f > 0) {\n            k = m.length;\n\n            if (k <= f) {\n                m = s + '0.0000000000000000000'.slice(0, f - k + 2) + m;\n            } else {\n                m = s + m.slice(0, k - f) + '.' + m.slice(k - f);\n            }\n        } else {\n            m = s + m;\n        }\n\n        return m;\n    }\n}, hasToFixedBugs);\n\n//\n// String\n// ======\n//\n\n// ES5 15.5.4.14\n// http://es5.github.com/#x15.5.4.14\n\n// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]\n// Many browsers do not split properly with regular expressions or they\n// do not perform the split correctly under obscure conditions.\n// See http://blog.stevenlevithan.com/archives/cross-browser-split\n// I've tested in many browsers and this seems to cover the deviant ones:\n//    'ab'.split(/(?:ab)*/) should be [\"\", \"\"], not [\"\"]\n//    '.'.split(/(.?)(.?)/) should be [\"\", \".\", \"\", \"\"], not [\"\", \"\"]\n//    'tesst'.split(/(s)*/) should be [\"t\", undefined, \"e\", \"s\", \"t\"], not\n//       [undefined, \"t\", undefined, \"e\", ...]\n//    ''.split(/.?/) should be [], not [\"\"]\n//    '.'.split(/()()/) should be [\".\"], not [\"\", \"\", \".\"]\n\nvar string_split = StringPrototype.split;\nif (\n    'ab'.split(/(?:ab)*/).length !== 2 ||\n    '.'.split(/(.?)(.?)/).length !== 4 ||\n    'tesst'.split(/(s)*/)[1] === 't' ||\n    'test'.split(/(?:)/, -1).length !== 4 ||\n    ''.split(/.?/).length ||\n    '.'.split(/()()/).length > 1\n) {\n    (function () {\n        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group\n\n        StringPrototype.split = function (separator, limit) {\n            var string = this;\n            if (typeof separator === 'undefined' && limit === 0) {\n                return [];\n            }\n\n            // If `separator` is not a regex, use native split\n            if (!isRegex(separator)) {\n                return string_split.call(this, separator, limit);\n            }\n\n            var output = [];\n            var flags = (separator.ignoreCase ? 'i' : '') +\n                        (separator.multiline ? 'm' : '') +\n                        (separator.extended ? 'x' : '') + // Proposed for ES6\n                        (separator.sticky ? 'y' : ''), // Firefox 3+\n                lastLastIndex = 0,\n                // Make `global` and avoid `lastIndex` issues by working with a copy\n                separator2, match, lastIndex, lastLength;\n            var separatorCopy = new RegExp(separator.source, flags + 'g');\n            string += ''; // Type-convert\n            if (!compliantExecNpcg) {\n                // Doesn't need flags gy, but they don't hurt\n                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n            }\n            /* Values for `limit`, per the spec:\n             * If undefined: 4294967295 // Math.pow(2, 32) - 1\n             * If 0, Infinity, or NaN: 0\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n             * If other: Type-convert, then use the above rules\n             */\n            var splitLimit = typeof limit === 'undefined' ?\n                -1 >>> 0 : // Math.pow(2, 32) - 1\n                ES.ToUint32(limit);\n            match = separatorCopy.exec(string);\n            while (match) {\n                // `separatorCopy.lastIndex` is not reliable cross-browser\n                lastIndex = match.index + match[0].length;\n                if (lastIndex > lastLastIndex) {\n                    output.push(string.slice(lastLastIndex, match.index));\n                    // Fix browsers whose `exec` methods don't consistently return `undefined` for\n                    // nonparticipating capturing groups\n                    if (!compliantExecNpcg && match.length > 1) {\n                        /* eslint-disable no-loop-func */\n                        match[0].replace(separator2, function () {\n                            for (var i = 1; i < arguments.length - 2; i++) {\n                                if (typeof arguments[i] === 'undefined') {\n                                    match[i] = void 0;\n                                }\n                            }\n                        });\n                        /* eslint-enable no-loop-func */\n                    }\n                    if (match.length > 1 && match.index < string.length) {\n                        array_push.apply(output, match.slice(1));\n                    }\n                    lastLength = match[0].length;\n                    lastLastIndex = lastIndex;\n                    if (output.length >= splitLimit) {\n                        break;\n                    }\n                }\n                if (separatorCopy.lastIndex === match.index) {\n                    separatorCopy.lastIndex++; // Avoid an infinite loop\n                }\n                match = separatorCopy.exec(string);\n            }\n            if (lastLastIndex === string.length) {\n                if (lastLength || !separatorCopy.test('')) {\n                    output.push('');\n                }\n            } else {\n                output.push(string.slice(lastLastIndex));\n            }\n            return output.length > splitLimit ? output.slice(0, splitLimit) : output;\n        };\n    }());\n\n// [bugfix, chrome]\n// If separator is undefined, then the result array contains just one String,\n// which is the this value (converted to a String). If limit is not undefined,\n// then the output array is truncated so that it contains no more than limit\n// elements.\n// \"0\".split(undefined, 0) -> []\n} else if ('0'.split(void 0, 0).length) {\n    StringPrototype.split = function split(separator, limit) {\n        if (typeof separator === 'undefined' && limit === 0) { return []; }\n        return string_split.call(this, separator, limit);\n    };\n}\n\nvar str_replace = StringPrototype.replace;\nvar replaceReportsGroupsCorrectly = (function () {\n    var groups = [];\n    'x'.replace(/x(.)?/g, function (match, group) {\n        groups.push(group);\n    });\n    return groups.length === 1 && typeof groups[0] === 'undefined';\n}());\n\nif (!replaceReportsGroupsCorrectly) {\n    StringPrototype.replace = function replace(searchValue, replaceValue) {\n        var isFn = isCallable(replaceValue);\n        var hasCapturingGroups = isRegex(searchValue) && (/\\)[*?]/).test(searchValue.source);\n        if (!isFn || !hasCapturingGroups) {\n            return str_replace.call(this, searchValue, replaceValue);\n        } else {\n            var wrappedReplaceValue = function (match) {\n                var length = arguments.length;\n                var originalLastIndex = searchValue.lastIndex;\n                searchValue.lastIndex = 0;\n                var args = searchValue.exec(match) || [];\n                searchValue.lastIndex = originalLastIndex;\n                args.push(arguments[length - 2], arguments[length - 1]);\n                return replaceValue.apply(this, args);\n            };\n            return str_replace.call(this, searchValue, wrappedReplaceValue);\n        }\n    };\n}\n\n// ECMA-262, 3rd B.2.3\n// Not an ECMAScript standard, although ECMAScript 3rd Edition has a\n// non-normative section suggesting uniform semantics and it should be\n// normalized across all browsers\n// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE\nvar string_substr = StringPrototype.substr;\nvar hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';\ndefineProperties(StringPrototype, {\n    substr: function substr(start, length) {\n        var normalizedStart = start;\n        if (start < 0) {\n            normalizedStart = Math.max(this.length + start, 0);\n        }\n        return string_substr.call(this, normalizedStart, length);\n    }\n}, hasNegativeSubstrBug);\n\n// ES5 15.5.4.20\n// whitespace from: http://es5.github.io/#x15.5.4.20\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n    '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n    '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar wsRegexChars = '[' + ws + ']';\nvar trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');\nvar trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');\nvar hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());\ndefineProperties(StringPrototype, {\n    // http://blog.stevenlevithan.com/archives/faster-trim-javascript\n    // http://perfectionkills.com/whitespace-deviations/\n    trim: function trim() {\n        if (typeof this === 'undefined' || this === null) {\n            throw new TypeError(\"can't convert \" + this + ' to object');\n        }\n        return String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');\n    }\n}, hasTrimWhitespaceBug);\n\n// ES-5 15.1.2.2\nif (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {\n    /* global parseInt: true */\n    parseInt = (function (origParseInt) {\n        var hexRegex = /^0[xX]/;\n        return function parseInt(str, radix) {\n            var string = String(str).trim();\n            var defaultedRadix = Number(radix) || (hexRegex.test(string) ? 16 : 10);\n            return origParseInt(string, defaultedRadix);\n        };\n    }(parseInt));\n}\n\n}));\n\n},{}],7:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n * @version   2.3.0\n */\n\n(function() {\n    \"use strict\";\n    function lib$es6$promise$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$es6$promise$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$es6$promise$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$es6$promise$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$es6$promise$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$es6$promise$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n    var lib$es6$promise$asap$$len = 0;\n    var lib$es6$promise$asap$$toString = {}.toString;\n    var lib$es6$promise$asap$$vertxNext;\n    var lib$es6$promise$asap$$customSchedulerFn;\n\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n      lib$es6$promise$asap$$len += 2;\n      if (lib$es6$promise$asap$$len === 2) {\n        // If len is 2, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        if (lib$es6$promise$asap$$customSchedulerFn) {\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n        } else {\n          lib$es6$promise$asap$$scheduleFlush();\n        }\n      }\n    }\n\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n    }\n\n    function lib$es6$promise$asap$$setAsap(asapFn) {\n      lib$es6$promise$asap$$asap = asapFn;\n    }\n\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$es6$promise$asap$$useNextTick() {\n      var nextTick = process.nextTick;\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // setImmediate should be used instead instead\n      var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n        nextTick = setImmediate;\n      }\n      return function() {\n        nextTick(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$es6$promise$asap$$useVertxTimer() {\n      return function() {\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    function lib$es6$promise$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$es6$promise$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$es6$promise$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$es6$promise$asap$$flush, 1);\n      };\n    }\n\n    var lib$es6$promise$asap$$queue = new Array(1000);\n    function lib$es6$promise$asap$$flush() {\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {\n        var callback = lib$es6$promise$asap$$queue[i];\n        var arg = lib$es6$promise$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$es6$promise$asap$$queue[i] = undefined;\n        lib$es6$promise$asap$$queue[i+1] = undefined;\n      }\n\n      lib$es6$promise$asap$$len = 0;\n    }\n\n    function lib$es6$promise$asap$$attemptVertex() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$es6$promise$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$es6$promise$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$es6$promise$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$es6$promise$asap$$isNode) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n    } else if (lib$es6$promise$asap$$isWorker) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();\n    } else {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n    }\n\n    function lib$es6$promise$$internal$$noop() {}\n\n    var lib$es6$promise$$internal$$PENDING   = void 0;\n    var lib$es6$promise$$internal$$FULFILLED = 1;\n    var lib$es6$promise$$internal$$REJECTED  = 2;\n\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$selfFullfillment() {\n      return new TypeError(\"You cannot resolve a promise with itself\");\n    }\n\n    function lib$es6$promise$$internal$$cannotReturnOwn() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$es6$promise$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n       lib$es6$promise$asap$$asap(function(promise) {\n        var sealed = false;\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$es6$promise$$internal$$resolve(promise, value);\n          } else {\n            lib$es6$promise$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$es6$promise$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$es6$promise$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);\n\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$es6$promise$utils$$isFunction(then)) {\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$es6$promise$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      lib$es6$promise$$internal$$publish(promise);\n    }\n\n    function lib$es6$promise$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n      if (promise._subscribers.length !== 0) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n      }\n    }\n\n    function lib$es6$promise$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n      promise._state = lib$es6$promise$$internal$$REJECTED;\n      promise._result = reason;\n\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n    }\n\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$es6$promise$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$es6$promise$$internal$$reject(promise, error);\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$es6$promise$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$es6$promise$utils$$isArray(input);\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n\n      var length  = enumerator.length;\n      var promise = enumerator.promise;\n      var input   = enumerator._input;\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {\n          entry._onerror = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = entry;\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (state === lib$es6$promise$$internal$$REJECTED) {\n          lib$es6$promise$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = value;\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$es6$promise$promise$all$$all(entries) {\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;\n    }\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n    function lib$es6$promise$promise$race$$race(entries) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (!lib$es6$promise$utils$$isArray(entries)) {\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$es6$promise$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n    function lib$es6$promise$promise$resolve$$resolve(object) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n    function lib$es6$promise$promise$reject$$reject(reason) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n    var lib$es6$promise$promise$$counter = 0;\n\n    function lib$es6$promise$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$es6$promise$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise's eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class Promise\n      @param {function} resolver\n      Useful for tooling.\n      @constructor\n    */\n    function lib$es6$promise$promise$$Promise(resolver) {\n      this._id = lib$es6$promise$promise$$counter++;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (lib$es6$promise$$internal$$noop !== resolver) {\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {\n          lib$es6$promise$promise$$needsResolver();\n        }\n\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {\n          lib$es6$promise$promise$$needsNew();\n        }\n\n        lib$es6$promise$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n    lib$es6$promise$promise$$Promise.prototype = {\n      constructor: lib$es6$promise$promise$$Promise,\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;\n        }\n\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);\n        var result = parent._result;\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$es6$promise$asap$$asap(function(){\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection) {\n        return this.then(null, onRejection);\n      }\n    };\n    function lib$es6$promise$polyfill$$polyfill() {\n      var local;\n\n      if (typeof global !== 'undefined') {\n          local = global;\n      } else if (typeof self !== 'undefined') {\n          local = self;\n      } else {\n          try {\n              local = Function('return this')();\n          } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n          }\n      }\n\n      var P = local.Promise;\n\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n        return;\n      }\n\n      local.Promise = lib$es6$promise$promise$$default;\n    }\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n    var lib$es6$promise$umd$$ES6Promise = {\n      'Promise': lib$es6$promise$promise$$default,\n      'polyfill': lib$es6$promise$polyfill$$default\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;\n    } else if (typeof this !== 'undefined') {\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n    }\n\n    lib$es6$promise$polyfill$$default();\n}).call(this);\n\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"_process\":4}],8:[function(require,module,exports){\n//! moment.js\n//! version : 2.10.3\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function create_utc__createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    function valid__isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            m._isValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated;\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        return m._isValid;\n    }\n\n    function valid__createInvalid (flags) {\n        var m = create_utc__createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    var momentProperties = utils_hooks__hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (typeof from._isAMomentObject !== 'undefined') {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (typeof from._i !== 'undefined') {\n            to._i = from._i;\n        }\n        if (typeof from._f !== 'undefined') {\n            to._f = from._f;\n        }\n        if (typeof from._l !== 'undefined') {\n            to._l = from._l;\n        }\n        if (typeof from._strict !== 'undefined') {\n            to._strict = from._strict;\n        }\n        if (typeof from._tzm !== 'undefined') {\n            to._tzm = from._tzm;\n        }\n        if (typeof from._isUTC !== 'undefined') {\n            to._isUTC = from._isUTC;\n        }\n        if (typeof from._offset !== 'undefined') {\n            to._offset = from._offset;\n        }\n        if (typeof from._pf !== 'undefined') {\n            to._pf = getParsingFlags(from);\n        }\n        if (typeof from._locale !== 'undefined') {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (typeof val !== 'undefined') {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(+config._d);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            utils_hooks__hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            if (coercedNumber >= 0) {\n                value = Math.floor(coercedNumber);\n            } else {\n                value = Math.ceil(coercedNumber);\n            }\n        }\n\n        return value;\n    }\n\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function Locale() {\n    }\n\n    var locales = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && typeof module !== 'undefined' &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                locale_locales__getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function locale_locales__getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (typeof values === 'undefined') {\n                data = locale_locales__getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, values) {\n        if (values !== null) {\n            values.abbr = name;\n            if (!locales[name]) {\n                locales[name] = new Locale();\n            }\n            locales[name].set(values);\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    // returns locale data\n    function locale_locales__getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                get_set__set(this, unit, value);\n                utils_hooks__hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get_set__get(this, unit);\n            }\n        };\n    }\n\n    function get_set__get (mom, unit) {\n        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();\n    }\n\n    function get_set__set (mom, unit, value) {\n        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n    }\n\n    // MOMENTS\n\n    function getSet (units, value) {\n        var unit;\n        if (typeof units === 'object') {\n            for (unit in units) {\n                this.set(unit, units[unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (typeof this[units] === 'function') {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var output = '' + Math.abs(number),\n            sign = number >= 0;\n\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return (sign ? (forceSign ? '+' : '') : '-') + output;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '';\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = typeof regex === 'function' ? regex : function (isStrict) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }).replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (typeof callback === 'number') {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  matchWord);\n    addRegexToken('MMMM', matchWord);\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m) {\n        return this._months[m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m) {\n        return this._monthsShort[m.month()];\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        // TODO: Move this out of here!\n        if (typeof value === 'string') {\n            value = mom.localeData().monthsParse(value);\n            // TODO: Another silent failure?\n            if (typeof value !== 'number') {\n                return mom;\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            utils_hooks__hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get_set__get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    function warn(msg) {\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true,\n            msgWithStack = msg + '\\n' + (new Error()).stack;\n\n        return extend(function () {\n            if (firstTime) {\n                warn(msgWithStack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    utils_hooks__hooks.suppressDeprecationWarnings = false;\n\n    var from_string__isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],\n        ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n        ['HH', /(T| )\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = from_string__isoRegex.exec(string);\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(string)) {\n                    // match[5] should be 'T' or undefined\n                    config._f = isoDates[i][0] + (match[6] || ' ');\n                    break;\n                }\n            }\n            for (i = 0, l = isoTimes.length; i < l; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    config._f += isoTimes[i][0];\n                    break;\n                }\n            }\n            if (string.match(matchOffset)) {\n                config._f += 'Z';\n            }\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    utils_hooks__hooks.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'https://github.com/moment/moment/issues/1407 for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor doesn't accept years < 1970\n        if (y < 1970) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n        if (y < 1970) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYY', 'YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', false);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // firstDayOfWeek       0 = sun, 6 = sat\n    //                      the day of the week that starts the week\n    //                      (usually sunday or monday)\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat\n    //                      the first week is the week that contains the first\n    //                      of this day of the week\n    //                      (eg. ISO weeks use thursday (4))\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n            adjustedMoment;\n\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7;\n        }\n\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7;\n        }\n\n        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');\n        return {\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),\n            year: adjustedMoment.year()\n        };\n    }\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {\n        var d = createUTCDate(year, 0, 1).getUTCDay();\n        var daysToAdd;\n        var dayOfYear;\n\n        d = d === 0 ? 7 : d;\n        weekday = weekday != null ? weekday : firstDayOfWeek;\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;\n\n        return {\n            year      : dayOfYear > 0 ? year      : year - 1,\n            dayOfYear : dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear\n        };\n    }\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        var now = new Date();\n        if (config._useUTC) {\n            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];\n        }\n        return [now.getFullYear(), now.getMonth(), now.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);\n            week = defaults(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < dow) {\n                    ++week;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);\n\n        config._a[YEAR] = temp.year;\n        config._dayOfYear = temp.dayOfYear;\n    }\n\n    utils_hooks__hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === utils_hooks__hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (getParsingFlags(config).bigHour === true &&\n                config._a[HOUR] <= 12 &&\n                config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!valid__isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var input = config._i,\n            format = config._f,\n            res;\n\n        config._locale = config._locale || locale_locales__getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return valid__createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else if (isDate(input)) {\n            config._d = input;\n        } else {\n            configFromInput(config);\n        }\n\n        res = new Moment(checkOverflow(config));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date();\n        } else if (isDate(input)) {\n            config._d = new Date(+input);\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (typeof(locale) === 'boolean') {\n            strict = locale;\n            locale = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function local__createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',\n         function () {\n             var other = local__createLocal.apply(null, arguments);\n             return other < this ? this : other;\n         }\n     );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            return other > this ? this : other;\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return local__createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = locale_locales__getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchOffset);\n    addRegexToken('ZZ', matchOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(string) {\n        var matches = ((string || '').match(matchOffset) || []);\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(+res._d + diff);\n            utils_hooks__hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return local__createLocal(input).local();\n        }\n        return model._isUTC ? local__createLocal(input).zone(model._offset || 0) : local__createLocal(input).local();\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    utils_hooks__hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(input);\n            }\n            if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    utils_hooks__hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            this.utcOffset(offsetFromString(this._i));\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!input) {\n            input = 0;\n        }\n        else {\n            input = local__createLocal(input).utcOffset();\n        }\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (this._a) {\n            var other = this._isUTC ? create_utc__createUTC(this._a) : local__createLocal(this._a);\n            return this.isValid() && compareArrays(this._a, other.toArray()) > 0;\n        }\n\n        return false;\n    }\n\n    function isLocal () {\n        return !this._isUTC;\n    }\n\n    function isUtcOffset () {\n        return this._isUTC;\n    }\n\n    function isUtc () {\n        return this._isUTC && this._offset === 0;\n    }\n\n    var aspNetRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;\n\n    function create__createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])        * sign,\n                h  : toInt(match[HOUR])        * sign,\n                m  : toInt(match[MINUTE])      * sign,\n                s  : toInt(match[SECOND])      * sign,\n                ms : toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = create__isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                d : parseIso(match[4], sign),\n                h : parseIso(match[5], sign),\n                m : parseIso(match[6], sign),\n                s : parseIso(match[7], sign),\n                w : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    create__createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = create__createDuration(val, period);\n            add_subtract__addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = duration._days,\n            months = duration._months;\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(+mom._d + milliseconds * isAdding);\n        }\n        if (days) {\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            utils_hooks__hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add_subtract__add      = createAdder(1, 'add');\n    var add_subtract__subtract = createAdder(-1, 'subtract');\n\n    function moment_calendar__calendar (time) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || local__createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            diff = this.diff(sod, 'days', true),\n            format = diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n        return this.format(this.localeData().calendar(format, this, local__createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var inputMs;\n        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');\n        if (units === 'millisecond') {\n            input = isMoment(input) ? input : local__createLocal(input);\n            return +this > +input;\n        } else {\n            inputMs = isMoment(input) ? +input : +local__createLocal(input);\n            return inputMs < +this.clone().startOf(units);\n        }\n    }\n\n    function isBefore (input, units) {\n        var inputMs;\n        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');\n        if (units === 'millisecond') {\n            input = isMoment(input) ? input : local__createLocal(input);\n            return +this < +input;\n        } else {\n            inputMs = isMoment(input) ? +input : +local__createLocal(input);\n            return +this.clone().endOf(units) < inputMs;\n        }\n    }\n\n    function isBetween (from, to, units) {\n        return this.isAfter(from, units) && this.isBefore(to, units);\n    }\n\n    function isSame (input, units) {\n        var inputMs;\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            input = isMoment(input) ? input : local__createLocal(input);\n            return +this === +input;\n        } else {\n            inputMs = +local__createLocal(input);\n            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));\n        }\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function diff (input, units, asFloat) {\n        var that = cloneWithOffset(input, this),\n            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,\n            delta, output;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        return -(wholeMonthDiff + adjust);\n    }\n\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function moment_format__toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if ('function' === typeof Date.prototype.toISOString) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    function format (inputString) {\n        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(local__createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(local__createLocal(), withoutSuffix);\n    }\n\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = locale_locales__getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n        case 'year':\n            this.month(0);\n            /* falls through */\n        case 'quarter':\n        case 'month':\n            this.date(1);\n            /* falls through */\n        case 'week':\n        case 'isoWeek':\n        case 'day':\n            this.hours(0);\n            /* falls through */\n        case 'hour':\n            this.minutes(0);\n            /* falls through */\n        case 'minute':\n            this.seconds(0);\n            /* falls through */\n        case 'second':\n            this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function to_type__valueOf () {\n        return +this._d - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(+this / 1000);\n    }\n\n    function toDate () {\n        return this._offset ? new Date(+this) : this._d;\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function moment_valid__isValid () {\n        return valid__isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // HELPERS\n\n    function weeksInYear(year, dow, doy) {\n        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;\n    }\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;\n        return input == null ? year : this.add((input - year), 'y');\n    }\n\n    function getSetISOWeekYear (input) {\n        var year = weekOfYear(this, 1, 4).year;\n        return input == null ? year : this.add((input - year), 'y');\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    addFormatToken('Q', 0, 0, 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   matchWord);\n    addRegexToken('ddd',  matchWord);\n    addRegexToken('dddd', matchWord);\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {\n        var weekday = config._locale.weekdaysParse(input);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input === 'string') {\n            if (!isNaN(input)) {\n                input = parseInt(input, 10);\n            }\n            else {\n                input = locale.weekdaysParse(input);\n                if (typeof input !== 'number') {\n                    return null;\n                }\n            }\n        }\n        return input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m) {\n        return this._weekdays[m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return this._weekdaysShort[m.day()];\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return this._weekdaysMin[m.day()];\n    }\n\n    function localeWeekdaysParse (weekdayName) {\n        var i, mom, regex;\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            if (!this._weekdaysParse[i]) {\n                mom = local__createLocal([2000, 1]).day(i);\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, function () {\n        return this.hours() % 12 || 12;\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    function millisecond__milliseconds (token) {\n        addFormatToken(0, [token, 3], 0, 'millisecond');\n    }\n\n    millisecond__milliseconds('SSS');\n    millisecond__milliseconds('SSSS');\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n    addRegexToken('SSSS', matchUnsigned);\n    addParseToken(['S', 'SS', 'SSS', 'SSSS'], function (input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    });\n\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var momentPrototype__proto = Moment.prototype;\n\n    momentPrototype__proto.add          = add_subtract__add;\n    momentPrototype__proto.calendar     = moment_calendar__calendar;\n    momentPrototype__proto.clone        = clone;\n    momentPrototype__proto.diff         = diff;\n    momentPrototype__proto.endOf        = endOf;\n    momentPrototype__proto.format       = format;\n    momentPrototype__proto.from         = from;\n    momentPrototype__proto.fromNow      = fromNow;\n    momentPrototype__proto.to           = to;\n    momentPrototype__proto.toNow        = toNow;\n    momentPrototype__proto.get          = getSet;\n    momentPrototype__proto.invalidAt    = invalidAt;\n    momentPrototype__proto.isAfter      = isAfter;\n    momentPrototype__proto.isBefore     = isBefore;\n    momentPrototype__proto.isBetween    = isBetween;\n    momentPrototype__proto.isSame       = isSame;\n    momentPrototype__proto.isValid      = moment_valid__isValid;\n    momentPrototype__proto.lang         = lang;\n    momentPrototype__proto.locale       = locale;\n    momentPrototype__proto.localeData   = localeData;\n    momentPrototype__proto.max          = prototypeMax;\n    momentPrototype__proto.min          = prototypeMin;\n    momentPrototype__proto.parsingFlags = parsingFlags;\n    momentPrototype__proto.set          = getSet;\n    momentPrototype__proto.startOf      = startOf;\n    momentPrototype__proto.subtract     = add_subtract__subtract;\n    momentPrototype__proto.toArray      = toArray;\n    momentPrototype__proto.toDate       = toDate;\n    momentPrototype__proto.toISOString  = moment_format__toISOString;\n    momentPrototype__proto.toJSON       = moment_format__toISOString;\n    momentPrototype__proto.toString     = toString;\n    momentPrototype__proto.unix         = unix;\n    momentPrototype__proto.valueOf      = to_type__valueOf;\n\n    // Year\n    momentPrototype__proto.year       = getSetYear;\n    momentPrototype__proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    momentPrototype__proto.weekYear    = getSetWeekYear;\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;\n\n    // Month\n    momentPrototype__proto.month       = getSetMonth;\n    momentPrototype__proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    momentPrototype__proto.date       = getSetDayOfMonth;\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;\n\n    // Minute\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;\n\n    // Second\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;\n\n    // Millisecond\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    momentPrototype__proto.utcOffset            = getSetOffset;\n    momentPrototype__proto.utc                  = setOffsetToUTC;\n    momentPrototype__proto.local                = setOffsetToLocal;\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    momentPrototype__proto.isDST                = isDaylightSavingTime;\n    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;\n    momentPrototype__proto.isLocal              = isLocal;\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;\n    momentPrototype__proto.isUtc                = isUtc;\n    momentPrototype__proto.isUTC                = isUtc;\n\n    // Timezone\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;\n    momentPrototype__proto.zoneName = getZoneName;\n\n    // Deprecations\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);\n\n    var momentPrototype = momentPrototype__proto;\n\n    function moment__createUnix (input) {\n        return local__createLocal(input * 1000);\n    }\n\n    function moment__createInZone () {\n        return local__createLocal.apply(null, arguments).parseZone();\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function locale_calendar__calendar (key, mom, now) {\n        var output = this._calendar[key];\n        return typeof output === 'function' ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY LT',\n        LLLL : 'dddd, MMMM D, YYYY LT'\n    };\n\n    function longDateFormat (key) {\n        var output = this._longDateFormat[key];\n        if (!output && this._longDateFormat[key.toUpperCase()]) {\n            output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {\n                return val.slice(1);\n            });\n            this._longDateFormat[key] = output;\n        }\n        return output;\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (typeof output === 'function') ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);\n    }\n\n    function locale_set__set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (typeof prop === 'function') {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    var prototype__proto = Locale.prototype;\n\n    prototype__proto._calendar       = defaultCalendar;\n    prototype__proto.calendar        = locale_calendar__calendar;\n    prototype__proto._longDateFormat = defaultLongDateFormat;\n    prototype__proto.longDateFormat  = longDateFormat;\n    prototype__proto._invalidDate    = defaultInvalidDate;\n    prototype__proto.invalidDate     = invalidDate;\n    prototype__proto._ordinal        = defaultOrdinal;\n    prototype__proto.ordinal         = ordinal;\n    prototype__proto._ordinalParse   = defaultOrdinalParse;\n    prototype__proto.preparse        = preParsePostFormat;\n    prototype__proto.postformat      = preParsePostFormat;\n    prototype__proto._relativeTime   = defaultRelativeTime;\n    prototype__proto.relativeTime    = relative__relativeTime;\n    prototype__proto.pastFuture      = pastFuture;\n    prototype__proto.set             = locale_set__set;\n\n    // Month\n    prototype__proto.months       =        localeMonths;\n    prototype__proto._months      = defaultLocaleMonths;\n    prototype__proto.monthsShort  =        localeMonthsShort;\n    prototype__proto._monthsShort = defaultLocaleMonthsShort;\n    prototype__proto.monthsParse  =        localeMonthsParse;\n\n    // Week\n    prototype__proto.week = localeWeek;\n    prototype__proto._week = defaultLocaleWeek;\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    prototype__proto.weekdays       =        localeWeekdays;\n    prototype__proto._weekdays      = defaultLocaleWeekdays;\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;\n    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;\n    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;\n\n    // Hours\n    prototype__proto.isPM = localeIsPM;\n    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;\n    prototype__proto.meridiem = localeMeridiem;\n\n    function lists__get (format, index, field, setter) {\n        var locale = locale_locales__getLocale();\n        var utc = create_utc__createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function list (format, index, field, count, setter) {\n        if (typeof format === 'number') {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return lists__get(format, index, field, setter);\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < count; i++) {\n            out[i] = lists__get(format, i, field, setter);\n        }\n        return out;\n    }\n\n    function lists__listMonths (format, index) {\n        return list(format, index, 'months', 12, 'month');\n    }\n\n    function lists__listMonthsShort (format, index) {\n        return list(format, index, 'monthsShort', 12, 'month');\n    }\n\n    function lists__listWeekdays (format, index) {\n        return list(format, index, 'weekdays', 7, 'day');\n    }\n\n    function lists__listWeekdaysShort (format, index) {\n        return list(format, index, 'weekdaysShort', 7, 'day');\n    }\n\n    function lists__listWeekdaysMin (format, index) {\n        return list(format, index, 'weekdaysMin', 7, 'day');\n    }\n\n    locale_locales__getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n\n    var mathAbs = Math.abs;\n\n    function duration_abs__abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {\n        var other = create__createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function duration_add_subtract__add (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function duration_add_subtract__subtract (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, -1);\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years = 0;\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // Accurately convert days to years, assume start from year 0.\n        years = absFloor(daysToYears(days));\n        days -= absFloor(yearsToDays(years));\n\n        // 30 days to a month\n        // TODO (iskren): Use anchor date (like 1st Jan) to compute this.\n        months += absFloor(days / 30);\n        days   %= 30;\n\n        // 12 months -> 1 year\n        years  += absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToYears (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        return days * 400 / 146097;\n    }\n\n    function yearsToDays (years) {\n        // years * 365 + absFloor(years / 4) -\n        //     absFloor(years / 100) + absFloor(years / 400);\n        return years * 146097 / 400;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToYears(days) * 12;\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(yearsToDays(this._months / 12));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function duration_as__valueOf () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function duration_get__get (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var duration_get__milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {\n        var duration = create__createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes === 1          && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   === 1          && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    === 1          && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  === 1          && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   === 1          && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var iso_string__abs = Math.abs;\n\n    function iso_string__toISOString() {\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = iso_string__abs(this.years());\n        var M = iso_string__abs(this.months());\n        var D = iso_string__abs(this.days());\n        var h = iso_string__abs(this.hours());\n        var m = iso_string__abs(this.minutes());\n        var s = iso_string__abs(this.seconds() + this.milliseconds() / 1000);\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var duration_prototype__proto = Duration.prototype;\n\n    duration_prototype__proto.abs            = duration_abs__abs;\n    duration_prototype__proto.add            = duration_add_subtract__add;\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;\n    duration_prototype__proto.as             = as;\n    duration_prototype__proto.asMilliseconds = asMilliseconds;\n    duration_prototype__proto.asSeconds      = asSeconds;\n    duration_prototype__proto.asMinutes      = asMinutes;\n    duration_prototype__proto.asHours        = asHours;\n    duration_prototype__proto.asDays         = asDays;\n    duration_prototype__proto.asWeeks        = asWeeks;\n    duration_prototype__proto.asMonths       = asMonths;\n    duration_prototype__proto.asYears        = asYears;\n    duration_prototype__proto.valueOf        = duration_as__valueOf;\n    duration_prototype__proto._bubble        = bubble;\n    duration_prototype__proto.get            = duration_get__get;\n    duration_prototype__proto.milliseconds   = duration_get__milliseconds;\n    duration_prototype__proto.seconds        = seconds;\n    duration_prototype__proto.minutes        = minutes;\n    duration_prototype__proto.hours          = hours;\n    duration_prototype__proto.days           = days;\n    duration_prototype__proto.weeks          = weeks;\n    duration_prototype__proto.months         = months;\n    duration_prototype__proto.years          = years;\n    duration_prototype__proto.humanize       = humanize;\n    duration_prototype__proto.toISOString    = iso_string__toISOString;\n    duration_prototype__proto.toString       = iso_string__toISOString;\n    duration_prototype__proto.toJSON         = iso_string__toISOString;\n    duration_prototype__proto.locale         = locale;\n    duration_prototype__proto.localeData     = localeData;\n\n    // Deprecations\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;\n\n    // Side effect imports\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    utils_hooks__hooks.version = '2.10.3';\n\n    setHookCallback(local__createLocal);\n\n    utils_hooks__hooks.fn                    = momentPrototype;\n    utils_hooks__hooks.min                   = min;\n    utils_hooks__hooks.max                   = max;\n    utils_hooks__hooks.utc                   = create_utc__createUTC;\n    utils_hooks__hooks.unix                  = moment__createUnix;\n    utils_hooks__hooks.months                = lists__listMonths;\n    utils_hooks__hooks.isDate                = isDate;\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;\n    utils_hooks__hooks.invalid               = valid__createInvalid;\n    utils_hooks__hooks.duration              = create__createDuration;\n    utils_hooks__hooks.isMoment              = isMoment;\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;\n    utils_hooks__hooks.parseZone             = moment__createInZone;\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;\n    utils_hooks__hooks.isDuration            = isDuration;\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;\n    utils_hooks__hooks.defineLocale          = defineLocale;\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;\n\n    var _moment = utils_hooks__hooks;\n\n    return _moment;\n\n}));\n},{}],9:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\n\n'use strict';\nvar warning = require(\"./warning\");\n\nvar warned = false;\n\nfunction cx(classNames) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      warned,\n      'React.addons.classSet will be deprecated in a future version. See ' +\n      'http://fb.me/react-addons-classset'\n    ) : null);\n    warned = true;\n  }\n\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function(className) {\n      return classNames[className];\n    }).join(' ');\n  } else {\n    return Array.prototype.join.call(arguments, ' ');\n  }\n}\n\nmodule.exports = cx;\n\n}).call(this,require('_process'))\n},{\"./warning\":11,\"_process\":4}],10:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\nfunction makeEmptyFunction(arg) {\n  return function() {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function() { return this; };\nemptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\nmodule.exports = emptyFunction;\n\n},{}],11:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || /^[s\\W]*$/.test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});\n      console.warn(message);\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n\n}).call(this,require('_process'))\n},{\"./emptyFunction\":10,\"_process\":4}],12:[function(require,module,exports){\nvar trim = require('./trim');\nvar decap = require('./decapitalize');\n\nmodule.exports = function camelize(str, decapitalize) {\n  str = trim(str).replace(/[-_\\s]+(.)?/g, function(match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (decapitalize === true) {\n    return decap(str);\n  } else {\n    return str;\n  }\n};\n\n},{\"./decapitalize\":20,\"./trim\":72}],13:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function capitalize(str, lowercaseRest) {\n  str = makeString(str);\n  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();\n\n  return str.charAt(0).toUpperCase() + remainingChars;\n};\n\n},{\"./helper/makeString\":30}],14:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function chars(str) {\n  return makeString(str).split('');\n};\n\n},{\"./helper/makeString\":30}],15:[function(require,module,exports){\nmodule.exports = function chop(str, step) {\n  if (str == null) return [];\n  str = String(str);\n  step = ~~step;\n  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\n};\n\n},{}],16:[function(require,module,exports){\nvar capitalize = require('./capitalize');\nvar camelize = require('./camelize');\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function classify(str) {\n  str = makeString(str);\n  return capitalize(camelize(str.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));\n};\n\n},{\"./camelize\":12,\"./capitalize\":13,\"./helper/makeString\":30}],17:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function clean(str) {\n  return trim(str).replace(/\\s+/g, ' ');\n};\n\n},{\"./trim\":72}],18:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function(str, substr) {\n  str = makeString(str);\n  substr = makeString(substr);\n\n  if (str.length === 0 || substr.length === 0) return 0;\n  \n  return str.split(substr).length - 1;\n};\n\n},{\"./helper/makeString\":30}],19:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function dasherize(str) {\n  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n};\n\n},{\"./trim\":72}],20:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function decapitalize(str) {\n  str = makeString(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n};\n\n},{\"./helper/makeString\":30}],21:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nfunction getIndent(str) {\n  var matches = str.match(/^[\\s\\\\t]*/gm);\n  var indent = matches[0].length;\n  \n  for (var i = 1; i < matches.length; i++) {\n    indent = Math.min(matches[i].length, indent);\n  }\n\n  return indent;\n}\n\nmodule.exports = function dedent(str, pattern) {\n  str = makeString(str);\n  var indent = getIndent(str);\n  var reg;\n\n  if (indent === 0) return str;\n\n  if (typeof pattern === 'string') {\n    reg = new RegExp('^' + pattern, 'gm');\n  } else {\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  }\n\n  return str.replace(reg, '');\n};\n\n},{\"./helper/makeString\":30}],22:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar toPositive = require('./helper/toPositive');\n\nmodule.exports = function endsWith(str, ends, position) {\n  str = makeString(str);\n  ends = '' + ends;\n  if (typeof position == 'undefined') {\n    position = str.length - ends.length;\n  } else {\n    position = Math.min(toPositive(position), str.length) - ends.length;\n  }\n  return position >= 0 && str.indexOf(ends, position) === position;\n};\n\n},{\"./helper/makeString\":30,\"./helper/toPositive\":32}],23:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar escapeChars = require('./helper/escapeChars');\nvar reversedEscapeChars = {};\n\nvar regexString = \"[\";\nfor(var key in escapeChars) {\n  regexString += key;\n}\nregexString += \"]\";\n\nvar regex = new RegExp( regexString, 'g');\n\nmodule.exports = function escapeHTML(str) {\n\n  return makeString(str).replace(regex, function(m) {\n    return '&' + escapeChars[m] + ';';\n  });\n};\n\n},{\"./helper/escapeChars\":27,\"./helper/makeString\":30}],24:[function(require,module,exports){\nmodule.exports = function() {\n  var result = {};\n\n  for (var prop in this) {\n    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join)$/)) continue;\n    result[prop] = this[prop];\n  }\n\n  return result;\n};\n\n},{}],25:[function(require,module,exports){\nvar makeString = require('./makeString');\n\nmodule.exports = function adjacent(str, direction) {\n  str = makeString(str);\n  if (str.length === 0) {\n    return '';\n  }\n  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);\n};\n\n},{\"./makeString\":30}],26:[function(require,module,exports){\nvar escapeRegExp = require('./escapeRegExp');\n\nmodule.exports = function defaultToWhiteSpace(characters) {\n  if (characters == null)\n    return '\\\\s';\n  else if (characters.source)\n    return characters.source;\n  else\n    return '[' + escapeRegExp(characters) + ']';\n};\n\n},{\"./escapeRegExp\":28}],27:[function(require,module,exports){\n/* We're explicitly defining the list of entities we want to escape.\nnbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.\n\n*/\nvar escapeChars = {\n  '¢' : 'cent',\n  '£' : 'pound',\n  '¥' : 'yen',\n  '€': 'euro',\n  '©' :'copy',\n  '®' : 'reg',\n  '<' : 'lt',\n  '>' : 'gt',\n  '\"' : 'quot',\n  '&' : 'amp',\n  \"'\": '#39'\n};\n\nmodule.exports = escapeChars;\n\n},{}],28:[function(require,module,exports){\nvar makeString = require('./makeString');\n\nmodule.exports = function escapeRegExp(str) {\n  return makeString(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n};\n\n},{\"./makeString\":30}],29:[function(require,module,exports){\n/*\nWe're explicitly defining the list of entities that might see in escape HTML strings\n*/\nvar htmlEntities = {\n  nbsp: ' ',\n  cent: '¢',\n  pound: '£',\n  yen: '¥',\n  euro: '€',\n  copy: '©',\n  reg: '®',\n  lt: '<',\n  gt: '>',\n  quot: '\"',\n  amp: '&',\n  apos: \"'\"\n};\n\nmodule.exports = htmlEntities;\n\n},{}],30:[function(require,module,exports){\n/**\n * Ensure some object is a coerced to a string\n **/\nmodule.exports = function makeString(object) {\n  if (object == null) return '';\n  return '' + object;\n};\n\n},{}],31:[function(require,module,exports){\nmodule.exports = function strRepeat(str, qty){\n  if (qty < 1) return '';\n  var result = '';\n  while (qty > 0) {\n    if (qty & 1) result += str;\n    qty >>= 1, str += str;\n  }\n  return result;\n};\n\n},{}],32:[function(require,module,exports){\nmodule.exports = function toPositive(number) {\n  return number < 0 ? 0 : (+number || 0);\n};\n\n},{}],33:[function(require,module,exports){\nvar capitalize = require('./capitalize');\nvar underscored = require('./underscored');\nvar trim = require('./trim');\n\nmodule.exports = function humanize(str) {\n  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));\n};\n\n},{\"./capitalize\":13,\"./trim\":72,\"./underscored\":74}],34:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function include(str, needle) {\n  if (needle === '') return true;\n  return makeString(str).indexOf(needle) !== -1;\n};\n\n},{\"./helper/makeString\":30}],35:[function(require,module,exports){\n//  Underscore.string\n//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n//  Underscore.string is freely distributable under the terms of the MIT license.\n//  Documentation: https://github.com/epeli/underscore.string\n//  Some code is borrowed from MooTools and Alexandru Marasteanu.\n//  Version '3.1.1'\n\n'use strict';\n\nfunction s(value) {\n  /* jshint validthis: true */\n  if (!(this instanceof s)) return new s(value);\n  this._wrapped = value;\n}\n\ns.VERSION = '3.1.1';\n\ns.isBlank          = require('./isBlank');\ns.stripTags        = require('./stripTags');\ns.capitalize       = require('./capitalize');\ns.decapitalize     = require('./decapitalize');\ns.chop             = require('./chop');\ns.trim             = require('./trim');\ns.clean            = require('./clean');\ns.count            = require('./count');\ns.chars            = require('./chars');\ns.swapCase         = require('./swapCase');\ns.escapeHTML       = require('./escapeHTML');\ns.unescapeHTML     = require('./unescapeHTML');\ns.splice           = require('./splice');\ns.insert           = require('./insert');\ns.replaceAll       = require('./replaceAll');\ns.include          = require('./include');\ns.join             = require('./join');\ns.lines            = require('./lines');\ns.dedent           = require('./dedent');\ns.reverse          = require('./reverse');\ns.startsWith       = require('./startsWith');\ns.endsWith         = require('./endsWith');\ns.pred             = require('./pred');\ns.succ             = require('./succ');\ns.titleize         = require('./titleize');\ns.camelize         = require('./camelize');\ns.underscored      = require('./underscored');\ns.dasherize        = require('./dasherize');\ns.classify         = require('./classify');\ns.humanize         = require('./humanize');\ns.ltrim            = require('./ltrim');\ns.rtrim            = require('./rtrim');\ns.truncate         = require('./truncate');\ns.prune            = require('./prune');\ns.words            = require('./words');\ns.pad              = require('./pad');\ns.lpad             = require('./lpad');\ns.rpad             = require('./rpad');\ns.lrpad            = require('./lrpad');\ns.sprintf          = require('./sprintf');\ns.vsprintf         = require('./vsprintf');\ns.toNumber         = require('./toNumber');\ns.numberFormat     = require('./numberFormat');\ns.strRight         = require('./strRight');\ns.strRightBack     = require('./strRightBack');\ns.strLeft          = require('./strLeft');\ns.strLeftBack      = require('./strLeftBack');\ns.toSentence       = require('./toSentence');\ns.toSentenceSerial = require('./toSentenceSerial');\ns.slugify          = require('./slugify');\ns.surround         = require('./surround');\ns.quote            = require('./quote');\ns.unquote          = require('./unquote');\ns.repeat           = require('./repeat');\ns.naturalCmp       = require('./naturalCmp');\ns.levenshtein      = require('./levenshtein');\ns.toBoolean        = require('./toBoolean');\ns.exports          = require('./exports');\ns.escapeRegExp     = require('./helper/escapeRegExp');\n\n// Aliases\ns.strip     = s.trim;\ns.lstrip    = s.ltrim;\ns.rstrip    = s.rtrim;\ns.center    = s.lrpad;\ns.rjust     = s.lpad;\ns.ljust     = s.rpad;\ns.contains  = s.include;\ns.q         = s.quote;\ns.toBool    = s.toBoolean;\ns.camelcase = s.camelize;\n\n\n// Implement chaining\ns.prototype = {\n  value: function value() {\n    return this._wrapped;\n  }\n};\n\nfunction fn2method(key, fn) {\n    if (typeof fn !== \"function\") return;\n    s.prototype[key] = function() {\n      var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));\n      var res = fn.apply(null, args);\n      // if the result is non-string stop the chain and return the value\n      return typeof res === 'string' ? new s(res) : res;\n    };\n}\n\n// Copy functions to instance methods for chaining\nfor (var key in s) fn2method(key, s[key]);\n\nfn2method(\"tap\", function tap(string, fn) {\n  return fn(string);\n});\n\nfunction prototype2method(methodName) {\n  fn2method(methodName, function(context) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return String.prototype[methodName].apply(context, args);\n  });\n}\n\nvar prototypeMethods = [\n  \"toUpperCase\",\n  \"toLowerCase\",\n  \"split\",\n  \"replace\",\n  \"slice\",\n  \"substring\",\n  \"substr\",\n  \"concat\"\n];\n\nfor (var key in prototypeMethods) prototype2method(prototypeMethods[key]);\n\n\nmodule.exports = s;\n\n},{\"./camelize\":12,\"./capitalize\":13,\"./chars\":14,\"./chop\":15,\"./classify\":16,\"./clean\":17,\"./count\":18,\"./dasherize\":19,\"./decapitalize\":20,\"./dedent\":21,\"./endsWith\":22,\"./escapeHTML\":23,\"./exports\":24,\"./helper/escapeRegExp\":28,\"./humanize\":33,\"./include\":34,\"./insert\":36,\"./isBlank\":37,\"./join\":38,\"./levenshtein\":39,\"./lines\":40,\"./lpad\":41,\"./lrpad\":42,\"./ltrim\":43,\"./naturalCmp\":44,\"./numberFormat\":45,\"./pad\":46,\"./pred\":47,\"./prune\":48,\"./quote\":49,\"./repeat\":50,\"./replaceAll\":51,\"./reverse\":52,\"./rpad\":53,\"./rtrim\":54,\"./slugify\":55,\"./splice\":56,\"./sprintf\":57,\"./startsWith\":58,\"./strLeft\":59,\"./strLeftBack\":60,\"./strRight\":61,\"./strRightBack\":62,\"./stripTags\":63,\"./succ\":64,\"./surround\":65,\"./swapCase\":66,\"./titleize\":67,\"./toBoolean\":68,\"./toNumber\":69,\"./toSentence\":70,\"./toSentenceSerial\":71,\"./trim\":72,\"./truncate\":73,\"./underscored\":74,\"./unescapeHTML\":75,\"./unquote\":76,\"./vsprintf\":77,\"./words\":78}],36:[function(require,module,exports){\nvar splice = require('./splice');\n\nmodule.exports = function insert(str, i, substr) {\n  return splice(str, i, 0, substr);\n};\n\n},{\"./splice\":56}],37:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function isBlank(str) {\n  return (/^\\s*$/).test(makeString(str));\n};\n\n},{\"./helper/makeString\":30}],38:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar slice = [].slice;\n\nmodule.exports = function join() {\n  var args = slice.call(arguments),\n    separator = args.shift();\n\n  return args.join(makeString(separator));\n};\n\n},{\"./helper/makeString\":30}],39:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\n/**\n * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein\n */\nmodule.exports = function levenshtein(str1, str2) {\n  'use strict';\n  str1 = makeString(str1);\n  str2 = makeString(str2);\n\n  // Short cut cases  \n  if (str1 === str2) return 0;\n  if (!str1 || !str2) return Math.max(str1.length, str2.length);\n\n  // two rows\n  var prevRow = new Array(str2.length + 1);\n\n  // initialise previous row\n  for (var i = 0; i < prevRow.length; ++i) {\n    prevRow[i] = i;\n  }\n\n  // calculate current row distance from previous row\n  for (i = 0; i < str1.length; ++i) {\n    var nextCol = i + 1;\n\n    for (var j = 0; j < str2.length; ++j) {\n      var curCol = nextCol;\n\n      // substution\n      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );\n      // insertion\n      var tmp = curCol + 1;\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      }\n      // deletion\n      tmp = prevRow[j + 1] + 1;\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      }\n\n      // copy current col value into previous (in preparation for next iteration)\n      prevRow[j] = curCol;\n    }\n\n    // copy last col value into previous (in preparation for next iteration)\n    prevRow[j] = nextCol;\n  }\n\n  return nextCol;\n};\n\n},{\"./helper/makeString\":30}],40:[function(require,module,exports){\nmodule.exports = function lines(str) {\n  if (str == null) return [];\n  return String(str).split(/\\r?\\n/);\n};\n\n},{}],41:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function lpad(str, length, padStr) {\n  return pad(str, length, padStr);\n};\n\n},{\"./pad\":46}],42:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function lrpad(str, length, padStr) {\n  return pad(str, length, padStr, 'both');\n};\n\n},{\"./pad\":46}],43:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimLeft = String.prototype.trimLeft;\n\nmodule.exports = function ltrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":26,\"./helper/makeString\":30}],44:[function(require,module,exports){\nmodule.exports = function naturalCmp(str1, str2) {\n  if (str1 == str2) return 0;\n  if (!str1) return -1;\n  if (!str2) return 1;\n\n  var cmpRegex = /(\\.\\d+|\\d+|\\D+)/g,\n    tokens1 = String(str1).match(cmpRegex),\n    tokens2 = String(str2).match(cmpRegex),\n    count = Math.min(tokens1.length, tokens2.length);\n\n  for (var i = 0; i < count; i++) {\n    var a = tokens1[i],\n      b = tokens2[i];\n\n    if (a !== b) {\n      var num1 = +a;\n      var num2 = +b;\n      if (num1 === num1 && num2 === num2) {\n        return num1 > num2 ? 1 : -1;\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  if (tokens1.length != tokens2.length)\n    return tokens1.length - tokens2.length;\n\n  return str1 < str2 ? -1 : 1;\n};\n\n},{}],45:[function(require,module,exports){\nmodule.exports = function numberFormat(number, dec, dsep, tsep) {\n  if (isNaN(number) || number == null) return '';\n\n  number = number.toFixed(~~dec);\n  tsep = typeof tsep == 'string' ? tsep : ',';\n\n  var parts = number.split('.'),\n    fnums = parts[0],\n    decimals = parts[1] ? (dsep || '.') + parts[1] : '';\n\n  return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;\n};\n\n},{}],46:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar strRepeat = require('./helper/strRepeat');\n\nmodule.exports = function pad(str, length, padStr, type) {\n  str = makeString(str);\n  length = ~~length;\n\n  var padlen = 0;\n\n  if (!padStr)\n    padStr = ' ';\n  else if (padStr.length > 1)\n    padStr = padStr.charAt(0);\n\n  switch (type) {\n    case 'right':\n      padlen = length - str.length;\n      return str + strRepeat(padStr, padlen);\n    case 'both':\n      padlen = length - str.length;\n      return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));\n    default: // 'left'\n      padlen = length - str.length;\n      return strRepeat(padStr, padlen) + str;\n  }\n};\n\n},{\"./helper/makeString\":30,\"./helper/strRepeat\":31}],47:[function(require,module,exports){\nvar adjacent = require('./helper/adjacent');\n\nmodule.exports = function succ(str) {\n  return adjacent(str, -1);\n};\n\n},{\"./helper/adjacent\":25}],48:[function(require,module,exports){\n/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n  if (str.length <= length) return str;\n\n  var tmpl = function(c) {\n    return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n  },\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n  if (template.slice(template.length - 2).match(/\\w\\w/))\n    template = template.replace(/\\s*\\S+$/, '');\n  else\n    template = rtrim(template.slice(0, template.length - 1));\n\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};\n\n},{\"./helper/makeString\":30,\"./rtrim\":54}],49:[function(require,module,exports){\nvar surround = require('./surround');\n\nmodule.exports = function quote(str, quoteChar) {\n  return surround(str, quoteChar || '\"');\n};\n\n},{\"./surround\":65}],50:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar strRepeat = require('./helper/strRepeat');\n\nmodule.exports = function repeat(str, qty, separator) {\n  str = makeString(str);\n\n  qty = ~~qty;\n\n  // using faster implementation if separator is not needed;\n  if (separator == null) return strRepeat(str, qty);\n\n  // this one is about 300x slower in Google Chrome\n  for (var repeat = []; qty > 0; repeat[--qty] = str) {}\n  return repeat.join(separator);\n};\n\n},{\"./helper/makeString\":30,\"./helper/strRepeat\":31}],51:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function replaceAll(str, find, replace, ignorecase) {\n  var flags = (ignorecase === true)?'gi':'g';\n  var reg = new RegExp(find, flags);\n\n  return makeString(str).replace(reg, replace);\n};\n\n},{\"./helper/makeString\":30}],52:[function(require,module,exports){\nvar chars = require('./chars');\n\nmodule.exports = function reverse(str) {\n  return chars(str).reverse().join('');\n};\n\n},{\"./chars\":14}],53:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function rpad(str, length, padStr) {\n  return pad(str, length, padStr, 'right');\n};\n\n},{\"./pad\":46}],54:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimRight = String.prototype.trimRight;\n\nmodule.exports = function rtrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp(characters + '+$'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":26,\"./helper/makeString\":30}],55:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar trim = require('./trim');\nvar dasherize = require('./dasherize');\n\nmodule.exports = function slugify(str) {\n  var from  = \"ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșšŝťțŭùúüűûñÿýçżźž\",\n      to    = \"aaaaaaaaaccceeeeeghiiiijllnnoooooooossssttuuuuuunyyczzz\",\n      regex = new RegExp(defaultToWhiteSpace(from), 'g');\n\n  str = makeString(str).toLowerCase().replace(regex, function(c){\n    var index = from.indexOf(c);\n    return to.charAt(index) || '-';\n  });\n\n  return trim(dasherize(str.replace(/[^\\w\\s-]/g, '-')), '-');\n};\n\n},{\"./dasherize\":19,\"./helper/defaultToWhiteSpace\":26,\"./helper/makeString\":30,\"./trim\":72}],56:[function(require,module,exports){\nvar chars = require('./chars');\n\nmodule.exports = function splice(str, i, howmany, substr) {\n  var arr = chars(str);\n  arr.splice(~~i, ~~howmany, substr);\n  return arr.join('');\n};\n\n},{\"./chars\":14}],57:[function(require,module,exports){\n// sprintf() for JavaScript 0.7-beta1\n// http://www.diveintojavascript.com/projects/javascript-sprintf\n//\n// Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\n// All rights reserved.\nvar strRepeat = require('./helper/strRepeat');\nvar toString = Object.prototype.toString;\nvar sprintf = (function() {\n  function get_type(variable) {\n    return toString.call(variable).slice(8, -1).toLowerCase();\n  }\n\n  var str_repeat = strRepeat;\n\n  var str_format = function() {\n    if (!str_format.cache.hasOwnProperty(arguments[0])) {\n      str_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n    }\n    return str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n  };\n\n  str_format.format = function(parse_tree, argv) {\n    var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n    for (i = 0; i < tree_length; i++) {\n      node_type = get_type(parse_tree[i]);\n      if (node_type === 'string') {\n        output.push(parse_tree[i]);\n      }\n      else if (node_type === 'array') {\n        match = parse_tree[i]; // convenience purposes only\n        if (match[2]) { // keyword argument\n          arg = argv[cursor];\n          for (k = 0; k < match[2].length; k++) {\n            if (!arg.hasOwnProperty(match[2][k])) {\n              throw new Error(sprintf('[_.sprintf] property \"%s\" does not exist', match[2][k]));\n            }\n            arg = arg[match[2][k]];\n          }\n        } else if (match[1]) { // positional argument (explicit)\n          arg = argv[match[1]];\n        }\n        else { // positional argument (implicit)\n          arg = argv[cursor++];\n        }\n\n        if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n          throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));\n        }\n        switch (match[8]) {\n          case 'b': arg = arg.toString(2); break;\n          case 'c': arg = String.fromCharCode(arg); break;\n          case 'd': arg = parseInt(arg, 10); break;\n          case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n          case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n          case 'o': arg = arg.toString(8); break;\n          case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n          case 'u': arg = Math.abs(arg); break;\n          case 'x': arg = arg.toString(16); break;\n          case 'X': arg = arg.toString(16).toUpperCase(); break;\n        }\n        arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n        pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n        pad_length = match[6] - String(arg).length;\n        pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n        output.push(match[5] ? arg + pad : pad + arg);\n      }\n    }\n    return output.join('');\n  };\n\n  str_format.cache = {};\n\n  str_format.parse = function(fmt) {\n    var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n    while (_fmt) {\n      if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n        parse_tree.push(match[0]);\n      }\n      else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n        parse_tree.push('%');\n      }\n      else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n        if (match[2]) {\n          arg_names |= 1;\n          var field_list = [], replacement_field = match[2], field_match = [];\n          if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n            field_list.push(field_match[1]);\n            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n              if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              }\n              else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              }\n              else {\n                throw new Error('[_.sprintf] huh?');\n              }\n            }\n          }\n          else {\n            throw new Error('[_.sprintf] huh?');\n          }\n          match[2] = field_list;\n        }\n        else {\n          arg_names |= 2;\n        }\n        if (arg_names === 3) {\n          throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');\n        }\n        parse_tree.push(match);\n      }\n      else {\n        throw new Error('[_.sprintf] huh?');\n      }\n      _fmt = _fmt.substring(match[0].length);\n    }\n    return parse_tree;\n  };\n\n  return str_format;\n})();\n\nmodule.exports = sprintf;\n\n},{\"./helper/strRepeat\":31}],58:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar toPositive = require('./helper/toPositive');\n\nmodule.exports = function startsWith(str, starts, position) {\n  str = makeString(str);\n  starts = '' + starts;\n  position = position == null ? 0 : Math.min(toPositive(position), str.length);\n  return str.lastIndexOf(starts, position) === position;\n};\n\n},{\"./helper/makeString\":30,\"./helper/toPositive\":32}],59:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strLeft(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.indexOf(sep);\n  return~ pos ? str.slice(0, pos) : str;\n};\n\n},{\"./helper/makeString\":30}],60:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strLeftBack(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = str.lastIndexOf(sep);\n  return~ pos ? str.slice(0, pos) : str;\n};\n\n},{\"./helper/makeString\":30}],61:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strRight(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.indexOf(sep);\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;\n};\n\n},{\"./helper/makeString\":30}],62:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strRightBack(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.lastIndexOf(sep);\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;\n};\n\n},{\"./helper/makeString\":30}],63:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function stripTags(str) {\n  return makeString(str).replace(/<\\/?[^>]+>/g, '');\n};\n\n},{\"./helper/makeString\":30}],64:[function(require,module,exports){\nvar adjacent = require('./helper/adjacent');\n\nmodule.exports = function succ(str) {\n  return adjacent(str, 1);\n};\n\n},{\"./helper/adjacent\":25}],65:[function(require,module,exports){\nmodule.exports = function surround(str, wrapper) {\n  return [wrapper, str, wrapper].join('');\n};\n\n},{}],66:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function swapCase(str) {\n  return makeString(str).replace(/\\S/g, function(c) {\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n},{\"./helper/makeString\":30}],67:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function titleize(str) {\n  return makeString(str).toLowerCase().replace(/(?:^|\\s|-)\\S/g, function(c) {\n    return c.toUpperCase();\n  });\n};\n\n},{\"./helper/makeString\":30}],68:[function(require,module,exports){\nvar trim = require('./trim');\n\nfunction boolMatch(s, matchers) {\n  var i, matcher, down = s.toLowerCase();\n  matchers = [].concat(matchers);\n  for (i = 0; i < matchers.length; i += 1) {\n    matcher = matchers[i];\n    if (!matcher) continue;\n    if (matcher.test && matcher.test(s)) return true;\n    if (matcher.toLowerCase() === down) return true;\n  }\n}\n\nmodule.exports = function toBoolean(str, trueValues, falseValues) {\n  if (typeof str === \"number\") str = \"\" + str;\n  if (typeof str !== \"string\") return !!str;\n  str = trim(str);\n  if (boolMatch(str, trueValues || [\"true\", \"1\"])) return true;\n  if (boolMatch(str, falseValues || [\"false\", \"0\"])) return false;\n};\n\n},{\"./trim\":72}],69:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function toNumber(num, precision) {\n  if (num == null) return 0;\n  var factor = Math.pow(10, isFinite(precision) ? precision : 0);\n  return Math.round(num * factor) / factor;\n};\n\n},{\"./trim\":72}],70:[function(require,module,exports){\nvar rtrim = require('./rtrim');\n\nmodule.exports = function toSentence(array, separator, lastSeparator, serial) {\n  separator = separator || ', ';\n  lastSeparator = lastSeparator || ' and ';\n  var a = array.slice(),\n    lastMember = a.pop();\n\n  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;\n\n  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;\n};\n\n},{\"./rtrim\":54}],71:[function(require,module,exports){\nvar toSentence = require('./toSentence');\n\nmodule.exports = function toSentenceSerial(array, sep, lastSep) {\n  return toSentence(array, sep, lastSep, true);\n};\n\n},{\"./toSentence\":70}],72:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrim = String.prototype.trim;\n\nmodule.exports = function trim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrim) return nativeTrim.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":26,\"./helper/makeString\":30}],73:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function truncate(str, length, truncateStr) {\n  str = makeString(str);\n  truncateStr = truncateStr || '...';\n  length = ~~length;\n  return str.length > length ? str.slice(0, length) + truncateStr : str;\n};\n\n},{\"./helper/makeString\":30}],74:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function underscored(str) {\n  return trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n};\n\n},{\"./trim\":72}],75:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar htmlEntities = require('./helper/htmlEntities');\n\nmodule.exports = function unescapeHTML(str) {\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {\n    var match;\n\n    if (entityCode in htmlEntities) {\n      return htmlEntities[entityCode];\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n      return String.fromCharCode(parseInt(match[1], 16));\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {\n      return String.fromCharCode(~~match[1]);\n    } else {\n      return entity;\n    }\n  });\n};\n\n},{\"./helper/htmlEntities\":29,\"./helper/makeString\":30}],76:[function(require,module,exports){\nmodule.exports = function unquote(str, quoteChar) {\n  quoteChar = quoteChar || '\"';\n  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)\n    return str.slice(1, str.length - 1);\n  else return str;\n};\n\n},{}],77:[function(require,module,exports){\nvar sprintf = require('./sprintf');\n\nmodule.exports = function vsprintf(fmt, argv) {\n  argv.unshift(fmt);\n  return sprintf.apply(null, argv);\n};\n\n},{\"./sprintf\":57}],78:[function(require,module,exports){\nvar isBlank = require('./isBlank');\nvar trim = require('./trim');\n\nmodule.exports = function words(str, delimiter) {\n  if (isBlank(str)) return [];\n  return trim(str, delimiter).split(delimiter || /\\s+/);\n};\n\n},{\"./isBlank\":37,\"./trim\":72}],79:[function(require,module,exports){\n\"use strict\";\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar BomUtils = require(\"utils/BomUtils\");\nvar BomImporter = require(\"utils/BomImporter\");\n\nvar BomActions = {\n\n    /**\n     * Fetch a bom from the server.\n     *\n     * @param {number} bomId\n     */\n    fetch: function(bomId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_BOM,\n            attributes: {\n                bomId: bomId\n            }\n        });\n    },\n\n    /**\n     * @param  {string} name\n     * @param  {number} parentId\n     */\n    create: function(name, productId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.CREATE_BOM,\n            attributes: {\n                name: name,\n                productId: productId\n            }\n        });\n    },\n\n    /**\n     * @param  {number} id\n     * @param  {string} name\n     */\n    updateName: function(id, name) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UPDATE_BOM_NAME,\n            attributes: {\n                id: id,\n                name: name\n            }\n        });\n    },\n\n    /**\n     * @param  {string} id\n     */\n    destroy: function(bomId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.DESTROY_BOM,\n            attributes: {\n                bomId: bomId\n            }\n        });\n    },\n\n    fetchComments: function(bomId, count) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_BOM_COMMENTS,\n            attributes: {\n                bomId: bomId,\n                count: count\n            }\n        });\n    },\n\n    createComment: function(bomId, body) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.CREATE_BOM_COMMENT,\n            attributes: {\n                bomId: bomId,\n                body: body\n            }\n        });\n    },\n\n    updateComment: function(bomId, commentId, body) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UPDATE_BOM_COMMENT,\n            attributes: {\n                bomId: bomId,\n                commentId: commentId,\n                body: body\n            }\n        });\n    },\n\n    destroyComment: function(bomId, commentId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.DESTROY_BOM_COMMENT,\n            attributes: {\n                bomId: bomId,\n                commentId: commentId\n            }\n        });\n    },\n\n    // Items\n\n    /**\n     * @param  {string} name\n     */\n    addItem: function(bomId, index) {\n        if (!bomId) {\n            return;\n        }\n\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.ADD_BOM_ITEM,\n            attributes: {\n                bomId: bomId,\n                index: index\n            }\n        });\n    },\n\n    removeItems: function(bomId, items) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.REMOVE_BOM_ITEMS,\n            attributes: {\n                bomId: bomId,\n                items: items\n            }\n        });\n    },\n\n    updateItem: function(bomId, itemId, attribute, content) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UPDATE_BOM_ITEM,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                attribute: attribute,\n                content: content\n            }\n        });\n    },\n\n    selectItem: function(bomId, itemId, select, reset) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.SELECT_BOM_ITEM,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                select: select,\n                reset: reset ? reset : true\n            }\n        });\n    },\n\n    unselectItems: function() {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UNSELECT_BOM_ITEMS\n        });\n    },\n\n    fetchItemComments: function(bomId, itemId, count) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_BOM_ITEM_COMMENTS,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                count: count\n            }\n        });\n    },\n\n    createItemComment: function(bomId, itemId, body) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.CREATE_BOM_ITEM_COMMENT,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                body: body\n            }\n        });\n    },\n\n    updateItemComment: function(bomId, itemId, commentId, body) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UPDATE_BOM_ITEM_COMMENT,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                commentId: commentId,\n                body: body\n            }\n        });\n    },\n\n    destroyItemComment: function(bomId, itemId, commentId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.DESTROY_BOM_ITEM_COMMENT,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                commentId: commentId\n            }\n        });\n    },\n\n    // Columns\n\n    addAttribute: function(bomId, attribute) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.ADD_BOM_COLUMN,\n            attributes: {\n                bomId: bomId,\n                attribute: attribute\n            }\n        });\n    },\n\n    setAttribute: function(bomId, attribute) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.SET_BOM_COLUMN,\n            attributes: {\n                bomId: bomId,\n                attribute: attribute\n            }\n        });\n    },\n\n    setVisibleAttributes: function(bomId, columns) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.SET_VISIBLE_BOM_COLUMNS,\n            attributes: {\n                bomId: bomId,\n                columns: columns\n            }\n        });\n    },\n\n    hideColumn: function(bomId, attributeId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.HIDE_BOM_COLUMN,\n            attributes: {\n                bomId: bomId,\n                attributeId: attributeId\n            }\n        });\n    },\n\n    importFile: function(file, options) {\n        options = options || {};\n\n        return BomUtils.readFileAsText(file, options.encoding).then(function(result) {\n            return BomImporter.importCSV(result, options);\n        }).then(function(result) {\n\n            // Check that headers OR data were imported\n            if (result.meta.fields || result.data.length) {\n\n                //dispatch action with parsed BoM\n                AppDispatcher.handleViewAction({\n                    type: ActionConstants.IMPORT_BOM_FILE,\n                    attributes: {\n                        bom: result\n                    }\n                });\n\n                return result;\n            }\n            else {\n                return Promise.reject(new Error(\"We did not find any data to import.\"));\n            }\n        });\n    },\n\n    importNewProduct: function(importedBomId, attributes) {\n        return new Promise(function(resolve, reject) {\n            AppDispatcher.handleViewAction({\n                type: ActionConstants.IMPORT_PRODUCT,\n                resolve: resolve,\n                reject: reject,\n                attributes: {\n                    importedBomId: importedBomId,\n                    attributes: attributes\n                }\n            });\n        });\n    },\n\n    importNewBom: function(importedBomId, attributes, parentProductId) {\n        return new Promise(function(resolve, reject) {\n            AppDispatcher.handleViewAction({\n                type: ActionConstants.IMPORT_NEW_BOM,\n                resolve: resolve,\n                reject: reject,\n                attributes: {\n                    importedBomId: importedBomId,\n                    attributes: attributes,\n                    parentProductId: parentProductId\n                }\n            });\n        });\n    },\n\n    importUpdateBom: function(importedBomId, attributes, targetBomId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.IMPORT_UPDATE_BOM,\n            attributes: {\n                importedBomId: importedBomId,\n                attributes: attributes,\n                targetBomId: targetBomId\n            }\n        });\n    },\n\n    exportItems: function(attributes, itemIds) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.EXPORT_BOM_ITEMS,\n            attributes: {\n                attributes: attributes,\n                itemIds: itemIds\n            }\n        });\n    },\n\n    retryExportItems: function() {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.RETRY_EXPORT_BOM_ITEMS\n        });\n    }\n\n};\n\nmodule.exports = BomActions;\n\n\n},{\"constants/ActionConstants\":144,\"dispatcher/AppDispatcher\":152,\"utils/BomImporter\":198,\"utils/BomUtils\":199}],80:[function(require,module,exports){\n\"use strict\";\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\n\nvar BomViewActions = {\n\n    /**\n     * Get the views from the server.\n     */\n    // fetchAll: function() {\n    //     return new Promise(function(resolve, reject) {\n    //         AppDispatcher.handleViewAction({\n    //             type: ActionConstants.FETCH_ALL_BOM_VIEWS,\n    //             resolve: resolve,\n    //             reject: reject\n    //         });\n    //     });\n    // },\n\n    /**\n     * @param  {string} name\n     * @param  {array}  fieldIds\n     */\n    create: function(name, fieldIds) {\n        return new Promise(function(resolve, reject) {\n            AppDispatcher.handleViewAction({\n                type: ActionConstants.CREATE_BOM_VIEW,\n                attributes: {\n                    name: name,\n                    fieldIds: fieldIds\n                },\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    },\n\n    /**\n     * @param  {string} name\n     * @param  {array}  fieldIds\n     */\n    update: function(viewId, name, fieldIds) {\n        return new Promise(function(resolve, reject) {\n            AppDispatcher.handleViewAction({\n                type: ActionConstants.UPDATE_BOM_VIEW,\n                attributes: {\n                    viewId: viewId,\n                    name: name,\n                    fieldIds: fieldIds\n                },\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    },\n\n    /**\n     * @param  {string} id\n     */\n    destroy: function(viewId) {\n        return new Promise(function(resolve, reject) {\n            AppDispatcher.handleViewAction({\n                type: ActionConstants.DESTROY_BOM_VIEW,\n                attributes: {\n                    viewId: viewId\n                },\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    }\n};\n\nmodule.exports = BomViewActions;\n\n\n},{\"constants/ActionConstants\":144,\"dispatcher/AppDispatcher\":152}],81:[function(require,module,exports){\n\"use strict\";\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\n\nvar ChangeActions = {\n\n    fetchForProduct: function(productId, count, before) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_PRODUCT_CHANGES,\n            attributes: {\n                productId: productId,\n                count: count,\n                before: before\n            }\n        });\n    },\n\n    fetchForBom: function(bomId, count, before, after) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_BOM_CHANGES,\n            attributes: {\n                bomId: bomId,\n                count: count,\n                before: before,\n                after: after\n            }\n        });\n    },\n\n    fetchForItem: function(bomId, itemId, count, before, after) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_ITEM_CHANGES,\n            attributes: {\n                bomId: bomId,\n                itemId: itemId,\n                count: count,\n                before: before,\n                after: after\n            }\n        });\n    },\n\n    sync: function() {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.SYNC_CHANGES\n        });\n    },\n\n};\n\nmodule.exports = ChangeActions;\n\n\n},{\"constants/ActionConstants\":144,\"dispatcher/AppDispatcher\":152}],82:[function(require,module,exports){\n\"use strict\";\n\nvar FieldActions = {\n\n  /**\n   * Get the products from the server.\n   */\n  // fetchAll: function() {\n  //   return new Promise(function(resolve, reject) {\n  //       AppDispatcher.handleViewAction({\n  //         type: ActionConstants.FETCH_ALL_FIELDS,\n  //         resolve: resolve,\n  //         reject: reject\n  //       });\n  //     });\n  // },\n\n};\n\nmodule.exports = FieldActions;\n\n\n},{}],83:[function(require,module,exports){\n\"use strict\";\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\n\nvar ProductActions = {\n    /**\n     * Get the products from the server.\n     */\n    fetchAll: function() {\n        return new Promise(function(resolve, reject) {\n            AppDispatcher.handleViewAction({\n                type: ActionConstants.FETCH_ALL_PRODUCTS,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    },\n\n    /**\n     * @param  {string} name\n     */\n    create: function(name) {\n        name = name ? name.trim() : undefined;\n        if (!name) { return; }\n\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.CREATE_PRODUCT,\n            attributes: { name: name }\n        });\n    },\n\n    /**\n     * @param  {string} id\n     */\n    destroy: function(id) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.DESTROY_PRODUCT,\n            attributes: { id: id }\n        });\n    },\n\n    /**\n     * @param  {string} id The ID of the product item\n     * @param  {object} attributes\n     */\n    updateName: function(id, name) {\n        if (!id) { return; }\n\n        name = name ? name.trim() : undefined;\n        if (!name) { return; }\n\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UPDATE_PRODUCT_NAME,\n            attributes: {\n                id: id,\n                name: name\n            }\n        });\n    },\n\n    fetchComments: function(productId, count) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.FETCH_PRODUCT_COMMENTS,\n            attributes: {\n                productId: productId,\n                count: count\n            }\n        });\n    },\n\n    createComment: function(productId, body) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.CREATE_PRODUCT_COMMENT,\n            attributes: {\n                productId: productId,\n                body: body\n            }\n        });\n    },\n\n    updateComment: function(productId, commentId, body) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.UPDATE_PRODUCT_COMMENT,\n            attributes: {\n                productId: productId,\n                commentId: commentId,\n                body: body\n            }\n        });\n    },\n\n    destroyComment: function(productId, commentId) {\n        AppDispatcher.handleViewAction({\n            type: ActionConstants.DESTROY_PRODUCT_COMMENT,\n            attributes: {\n                productId: productId,\n                commentId: commentId,\n            }\n        });\n    }\n};\n\nmodule.exports = ProductActions;\n\n\n},{\"constants/ActionConstants\":144,\"dispatcher/AppDispatcher\":152}],84:[function(require,module,exports){\n\"use strict\";\n\nvar TypeActions = {\n\n  /**\n   * Get the products from the server.\n   */\n  // fetchAll: function() {\n  //   return new Promise(function(resolve, reject) {\n  //       AppDispatcher.handleViewAction({\n  //         type: ActionConstants.FETCH_ALL_FIELDTYPES,\n  //         resolve: resolve,\n  //         reject: reject\n  //       });\n  //     });\n  // },\n\n};\n\nmodule.exports = TypeActions;\n\n\n},{}],85:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar BomAttributeModel = require(\"models/BomAttributeModel\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar BomAttributeCollection = ExtendedCollection.extend({\n    model: BomAttributeModel,\n    bomId: undefined,\n    comparator: \"position\",\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom/\" + this.getBom() + \"/attribute\";\n    },\n\n    initialize: function() {\n        this.listenTo(this, \"change:\" + this.comparator, function() { this.sort(); });\n    },\n\n    setBom: function(bomId) {\n        this.bomId = bomId;\n\n        this.each(function(attribute) {\n            attribute.setBom(bomId);\n        });\n    },\n\n    getBom: function() {\n        return this.bomId;\n    },\n\n    set: function(models) {\n        models = ExtendedCollection.prototype.set.apply(this, arguments);\n        var singular = !_.isArray(models);\n\n        // Set the bom id on the models\n        if (this.bomId) {\n            if (singular) {\n                if (models && _.isFunction(models.setBom)) {\n                    models.setBom( this.bomId );\n                }\n            }\n            else {\n                _.each(models, function(model) {\n                    if (model && _.isFunction(model.setBom)) {\n                        model.setBom( this.bomId );\n                    }\n                }, this);\n            }\n        }\n\n        return models;\n    },\n\n    fixFieldId: function(cid, id) {\n        this.each(function(attribute) {\n            if (attribute.get(\"fieldId\") === cid) {\n                attribute.set(\"fieldId\", id);\n            }\n        });\n    },\n});\n\nmodule.exports = BomAttributeCollection;\n\n\n},{\"constants/ApiConstants\":145,\"models/BomAttributeModel\":160,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],86:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\nvar moment = require(\"moment\");\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar FieldStore = require(\"stores/FieldStore\");\nvar BomImportStore = require(\"stores/BomImportStore\");\nvar ProductStore; //delayed injection (see dispatch below)\n\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar BomModel = require(\"models/BomModel\");\n\nvar BomEvent = require(\"events/BomEvent\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: BomModel,\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom\";\n    },\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.bom)) {\n            options.count = resp._embedded.bom.length;\n        } else if (_.isArray(resp)) {\n            options.count = resp.length;\n        }\n\n        // Return the field array\n        return resp._embedded ? resp._embedded.bom : resp;\n    },\n\n    getChildrenBomsOfBom: function(bomId) {\n        var bom = this.get(bomId);\n        var children = [];\n        if (bom) {\n            children = bom.get(\"bomIds\").map(function(result) {\n                return this.get(result);\n            }, this);\n        }\n        return _.sortBy(children, function(child) {\n            return child.get(\"position\");\n        });\n    },\n\n    getDescendantBomsOfBom: function(bomId) {\n        var descendants = [];\n        var children;\n        var child;\n\n        children = this.getChildrenBomsOfBom(bomId);\n        for (var index in children) {\n            if (!children.hasOwnProperty(index)) {\n                continue;\n            }\n\n            child = children[index];\n            descendants.push(child);\n            descendants = descendants.concat(this.getDescendantBomsOfBom(child.id || child.cid));\n        }\n\n        return descendants;\n    },\n\n    getParentBomsOfBom: function(bomId) {\n        var parents = [];\n\n        this.each(function(result) {\n            if (this.isBomParentOfBom(result.id || result.cid, bomId)) {\n                parents.push(result);\n            }\n        }, this);\n\n        return parents;\n    },\n\n    isBomParentOfBom: function(parentId, childId) {\n        var children = this.getChildrenBomsOfBom(parentId);\n\n        for (var index in children) {\n            if (children[index].id === childId || children[index].cid === childId) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return; }\n\n        this.reset();\n        this.setCompany(event.company.id);\n\n        if (event.company.data && _.isArray(event.company.data.boms)) {\n            this.set(event.company.data.boms, {parse: true});\n        }\n    },\n\n    dispatchCallback: function(payload) {\n        ProductStore = require(\"stores/ProductStore\");\n\n        var action = payload.action;\n        switch (action.type) {\n\n            case ActionConstants.FETCH_BOM:\n                (function() {\n                    var bom;\n\n                    if (!this.validateAction(action, [\"bomId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    bom.setLoading(true);\n\n                    bom.fetch().then(function(bom) {\n                        bom.setLoaded(true);\n                    }, function(error) {\n                        //TODO set error on model to display in the view\n                        console.log(error);\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.FETCH_BOM_CHANGES:\n                (function() {\n                    var bom;\n\n                    if (!this.validateAction(action, [\"bomId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.FETCH_ITEM_CHANGES:\n                (function() {\n                    var bom;\n                    var item;\n\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.getItem(action.attributes.itemId);\n                    if (!item) { return; }\n\n                    action.result = _.extend({}, action.result, {\n                        item: item\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.CREATE_BOM:\n                (function() {\n                    var name;\n                    var bom;\n\n                    if (!this.validateAction(action, [\"name\"])) { return; }\n\n                    //clean up name and check the name\n                    name = action.attributes.name.trim();\n                    if (!name) { return; }\n\n                    bom = this.add({\n                        name: name\n                    });\n\n                    bom.setLoaded(true);\n\n                    Backbone.trigger(BomEvent.EVENT_CREATE);\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom\n                        //parentBom: parentBom\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_NAME:\n                (function() {\n                    var name;\n                    var bom;\n\n                    if (!this.validateAction(action, [\"id\", \"name\"])) {\n                        return;\n                    }\n\n                    name = action.attributes.name.trim();\n                    if (!name) {\n                        return;\n                    }\n\n                    bom = this.get(action.attributes.id);\n                    bom.set({\n                        name: name\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM:\n                (function() {\n                    var bom;\n                    var bomId;\n                    var parentBoms;\n                    var childrenIds;\n                    var removeIds;\n\n                    if (!this.validateAction(action, [\"bomId\"])) { return; }\n                    bomId = action.attributes.bomId;\n\n                    // Wait for products to clean up\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    //get the bom to remove\n                    bom = this.get(bomId);\n                    if (!bom) { return; }\n\n                    //find all parents of this BoM, and detach it\n                    parentBoms = this.getParentBomsOfBom(bomId);\n\n                    _.each(parentBoms, function(parent) {\n                        var siblingBoms = this.getChildrenBomsOfBom(parent.id || parent.cid);\n\n                        parent.detachBom(bomId);\n\n                        // Update positions of sibling Boms after the removed\n                        _.each(siblingBoms, function(sibling) {\n                            if (sibling.get(\"position\") > bom.get(\"position\")) {\n                                sibling.set(\"position\", sibling.get(\"position\")-1);\n                            }\n                        });\n                    }, this);\n\n                    //remove the BoM and its children from the store\n                    childrenIds = this.getDescendantBomsOfBom(bomId).map(function(result) {\n                        return result.id || result.cid;\n                    });\n\n                    //don't delete children BoMs that are attached elsewhere\n                    //TODO later\n\n                    removeIds = [bomId];\n                    removeIds = removeIds.concat(childrenIds);\n                    this.remove(removeIds);\n\n                    _.each(removeIds, function() {\n                        Backbone.trigger(BomEvent.EVENT_DELETE);\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom\n                    });\n\n                }).apply(this);\n                break;\n\n            // Bom Comments\n\n            case ActionConstants.FETCH_BOM_COMMENTS:\n                (function() {\n                    var bom;\n                    var comments;\n                    var prevLength;\n\n                    if (!this.validateAction(action, [\"bomId\", \"count\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    comments = bom.getComments();\n                    comments.decLeftServerCount( action.attributes.count );\n\n                    prevLength = comments.length;\n                    comments.fetch({\n                        data: {\n                            count: action.attributes.count,\n                            before: comments.length ? comments.last().get(\"createdAt\") : undefined\n                        },\n                        remove: false\n                    }).then(function(comments) {\n                        if (comments.length-prevLength < action.attributes.count) {\n                            comments.setTotalServerCount(0);\n                            this.trigger(\"update\");\n                        }\n                    }.bind(this));\n\n                    this.trigger(\"update\");\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.CREATE_BOM_COMMENT:\n                (function() {\n                    var bom;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"bomId\", \"body\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    comment = bom.getComments().add({\n                        body: action.attributes.body,\n                        createdAt: moment().unix()\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_COMMENT:\n                (function() {\n                    var bom;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"bomId\", \"commentId\", \"body\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    comment = bom.getComments().get(action.attributes.commentId);\n                    if (!comment) { return; }\n\n                    comment.set({\n                        body: action.attributes.body\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM_COMMENT:\n                (function() {\n                    var bom;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"bomId\", \"commentId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    comment = bom.getComments().remove(action.attributes.commentId);\n                    if (!comment) { return; }\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            // Bom Items\n\n            case ActionConstants.ADD_BOM_ITEM:\n                (function() {\n                    var bom;\n                    var item;\n\n                    if (!this.validateAction(action, [\"bomId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.addItem();\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom,\n                        item: item\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.REMOVE_BOM_ITEMS:\n                (function() {\n                    var itemIds;\n                    var bom;\n                    var bomId;\n                    var removed;\n\n                    if (!this.validateAction(action, [\"bomId\", \"items\"])) { return; }\n\n                    bomId = action.attributes.bomId;\n                    itemIds = action.attributes.items;\n                    if (!itemIds.length) { return; }\n\n                    bom = this.get(bomId);\n                    if (!bom) { return; }\n\n                    removed = bom.removeItems( itemIds );\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom,\n                        items: removed\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_ITEM:\n                (function() {\n                    var bom;\n                    var item;\n                    var content;\n                    var attribute;\n                    var value;\n\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\", \"attribute\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.getItem(action.attributes.itemId);\n                    if (!item) { return; }\n\n                    if (action.attributes.attribute) {\n                        attribute = bom.getAttribute( action.attributes.attribute.id || action.attributes.attribute.cid);\n                    }\n\n                    content = action.attributes.content;\n\n                    // If the content is undefined of an empty string\n                    // then remove the value\n                    if (content === undefined || content === \"\") {\n\n                        if (!attribute) { return; }\n\n                        //no content and an existing column, so remove it\n                        //get the item's values for the attribute\n                        value = item.getValueForAttribute(attribute.id);\n                        if (!value) { return; }\n\n                        //remove the value\n                        item.removeValue(value.id || value.cid);\n\n                    } else {\n\n                        //if we didn't find an attribute object, create one\n                        if (!attribute) {\n\n                            //make sure we passed a field id\n                            if (!action.attributes.attribute.fieldId) { return; }\n\n                            //try to find a matching attribute\n                            attribute = bom.getAttributeForField(action.attributes.attribute.fieldId);\n\n                            //no match, so create one\n                            if (!attribute) {\n                                attribute = bom.addAttribute({\n                                    fieldId: action.attributes.attribute.fieldId,\n                                    name: action.attributes.attribute.name\n                                });\n                            }\n\n                            if (!attribute) { return; }\n                        }\n\n                        //get the item field\n                        value = item.getValueForAttribute(attribute.id);\n\n                        //set the value if we already have one\n                        if (value) {\n                            value.set({content: action.attributes.content});\n                        }\n                        //add the value if its new\n                        else {\n                            value = item.addValue({\n                                bomFieldId: attribute.id || attribute.cid,\n                                content: action.attributes.content\n                            });\n                        }\n                    }\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom,\n                        item: item,\n                        attribute: attribute,\n                        value: value\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.FETCH_BOM_ITEM_COMMENTS:\n                (function() {\n                    var bom;\n                    var item;\n                    var comments;\n                    var prevLength;\n\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\", \"count\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.getItem(action.attributes.itemId);\n                    if (!item) { return; }\n\n                    comments = item.getComments();\n                    comments.decLeftServerCount( action.attributes.count );\n\n                    prevLength = comments.length;\n                    comments.fetch({\n                        data: {\n                            count: action.attributes.count,\n                            before: comments.length ? comments.last().get(\"createdAt\") : undefined\n                        },\n                        remove: false\n                    }).then(function(comments) {\n                        if (comments.length-prevLength < action.attributes.count) {\n                            comments.setTotalServerCount(0);\n                            this.trigger(\"update\");\n                        }\n                    }.bind(this));\n\n                    this.trigger(\"update\");\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.CREATE_BOM_ITEM_COMMENT:\n                (function() {\n                    var bom;\n                    var item;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\", \"body\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.getItem(action.attributes.itemId);\n                    if (!item) { return; }\n\n                    comment = item.getComments().add({\n                        body: action.attributes.body,\n                        createdAt: moment().unix()\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_ITEM_COMMENT:\n                (function() {\n                    var bom;\n                    var item;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\", \"commentId\", \"body\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.getItem(action.attributes.itemId);\n                    if (!item) { return; }\n\n                    comment = item.getComments().get(action.attributes.commentId);\n                    if (!comment) { return; }\n\n                    comment.set({\n                        body: action.attributes.body\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM_ITEM_COMMENT:\n                (function() {\n                    var bom;\n                    var item;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\", \"commentId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    item = bom.getItem(action.attributes.itemId);\n                    if (!item) { return; }\n\n                    comment = item.getComments().remove(action.attributes.commentId);\n                    if (!comment) { return; }\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            // Bom Columns\n\n            case ActionConstants.ADD_BOM_COLUMN:\n                (function() {\n                    var bom;\n                    var data;\n                    var attribute;\n                    // var matchColumn;\n                    // var field;\n\n                    if (!this.validateAction(action, [\"bomId\", \"attribute\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    data = action.attributes.attribute;\n                    if (!data) { return; }\n\n                    if (data.fieldId) {\n                        attribute = bom.getAttributeForField(data.fieldId);\n                        if (!attribute) {\n                            attribute = bom.addAttribute(data);\n                        }\n                        else {\n                            //bom.setAttribute(attribute.toJSON());\n                            //attribute.set(data);\n                            bom.setAttribute(_.extend({\n                                id: attribute.id || attribute.cid\n                            }, data));\n                        }\n                    }\n                    else {\n                        //wait for field store to create new fields if needed\n                        AppDispatcher.waitFor([FieldStore.dispatchToken]);\n                        if (!action.result || !action.result.field || !action.result.attribute) { return; }\n\n                        attribute = bom.addAttribute(action.result.attribute);\n                    }\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom,\n                        attribute: attribute\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.SET_BOM_COLUMN:\n                (function() {\n                    var bom;\n                    var oldAttribute;\n                    var newAttribute;\n\n                    if (!this.validateAction(action, [\"bomId\", \"attribute\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    newAttribute = action.attributes.attribute;\n                    if (!newAttribute) { return; }\n\n                    oldAttribute = bom.getAttribute(newAttribute.id);\n                    if (!oldAttribute) { return; }\n\n                    oldAttribute.set({\n                        name: newAttribute.name\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom,\n                        attribute: oldAttribute\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.SET_VISIBLE_BOM_COLUMNS:\n                (function() {\n                    var bom;\n\n                    if (!this.validateAction(action, [\"bomId\", \"columns\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    //wait for field store to create new fields if needed\n                    AppDispatcher.waitFor([FieldStore.dispatchToken]);\n                    if (!action.result.columns) { return; }\n\n                    bom.setVisibleAttributes(action.result.columns);\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom\n                        //TODO will need to pass previous state\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.HIDE_BOM_COLUMN:\n                (function() {\n                    var bom;\n                    var attribute;\n\n                    if (!this.validateAction(action, [\"bomId\", \"attributeId\"])) { return; }\n\n                    bom = this.get(action.attributes.bomId);\n                    if (!bom) { return; }\n\n                    attribute = bom.hideAttribute(action.attributes.attributeId);\n\n                    action.result = _.extend({}, action.result, {\n                        bom: bom,\n                        attribute: attribute\n                    });\n                }).apply(this);\n                break;\n\n                // Product\n\n            case ActionConstants.CREATE_PRODUCT:\n                (function() {\n                    //create the default root BoM for this product\n                    var bom = this.add({\n                        name: \"BoM\"\n                    });\n\n                    bom.setLoaded(true);\n\n                    //attach it for the ProductStore\n                    action.result = _.extend({}, action.result, {\n                        bom: bom\n                    });\n\n                    Backbone.trigger(BomEvent.EVENT_CREATE);\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_PRODUCT:\n                //TODO add option to destroy BoMs recursively\n                (function() {\n                    var product;\n                    var boms;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n                    product = action.result.product;\n\n                    boms = product.getBoms().map(function(result) {\n                        return this.get(result);\n                    }, this);\n\n                    _.each(boms, function(result) {\n                        boms = boms.concat(this.getDescendantBomsOfBom(result.id || result.cid));\n                    }, this);\n\n                    _.each(boms, function() {\n                        Backbone.trigger(BomEvent.EVENT_DELETE);\n                    });\n\n                    this.remove(boms);\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_PRODUCT:\n            case ActionConstants.IMPORT_NEW_BOM:\n                (function() {\n                    var bom;\n\n                    // Validate action object\n                    if (!this.validateAction(action)) {\n                        action.reject(new Error(\"Invalid import parameters\"));\n                        return;\n                    }\n\n                    // Wait for field store to create new fields if needed\n                    AppDispatcher.waitFor([BomImportStore.dispatchToken]);\n                    if (!action.reult && !action.result.bom) {\n                        action.reject(new Error(\"Failed to import BoM\"));\n                        return;\n                    }\n\n                    bom = action.result.bom;\n                    bom.set({\n                        name: \"BoM\",\n                        position: 0\n                    });\n                    bom.setLoaded(true);\n                    this.add( bom );\n\n                    Backbone.trigger(BomEvent.EVENT_IMPORT);\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_UPDATE_BOM:\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"constants/ApiConstants\":145,\"dispatcher/AppDispatcher\":152,\"events/BomEvent\":155,\"events/UserEvent\":158,\"models/BomModel\":164,\"moment\":8,\"stores/BomImportStore\":189,\"stores/FieldStore\":193,\"stores/ProductStore\":195,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],87:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar BomExportModel = require(\"models/BomExportModel\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar BomEvent = require(\"events/BomEvent\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: BomExportModel,\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/export/bom\";\n    },\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return; }\n\n        this.reset();\n        this.setCompany(event.company.id);\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n\n        switch (action.type) {\n            case ActionConstants.EXPORT_BOM_ITEMS:\n                (function() {\n                    var bom;\n\n                    if (!this.validateAction(action, [\"attributes\", \"itemIds\"])) {\n                        return;\n                    }\n\n                    this.reset();\n                    bom = this.add({\n                        attributes: action.attributes.attributes.map(_.clone),\n                        itemIds: _.clone(action.attributes.itemIds)\n                    });\n\n                    bom.save().then(undefined, function() {\n                        bom.set({\n                            \"status\": \"failed\",\n                            \"message\": \"We failed to export your data. Please try again.\"\n                        });\n                    });\n\n                    Backbone.trigger(BomEvent.EVENT_EXPORT);\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.RETRY_EXPORT_BOM_ITEMS:\n                (function() {\n\n                    var bom = this.last();\n                    if (!bom) { return;}\n\n                    bom.set({\n                        \"status\": \"processing\"\n                    });\n\n                    bom.save({\n                        attributes: bom.get(\"attributes\"),\n                        itemIds: bom.get(\"itemIds\")\n                    }).then(undefined, function() {\n                        bom.clear();\n                        bom.set({\n                            \"status\": \"failed\",\n                            \"message\": \"We failed to export your data. Please try again.\"\n                        });\n                    });\n\n                }).apply(this);\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n});\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"constants/ApiConstants\":145,\"dispatcher/AppDispatcher\":152,\"events/BomEvent\":155,\"events/UserEvent\":158,\"models/BomExportModel\":161,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],88:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar BomModel = require(\"models/BomModel\");\nvar FieldStore = require(\"stores/FieldStore\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: BomModel,\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n\n        switch (action.type) {\n            case ActionConstants.IMPORT_BOM_FILE:\n                (function() {\n                    var attributes;\n                    var items;\n                    var bom;\n\n                    // Wait for field store to create new fields if needed\n                    AppDispatcher.waitFor([FieldStore.dispatchToken]);\n\n                    if (!this.validateAction(action, [\"bom\"], true)) { return; }\n                    items = action.attributes.bom.data;\n                    attributes = action.result.attributes || [];\n\n                    // Create the new BoM\n                    bom = new BomModel({ name: \"BoM\" });\n\n                    // If attributes are present\n                    if (attributes.length) {\n                        // Create the attributes in the Bom\n                        attributes = attributes.map(function(result) {\n                            return bom.addAttribute(result);\n                        });\n\n                        _.each(items, function(item) {\n                            var newItem = bom.addItem();\n\n                            _.each(attributes, function(attribute) {\n                                if (item[attribute.get(\"name\")] !== \"\") {\n                                    newItem.addValue({\n                                        content: item[attribute.get(\"name\")],\n                                        bomFieldId: attribute.id || attribute.cid\n                                    });\n                                }\n                            });\n                        });\n                    }\n                    else {\n                        // Make sure we have at least one item to import as we don't have headers\n                        if (!items || items.length === 0) { return; }\n\n                        // Add an attribute for each of the first item's values\n                        _.each(items[0], function() {\n                            attributes.push({\n                                name: \"\",\n                                fieldId: undefined\n                            });\n                        });\n\n                        // Create the attributes in the Bom\n                        attributes = attributes.map(function(result) {\n                            return bom.addAttribute(result);\n                        });\n\n                        // Parse each item\n                        _.each(items, function(item) {\n                            var newItem = bom.addItem();\n\n                            _.each(item, function(content, index) {\n                                if (content !== \"\") {\n                                    newItem.addValue({\n                                        content: content,\n                                        bomFieldId: attributes[index].id || attributes[index].cid\n                                    });\n                                }\n                            });\n\n                        });\n                    }\n\n                    this.reset();\n                    this.add(bom);\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_PRODUCT:\n            case ActionConstants.IMPORT_NEW_BOM:\n                (function() {\n                    var importedBom;\n                    var skipped = [];\n\n                    if (!this.validateAction(action, [\"importedBomId\", \"attributes\"])) {\n                        action.reject(new Error(\"Invalid import parameters\"));\n                        return;\n                    }\n\n                    importedBom = this.get(action.attributes.importedBomId);\n                    if (!importedBom) {\n                        action.reject(new Error(\"Invalid import id\"));\n                        return;\n                    }\n\n                    //wait for field store to create new fields if needed\n                    AppDispatcher.waitFor([FieldStore.dispatchToken]);\n                    if (!action.result && !action.result.attributes) {\n                        action.reject(new Error(\"Failed to import fields\"));\n                        return;\n                    }\n\n                    // Go through the bom's attributes, and set the name and field\n                    // or remove if the attributes were removed/skipped\n                    importedBom.getAttributes().each(function(attribute, index) {\n\n                        var importAttribute = _.find(action.result.attributes, function(result) {\n                            // return (result.id && (result.id === attribute.id))\n                            //     || (result.cid && (result.cid === attribute.cid));\n                            return result.id === (attribute.id || attribute.cid);\n                        });\n\n                        if (importAttribute) {\n                            importedBom.setAttribute( _.extend(attribute.toJSON(), {\n                                id: attribute.id,\n                                cid: attribute.cid,\n                                name: importAttribute.name,\n                                fieldId: importAttribute.fieldId,\n                                visible: true,\n                                position: index\n                            }));\n                        }\n                        else {\n                            skipped.push( attribute.id || attribute.cid );\n                        }\n\n                    });\n\n                    _.each(skipped, function(attributeId) {\n                        importedBom.removeColumn(attributeId);\n                    });\n\n                    // Clean up\n                    this.reset();\n\n                    // Pass Bom to the BomStore\n                    action.result = _.extend({}, action.result, {\n                        bom: importedBom\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_UPDATE_BOM:\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n});\n\n},{\"constants/ActionConstants\":144,\"dispatcher/AppDispatcher\":152,\"models/BomModel\":164,\"stores/FieldStore\":193,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],89:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar BomItemModel = require(\"models/BomItemModel\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar BomItemCollection = ExtendedCollection.extend({\n    model: BomItemModel,\n    bomId: undefined,\n    comparator: \"position\",\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom/\" + this.getBom() + \"/item\";\n    },\n\n    initialize: function() {\n        this.listenTo(this, \"change:\" + this.comparator, function() { this.sort(); });\n    },\n\n    setBom: function(bomId) {\n        this.bomId = bomId;\n\n        this.each(function(item) {\n            item.setBom(bomId);\n        });\n    },\n\n    getBom: function() {\n        return this.bomId;\n    },\n\n    set: function(models) {\n        models = ExtendedCollection.prototype.set.apply(this, arguments);\n        var singular;\n\n        // If the bom is not set, return models as usual\n        if (!this.bomId) {\n            return models;\n        }\n\n        // If company is set, then set on all set models\n        singular = !_.isArray(models);\n\n        if (singular) {\n            if (models && _.isFunction(models.setBom)) {\n                models.setBom( this.bomId );\n            }\n        }\n        else {\n            _.each(models, function(model) {\n                if (model && _.isFunction(model.setBom)) {\n                    model.setBom( this.bomId );\n                }\n            }, this);\n        }\n\n        return models;\n    },\n\n    removeValuesForAttribute: function(attributeId) {\n        this.each( function( item ) {\n            item.getValues().removeForAttribute(attributeId);\n        }, this);\n    }\n});\n\nmodule.exports = BomItemCollection;\n\n\n},{\"constants/ApiConstants\":145,\"models/BomItemModel\":162,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],90:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar BomItemValueModel = require(\"models/BomItemValueModel\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar BomItemValueCollection = ExtendedCollection.extend({\n    model: BomItemValueModel,\n    bomId: undefined,\n    itemId: undefined,\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom/\" + this.getBom() + \"/item/\" + this.getItem() + \"/value\";\n    },\n\n    setBom: function(bomId) {\n        this.bomId = bomId;\n\n        this.each(function(attribute) {\n            attribute.setBom(bomId);\n        });\n    },\n\n    getBom: function() {\n        return this.bomId;\n    },\n\n    setItem: function(itemId) {\n        this.itemId = itemId;\n\n        this.each(function(value) {\n            value.setItem(itemId);\n        });\n    },\n\n    getItem: function() {\n        return this.itemId;\n    },\n\n    set: function(models) {\n        models = ExtendedCollection.prototype.set.apply(this, arguments);\n        var singular = !_.isArray(models);\n\n        // Set the bom id on the models\n        if (this.bomId) {\n            if (singular) {\n                if (models && _.isFunction(models.setBom)) {\n                    models.setBom( this.bomId );\n                }\n            }\n            else {\n                _.each(models, function(model) {\n                    if (model && _.isFunction(model.setBom)) {\n                        model.setBom( this.bomId );\n                    }\n                }, this);\n            }\n        }\n\n        // Set the item id on the models\n        if (this.itemId) {\n            if (singular) {\n                if (models && _.isFunction(models.setItem)) {\n                    models.setItem( this.itemId );\n                }\n            }\n            else {\n                _.each(models, function(model) {\n                    if (model && _.isFunction(model.setItem)) {\n                        model.setItem( this.itemId );\n                    }\n                }, this);\n            }\n        }\n\n        return models;\n    },\n\n    removeForAttribute: function(attributeId) {\n        this.remove( this.findWhere( {bomFieldId: attributeId} ) );\n    }\n});\n\nmodule.exports = BomItemValueCollection;\n\n\n},{\"constants/ApiConstants\":145,\"models/BomItemValueModel\":163,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],91:[function(require,module,exports){\n\"use strict\";\n\nvar Backbone = require(\"backbone\");\nvar _ = require(\"underscore\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar BomViewModel = require(\"models/BomViewModel\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: BomViewModel,\n    comparator: \"name\",\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/view\";\n    },\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n        this.listenTo(this, \"change:\" + this.comparator, function() { this.sort(); });\n\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.view)) {\n            options.count = resp._embedded.view.length;\n        } else if (_.isArray(resp)) {\n            options.count = resp.length;\n        }\n\n        // Return the field array\n        return resp._embedded ? resp._embedded.view : resp;\n    },\n\n    getDefaults: function() {\n        var defaults = this.filter(function(view) {\n            return view.get(\"default\");\n        });\n\n        defaults = _.sortBy(defaults, function(view) {\n            return view.id;\n        });\n\n        return defaults;\n    },\n\n    getSaved: function() {\n        return this.filter(function(view) {\n            return !view.get(\"default\");\n        });\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return; }\n\n        this.reset();\n        this.setCompany(event.company.id);\n\n        if (event.company.data && _.isArray(event.company.data.views)) {\n            this.set(event.company.data.views, {parse: true});\n        }\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n        switch (action.type) {\n\n            case ActionConstants.CREATE_BOM_VIEW:\n                (function() {\n                    var name;\n                    var view;\n\n                    if (!this.validateAction(action, [\"name\", \"fieldIds\"])) {\n                        action.reject(\"Missing parameter to create view\");\n                        return;\n                    }\n\n                    //clean up name and check the name\n                    name = action.attributes.name.trim();\n                    if (!name) {\n                        action.reject(\"View name cannot be empty\");\n                        return;\n                    }\n\n                    var fieldIds = _.clone(action.attributes.fieldIds);\n\n                    view = this.add({\n                        name: name,\n                        fieldIds: fieldIds\n                    });\n\n                    view.setCompany( this.getCompany() );\n                    action.resolve(view);\n\n                    action.result = _.extend({}, action.result, {\n                        view: view\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_VIEW:\n                (function() {\n                    var view;\n\n                    if (!this.validateAction(action, [\"viewId\", \"name\", \"fieldIds\"])) {\n                        action.reject(\"Missing parameter to update view\");\n                        return;\n                    }\n\n                    view = this.get(action.attributes.viewId);\n                    view.set({\n                        name: action.attributes.name,\n                        fieldIds: _.clone(action.attributes.fieldIds)\n                    });\n\n                    action.resolve(view);\n\n                    action.result = _.extend({}, action.result, {\n                        view: view\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM_VIEW:\n                (function() {\n                    var view;\n\n                    if (!this.validateAction(action, [\"viewId\"])) {\n                        action.reject(\"Missing view id\");\n                        return;\n                    }\n\n                    view = this.remove(action.attributes.viewId);\n                    action.resolve(view);\n\n                    action.result = _.extend({}, action.result, {\n                        view: view\n                    });\n                }).apply(this);\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"constants/ApiConstants\":145,\"dispatcher/AppDispatcher\":152,\"events/UserEvent\":158,\"models/BomViewModel\":165,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],92:[function(require,module,exports){\n\"use strict\";\n\nvar Backbone = require(\"backbone\");\nvar _ = require(\"underscore\");\nvar moment = require(\"moment\");\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ActionConstants = require(\"constants/ActionConstants\");\n\nvar ProductStore = require(\"stores/ProductStore\");\nvar BomStore = require(\"stores/BomStore\");\n\nvar BomViewStore = require(\"stores/BomViewStore\");\n\nvar ChangeModel = require(\"models/ChangeModel\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: ChangeModel,\n    _queued: undefined,\n    _connected: true,\n    _pingId: undefined,\n    _numbers: [],\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/change\";\n    },\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n        this.listenTo(this, \"add\", this._onAdd);\n\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n\n        this.ping();\n    },\n\n    _onAdd: function(model) {\n        // Queue change if no change is queued, and the new change has a request\n        if (!this._queued && model.has(\"request\")) {\n            this.queue(model);\n        }\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.change)) {\n            options.count = resp._embedded.change.length;\n        }\n\n        // Return the change array\n        return resp._embedded ? resp._embedded.change : undefined;\n    },\n\n    //TODO ping could become a request for update when we want\n    // to support multiple users at the same time\n    ping: function() {\n        this._pingId = setTimeout(function() {\n            var options = {};\n\n            options.success = function() {\n                this.ping();\n            }.bind(this);\n\n            options.error = function(xhr) {\n                var status = xhr ? xhr.status : undefined;\n\n                switch (status) {\n                    //If we get a 403 Forbidden error, the session timeout, try to refresh\n                    case 403:\n                        this.setConnected(false);\n                        break;\n\n                    //For other errors, retry\n                    default:\n                        this.ping();\n                        break;\n                }\n            }.bind(this);\n\n            $.ajax(ApiConstants.PATH_PREFIX + \"/me/ping\", options);\n\n        }.bind(this), ApiConstants.PING_INTERVAL);\n    },\n\n    stopPing: function() {\n        clearTimeout(this._pingId);\n    },\n\n    isSaving: function() {\n        return !!this._queued && this._queued.isSaving();\n    },\n\n    isSaved: function() {\n        return this.getQueueLength() === 0;\n    },\n\n    setConnected: function(connected) {\n        var changed = this._connected !== connected;\n\n        this._connected = connected;\n\n        if (changed) {\n            if (!connected) { this.stopPing(); }\n            this.trigger(\"change\");\n        }\n    },\n\n    isConnected: function() {\n        return this._connected;\n    },\n\n    // TODO allow passing Models not just objects of attributes, like normal add method\n    add: function(models, options) {\n        var singular = !_.isArray(models);\n        models = singular ? (models ? [models] : []) : models.slice();\n\n        _.each(models, function(attrs) {\n            var products;\n\n            if (!attrs.productId && attrs.bomId) {\n                products = ProductStore.getParentsOfBom(attrs.bomId);\n\n                if (!_.isEmpty(products)) {\n                    // Only one parent for now\n                    attrs.productId = products[0].id || products[0].cid;\n                }\n            }\n\n            attrs.number = this._getNextNumberForProduct(attrs.productId);\n            attrs.createdAt = moment().unix();\n        }, this);\n\n        return ExtendedCollection.prototype.add.apply(this, [models, options]);\n    },\n\n    _getNextNumberForProduct: function(productId) {\n        var changes;\n\n        if (!productId) { return; }\n\n        if (this._numbers[productId] !== undefined) {\n            return ++this._numbers[productId];\n        }\n\n        changes = this.getForProduct(productId);\n        changes = _.sortBy(changes, function(change) {\n            return change.get(\"number\");\n        });\n\n        this._numbers[productId] = changes.length ? _.last(changes).get(\"number\") + 1 : 1;\n        return this._numbers[productId];\n    },\n\n    _setLastNumberForProduct: function(productId, number) {\n        this._numbers[productId] = number;\n    },\n\n    fixProductId: function(product) {\n        if (product.isNew()) { return; }\n        if (this._numbers[product.cid] === undefined) { return; }\n\n        _.each(this.getForProduct(product.cid), function(result) {\n            result.set({\n                productId: product.id\n            }, {shouldUpdate: false});\n        });\n\n        this._numbers[product.id] = this._numbers[product.cid];\n        delete this._numbers[product.cid];\n    },\n\n    fixBomId: function(bom, options) {\n        if (bom.isNew()) { return; }\n\n        _.each(this.getForBom(bom.cid), function(result) {\n            result.set({\n                bomId: bom.id\n            }, options);\n        });\n    },\n\n    fixItemId: function(item) {\n        if (item.isNew()) { return; }\n\n        _.each(this.getForItem(item.cid), function(result) {\n            result.set({\n                itemId: item.id\n            });\n        });\n    },\n\n    fixValueId: function(value) {\n        if (value.isNew()) { return; }\n\n        _.each(this.getForValue(value.cid), function(result) {\n            result.set({\n                valueId: value.id\n            });\n        });\n    },\n\n    getForProduct: function(productId) {\n        // TODO pass object instead\n        var product = ProductStore.get(productId);\n\n        var changes = this.filter(function(change) {\n            var bomId = change.get(\"bomId\");\n\n            return change.get(\"productId\") === productId ||\n                (product && bomId && _.contains(product.getBoms(), bomId));\n        });\n\n        return changes;\n    },\n\n    getVisibleForProduct: function(productId) {\n        return _.filter(this.getForProduct(productId), function(change) {\n            return change.get(\"visible\");\n        });\n    },\n\n    getLastConsecutiveForProduct: function(productId) {\n        var prev;\n        var changes = this.getForProduct(productId);\n        changes = _.sortBy(changes, function(change) {\n            return -change.get(\"number\");\n        });\n\n        _.every(changes, function(change) {\n            if (prev && (prev.get(\"number\") !== change.get(\"number\")+1)) {\n                return false;\n            }\n            prev = change;\n            return true;\n        });\n\n        return prev;\n    },\n\n    getForBom: function(bomId) { return this.where({ bomId: bomId }); },\n    getVisibleForBom: function(bomId) { return this.where({ bomId: bomId, visible: true }); },\n\n    getForItem: function(itemId) { return this.where({ itemId: itemId }); },\n    getVisibleForItem: function(itemId) { return this.where({ itemId: itemId, visible: true }); },\n\n    getForValue: function(valueId) { return this.where({ valueId: valueId }); },\n    getVisibleForValue: function(valueId) { return this.where({ valueId: valueId, visible: true }); },\n\n    getNotSaved: function() {\n        return this.filter(function(change) {\n            return !change.isSaved();\n        });\n    },\n\n    hasNext: function() {\n      return !!this.next();\n    },\n\n    next: function() {\n        return this.find(function(change) {\n            return !change.isSaved();\n        });\n    },\n\n    getQueueLength: function() {\n      return this.filter(function(change) {\n        return !change.isSaved();\n      }).length;\n    },\n\n    clearQueue: function() {\n        this._queued = undefined;\n        this.trigger(\"change\");\n    },\n\n    queue: function(change, retries) {\n        if (retries === undefined) {\n            retries = ApiConstants.MAX_RETRIES;\n        }\n        //If we reached zero, we're done\n        else if (retries === 0) {\n            change.setSaved(false);\n            return;\n        }\n\n        if (!change.has(\"request\")) {\n            return;\n        }\n\n        this._queued = change;\n        change.setSaving(true);\n\n        change.get(\"request\").apply(change).then(function() {\n            var next;\n\n            this.setConnected(true);\n            change.setSaved(true);\n\n            //queue the next one\n            if ((next = this.next())) {\n                this.queue(next);\n            } else {\n                this.clearQueue();\n            }\n\n            return Promise.resolve();\n\n        }.bind(this)).then(undefined, function(error) {\n            var status;\n\n            if (error && error.xhr) {\n                status = error.xhr.status;\n            }\n            else {\n                console.log(error);\n            }\n\n            switch (status) {\n                //If we get a 403 Forbidden error, the session timeout, try to refresh\n                case 403:\n                    change.setSaved(false);\n                    this.setConnected(false);\n                    break;\n\n                //For other errors, retry\n                default:\n                    //TODO store the timeout id in case we want to stop it manually\n                    setTimeout(this.queue(change, retries - 1), ApiConstants.RETRY_INTERVAL);\n                    break;\n            }\n\n        }.bind(this));\n\n        this.trigger(\"change\");\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return;\n        }\n\n        this.reset();\n        this.setCompany(event.company.id);\n\n        if (event.company.data && _.isArray(event.company.data.products)) {\n            _.each(event.company.data.products, function(product) {\n                this._setLastNumberForProduct(product.id || product.cid, product.totalChanges);\n            }, this);\n        }\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n        switch (action.type) {\n\n            // History\n\n            case ActionConstants.FETCH_PRODUCT_CHANGES:\n                (function() {\n                    var data;\n                    var product;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, [\"productId\", \"count\"], [\"product\"])) { return; }\n\n                    product = action.result.product;\n                    data = {\n                        productId: action.attributes.productId,\n                        count: action.attributes.count,\n                        before: action.attributes.before\n                    };\n\n                    product.setLoadingChanges(true);\n\n                    this.fetch({data: data, remove: false}).then(function() {\n                        product.setLoadingChanges(false);\n                    }, function(error) {\n                        product.setLoadingChanges(false);\n                        console.log(error);\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.FETCH_BOM_CHANGES:\n                (function() {\n                    var data;\n                    var bom;\n                    var prevLength;\n                    var count;\n                    var before;\n                    var after;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, [\"bomId\"], [\"bom\"])) { return; }\n\n                    bom = action.result.bom;\n                    count = action.attributes.count;\n                    before = action.attributes.before;\n                    after = action.attributes.after;\n                    data = {\n                        bomId: action.attributes.bomId,\n                        count: count,\n                        before: before,\n                        after: after\n                    };\n\n                    bom.setLoadingChanges(true);\n\n                    prevLength = this.length;\n\n                    this.fetch({data: data, remove: false}).then(function(collection) {\n                        bom.setLoadingChanges(false);\n                        bom.setLoadedAllChanges(\n                            (count === undefined && !after && !before) ||\n                            (count &&\n                            (collection.length-prevLength < count ||\n                             before-count <= 0))\n                        );\n                    }, function(error) {\n                        bom.setLoadingChanges(false);\n                        console.log(error);\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.FETCH_ITEM_CHANGES:\n                (function() {\n                    var data;\n                    var item;\n                    var count;\n                    var prevLength;\n                    var before;\n                    var after;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, [\"itemId\"], [\"item\"])) { return; }\n\n                    item = action.result.item;\n                    count = action.attributes.count;\n                    before = action.attributes.before;\n                    after = action.attributes.after;\n                    data = {\n                        itemId: action.attributes.itemId,\n                        count: count,\n                        before: before,\n                        after: after\n                    };\n\n                    item.setLoadingChanges(true);\n\n                    prevLength = this.length;\n\n                    this.fetch({data: data, remove: false}).then(function(collection) {\n                        item.setLoadingChanges(false);\n                        item.setLoadedAllChanges(\n                            (count === undefined && !after && !before) ||\n                            (count &&\n                            (collection.length-prevLength < count ||\n                             before-count <= 0))\n                        );\n                    }, function(error) {\n                        item.setLoadingChanges(false);\n                        console.log(error);\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.SYNC_CHANGES:\n                (function() {\n                    var next;\n                    if (!this.isSaving()) {\n                        next = this.next();\n                        if (next) {\n                            this.queue(next);\n                        }\n                    }\n                }).apply(this);\n                break;\n\n            // Product\n\n            case ActionConstants.CREATE_PRODUCT:\n                (function() {\n                    var product;\n                    var bom;\n                    var change;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken, ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"product\", \"bom\"])) { return; }\n                    product = action.result.product;\n                    bom = action.result.bom;\n\n                    change = \"Created product \\\"\" + product.get(\"name\") + \"\\\"\";\n\n                    this.add({\n                        description: change,\n                        productId: product.id || product.cid,\n                        visible: true,\n                        request: function() {\n                            var attrs = _.extend(product.toJSON(), {\n                                change: change\n                            });\n\n                            // Save the product, then update the bom's client id\n                            // with the it of the bom that was created\n                            return product.save(undefined, {\n                                shouldUpdate: false,\n                                attrs: attrs\n                            }).then(function(product) {\n                                ChangeStore.fixProductId(product);\n                                return product;\n                            }).then(function(product) {\n                                bom.set({\n                                    id: product.getBoms()[0]\n                                });\n                                bom.trigger(\"sync\");\n                                return product;\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_PRODUCT:\n                (function() {\n                    var product;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"product\"])) { return; }\n                    product = action.result.product;\n\n                    this.add({\n                        description: \"Removed product \\\"\" + product.get(\"name\") + \"\\\"\",\n                        productId: product.id || product.cid,\n                        visible: true,\n                        request: function() {\n                            return product.destroy();\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_PRODUCT_NAME:\n                (function() {\n                    var product;\n                    var change;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"product\"])) { return; }\n                    product = action.result.product;\n\n                    change = \"Renamed product to \\\"\" + product.get(\"name\") + \"\\\"\";\n\n                    this.add({\n                        description: change,\n                        productId: product.id || product.cid,\n                        visible: true,\n                        request: function() {\n                            var jsonOptions = { json: { attributes: [\"name\"] }};\n                            var attrs = _.extend(product.toJSON(jsonOptions), {\n                                change: change\n                            });\n\n                            return product.save(undefined, {\n                                patch: true,\n                                attrs: attrs\n                            });\n                       }\n                    });\n                }).apply(this);\n                break;\n\n            // Comments\n\n            case ActionConstants.CREATE_PRODUCT_COMMENT:\n            case ActionConstants.CREATE_BOM_ITEM_COMMENT:\n            case ActionConstants.CREATE_BOM_COMMENT:\n                (function() {\n                    var comment;\n\n                    if (!this.validateAction(action, undefined, [\"comment\"])) { return; }\n\n                    comment = action.result.comment;\n                    if (!comment) { return; }\n\n                    this.add({\n                        visible: false,\n                        request: function() {\n                            return comment.save();\n                       }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_PRODUCT_COMMENT:\n            case ActionConstants.UPDATE_BOM_ITEM_COMMENT:\n            case ActionConstants.UPDATE_BOM_COMMENT:\n                (function() {\n                    var comment;\n\n                    if (!this.validateAction(action, undefined, [\"comment\"])) { return; }\n\n                    comment = action.result.comment;\n                    if (!comment) { return; }\n\n                    this.add({\n                        visible: false,\n                        request: function() {\n                            var attrs = comment.toJSON({\n                                json: {\n                                    attributes: [\"body\"]\n                                }\n                            });\n\n                            return comment.save(undefined, {\n                                patch: true,\n                                attrs: attrs\n                            });\n                       }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_PRODUCT_COMMENT:\n            case ActionConstants.DESTROY_BOM_ITEM_COMMENT:\n            case ActionConstants.DESTROY_BOM_COMMENT:\n                (function() {\n                    var comment;\n\n                    if (!this.validateAction(action, undefined, [\"comment\"])) { return; }\n\n                    comment = action.result.comment;\n                    if (!comment) { return; }\n\n                    this.add({\n                        visible: false,\n                        request: function() {\n                            return comment.destroy();\n                       }\n                    });\n                }).apply(this);\n                break;\n\n            // Bom\n\n            case ActionConstants.CREATE_BOM:\n                (function() {\n                    var bom;\n                    var product;\n                    var change;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"product\", \"bom\"])) { return; }\n                    bom = action.result.bom;\n                    product = action.result.product;\n\n                    change = \"Added BoM \\\"\" + bom.get(\"name\") + \"\\\"\";\n\n                    // queue change\n                    this.add({\n                        description: change,\n                        bomId: bom.id || bom.cid,\n                        visible: true,\n                        request: function() {\n                            // Add the parent product id to the attributes\n                            // TODO\n                            // this might be better handled in a save method of the model\n                            // if save on new BoM, add productId to attrs\n                            var attrs = _.extend(\n                                bom.toJSON(),\n                                {\n                                    productId: product.id || product.cid,\n                                    change: change\n                                }\n                            );\n\n                            // Save the new bom, and then fix its client id in the parent product\n                            return bom.save(undefined, {\n                                attrs: attrs\n                            }).then(function(bom) {\n                                product.fixChildBomId(bom);\n                                return bom;\n                            }).then(function(bom) {\n                                ChangeStore.fixBomId(bom);\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_NAME:\n                (function() {\n                    var bom;\n                    var change;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"bom\"])) { return; }\n                    bom = action.result.bom;\n\n                    change = \"Renamed BoM to \\\"\" + bom.get(\"name\") + \"\\\"\";\n\n                    // queue change\n                    this.add({\n                        description: change,\n                        bomId: bom.id || bom.cid,\n                        visible: true,\n                        request: function() {\n                            var attrs = _.extend(bom.toJSON({\n                                json: { attributes: [\"name\"] }\n                            }), {\n                                change: change\n                            });\n\n                            return bom.save(undefined, {\n                                patch: true,\n                                attrs: attrs\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM:\n                (function() {\n                    var bom;\n                    var product;\n                    var change;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"bom\", \"product\"])) { return; }\n                    product = action.result.product;\n                    bom = action.result.bom;\n\n                    change = \"Removed BoM \\\"\" + bom.get(\"name\") + \"\\\"\";\n\n                    // queue change\n                    this.add({\n                        description: change,\n                        productId: product.id || product.cid,\n                        bomId: bom.id || bom.cid,\n                        visible: true,\n                        request: function() {\n                            return bom.destroy();\n                        }\n                    });\n\n                }).apply(this);\n                break;\n\n            // Bom Items\n\n            case ActionConstants.UPDATE_BOM_ITEM:\n                (function() {\n                    var bom;\n                    var value;\n                    var item;\n                    var attribute;\n                    var attrs;\n                    var change;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"bom\", \"item\", \"value\", \"attribute\"])) {\n                        //TODO if the action fails, we should be able to display feedback to the user\n                        return;\n                    }\n\n                    bom = action.result.bom;\n                    item = action.result.item;\n                    value = action.result.value;\n                    attribute = action.result.attribute;\n\n                    // If item is new, then we must save the whole item,\n                    // and include the attribute data if it is new\n                    if (item.isNew()) {\n\n                        // Change for history\n                        change = \"Added new item, and set \" + attribute.get(\"name\") + \" to \" + value.get(\"content\");\n\n                        attrs = item.toJSON({\n                            json: { associations: true }\n                        });\n\n                        // If new values are assigned to new attributes, pass the attributes too\n                        if (attribute.isNew()) {\n                            attrs = _.extend(attrs, {\n                                attributes: [ attribute.toJSON( {json: {cid: true}} ) ]\n                            });\n                        }\n\n                        attrs = _.extend(attrs, { change: change });\n\n                        // queue change\n                        this.add({\n                            description: change,\n                            bomId: bom.id || bom.cid,\n                            itemId: item.id || item.cid,\n                            valueId: value.id || value.cid,\n                            visible: true,\n                            request: function() {\n                                return item.save(undefined, {\n                                    attrs: attrs\n                                }).then(function(item) {\n                                    // Fix ids of new attribute\n                                    if (attribute.isNew()) {\n                                        attribute.set({\n                                            id: item.getValues().first().getAttributeId()\n                                        });\n                                        attribute.trigger(\"sync\");\n                                    }\n                                    return item;\n                                }).then(function(item) {\n                                    ChangeStore.fixItemId(item);\n                                    ChangeStore.fixValueId(item.getValues().first());\n                                });\n                            }\n                        });\n                    }\n                    // Else if the value is new we must save the whole value,\n                    // and include the attribute data if it is new\n                    else if (value.isNew()) {\n\n                        change = \"Updated \" + attribute.get(\"name\") + \" to \" + value.get(\"content\");\n                        attrs = value.toJSON();\n\n                        // If value is assigned to a new attribute, pass the attribute too\n                        if (attribute.isNew()) {\n                            attrs = _.extend(attrs, {\n                                attribute: attribute.toJSON( {json: {cid: true}} )\n                            });\n                        }\n\n                        attrs = _.extend(attrs, { change: change });\n\n                        // queue change\n                        this.add({\n                            description: change,\n                            bomId: bom.id || bom.cid,\n                            itemId: item.id || item.cid,\n                            valueId: value.id || value.cid,\n                            visible: true,\n                            request: function() {\n                                return value.save(undefined, {\n                                    attrs: attrs\n                                }).then(function(value) {\n                                    // Fix ids of new attribute\n                                    if (attribute.isNew()) {\n                                        attribute.set({\n                                            id: value.getAttributeId()\n                                        });\n                                        attribute.trigger(\"sync\");\n                                    }\n                                    return value;\n                                }).then(function(value) {\n                                    ChangeStore.fixValueId(value);\n                                });\n                            }\n                        });\n                    }\n                    // Else if the value has not been removed from the item,\n                    // then patch its content\n                    else if (item.getValues().contains(value)) {\n                        change = \"Updated \" + attribute.get(\"name\") + \" to \" + value.get(\"content\");\n\n                        attrs = value.toJSON({\n                            json: {\n                                attributes: [\"content\"]\n                            }\n                        });\n\n                        attrs = _.extend(attrs, { change: change });\n\n                        this.push({\n                            description: change,\n                            bomId: bom.id || bom.cid,\n                            itemId: item.id || item.cid,\n                            valueId: value.id || value.cid,\n                            visible: true,\n                            request: function() {\n                                return value.save(undefined, {\n                                    patch: true,\n                                    attrs: attrs\n                                });\n                            }\n                        });\n\n                    }\n                    // Otherwise, the value has been removed, so destroy it\n                    else {\n                        change = \"Removed \" + attribute.get(\"name\");\n\n                        this.push({\n                            description: change,\n                            bomId: bom.id || bom.cid,\n                            itemId: item.id || item.cid,\n                            valueId: value.id || value.cid,\n                            visible: true,\n                            request: function() {\n                                return value.destroy();\n                            }\n                        });\n                    }\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.ADD_BOM_ITEM:\n                (function() {\n                    var item;\n                    var bom;\n                    var change;\n                    var attrs;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"item\", \"bom\"])) { return; }\n                    item = action.result.item;\n                    bom = action.result.bom;\n\n                    change = \"Added 1 item\";\n\n                    attrs = item.toJSON({\n                        json: { associations: true }\n                    });\n\n                    attrs = _.extend(attrs, { change: change });\n\n                    //queue change\n                    this.add({\n                        description: change,\n                        bomId: bom.id || bom.cid,\n                        itemId: item.id || item.cid,\n                        visible: true,\n                        request: function() {\n                            return item.save(undefined, {\n                                attrs: attrs\n                            }).then(function(item) {\n                                ChangeStore.fixItemId(item);\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.REMOVE_BOM_ITEMS:\n                (function() {\n                    var items;\n                    var bom;\n                    var change;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"items\", \"bom\"])) { return; }\n                    items = action.result.items;\n                    bom = action.result.bom;\n\n                    change = \"Removed \" + items.length + \" item\" + (items.length > 1 ? \"s\" : \"\");\n\n                    //queue change\n                    this.add({\n                        description: change,\n                        bomId: bom.id || bom.cid,\n                        visible: true,\n                        request: function() {\n                            return Promise.all(\n                                // TODO implement deleteList\n                                items.map(function(item) {\n                                    return item.destroy();\n                                })\n                            );\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            // Bom Attributes\n\n            case ActionConstants.ADD_BOM_COLUMN:\n                (function() {\n                    var bom;\n                    var attribute;\n                    var field;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n                    if (!this.validateAction(action, undefined, [\"bom\", \"attribute\"])) { return; }\n\n                    bom = action.result.bom;\n                    attribute = action.result.attribute;\n                    field = action.result.field;\n\n                    if (attribute.isNew()) {\n\n                        if (field && field.isNew()) {\n                            //queue change\n                            this.add({\n                                description: \"Added column \" + attribute.get(\"name\"),\n                                bomId: bom.id || bom.cid,\n                                visible: false,\n                                request: function() {\n                                    var attrs = attribute.toJSON();\n\n                                    // If the field of the attribute is new,\n                                    // pass the typeId instead of the fieldId\n                                    if (field) {\n                                        attrs = _.omit(attrs, \"fieldId\");\n                                        attrs = _.extend(attrs, { typeId: field.get(\"typeId\") });\n                                    }\n\n                                    return attribute.save(null, {\n                                        shouldUpdate: false,\n                                        attrs: attrs\n                                    }).then(function(attribute) {\n                                        field.set({id: attribute.get(\"fieldId\")});\n                                        field.trigger(\"sync\");\n                                        return field;\n                                    }).then(function() {\n                                        bom.getAttributes().each(function(result) {\n                                            result.trigger(\"sync\");\n                                        });\n                                    });\n                                }\n                            });\n                        }\n                        else {\n                            //queue change\n                            this.add({\n                                description: \"Added column \" + attribute.get(\"name\"),\n                                bomId: bom.id || bom.cid,\n                                visible: false,\n                                request: function() {\n                                    return attribute.save().then(function() {\n                                        bom.getAttributes().each(function(result) {\n                                            result.trigger(\"sync\");\n                                        });\n                                    });\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        //queue change\n                        this.add({\n                            name: \"Added column \" + attribute.get(\"name\"),\n                            bomId: bom.id || bom.cid,\n                            visible: false,\n                            request: function() {\n                                return attribute.save(undefined, {\n                                    patch: true,\n                                    json: {\n                                        attributes: [\"name\", \"position\", \"visible\"]\n                                    }\n                                }).then(function() {\n                                    bom.getAttributes().each(function(result) {\n                                        result.trigger(\"sync\");\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }).apply(this);\n                break;\n\n            // TODO rename this action to SET_BOM_COLUMN_NAME\n            case ActionConstants.SET_BOM_COLUMN:\n                (function() {\n                    var attribute;\n                    var bom;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"bom\", \"attribute\"])) { return; }\n                    bom = action.result.bom;\n                    attribute = action.result.attribute;\n\n                    //queue change\n                    this.add({\n                        description: \"Renamed column to \" + attribute.get(\"name\"),\n                        bomId: bom.id || bom.cid,\n                        visible: false,\n                        request: function() {\n                            return attribute.save(\n                                undefined,\n                                {\n                                    patch: true,\n                                    json: {\n                                        attributes: [\"name\"]\n                                    }\n                                });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.SET_VISIBLE_BOM_COLUMNS:\n                (function() {\n                    var bom;\n                    var newFields;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"bom\"])) { return; }\n                    bom = action.result.bom;\n\n                    newFields = action.result.newFields;\n                    if (!_.isArray(newFields)) { newFields = []; }\n\n                    //queue change\n                    this.add({\n                        description: \"Changed columns\",\n                        bomId: bom.id || bom.cid,\n                        visible: false,\n                        request: function() {\n                            return Promise.all(\n                                newFields.map(function(field) {\n                                    if (field.isNew()) {\n                                        return field.save();\n                                    }\n                                })\n                            ).then(function() {\n                                // Update BoM attributes with new field ids\n                                _.each(newFields, function(field) {\n                                    bom.getAttributes().fixFieldId(field.cid, field.id);\n                                });\n\n\n\n                                return bom.save(\n                                    undefined,\n                                    {\n                                        patch: true,\n                                        json: {\n                                            attributes: false,\n                                            associations: {\n                                                attributes: true\n                                            }\n                                        }\n                                    }).then(function(bom) {\n                                        bom.getAttributes().each(function(result) {\n                                            result.trigger(\"sync\");\n                                         });\n                                    });\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.HIDE_BOM_COLUMN:\n                (function() {\n                    var attribute;\n                    var bom;\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"bom\", \"attribute\"])) { return; }\n                    bom = action.result.bom;\n                    attribute = action.result.attribute;\n\n                    //queue change\n                    this.add({\n                        description: \"Hide column \" + attribute.name,\n                        bomId: bom.id || bom.cid,\n                        visible: false,\n                        request: function() {\n                            return attribute.save(\n                                undefined,\n                                {\n                                    patch: true,\n                                    json: {\n                                        attributes: [\"visible\", \"position\"]\n                                    }\n                                }\n                            ).then(function(){\n                                bom.getAttributes().each(function(attribute){\n                                    attribute.trigger(\"sync\");\n                                });\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_PRODUCT:\n                (function() {\n                    var product;\n                    var bom;\n                    var newFields;\n                    var change;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"product\", \"bom\"])) { return; }\n                    product = action.result.product;\n                    bom = action.result.bom;\n\n                    newFields = action.result.newFields;\n                    if (!_.isArray(newFields)) { newFields = []; }\n\n                    change = \"Created product \\\"\" + product.get(\"name\") + \"\\\" from imported BoM\";\n\n                    //queue change\n                    this.add({\n                        description: change,\n                        bomId: bom.id || bom.cid,\n                        request: function() {\n                            return Promise.all(\n\n                                //TODO need to catch if this fails...\n                                newFields.map(function(field) {\n                                    if (field.isNew()) {\n                                        return field.save();\n                                    }\n                                })\n\n                            ).then(function() {\n\n                                // Update BoM attributes with new field ids\n                                _.each(newFields, function(field) {\n                                    bom.getAttributes().fixFieldId(field.cid, field.id);\n                                });\n\n                            }).then(function() {\n                                var attrs = _.extend(product.toJSON(), {\n                                    change: change\n                                });\n\n                                return product.save(null, {\n                                    shouldUpdate: false,\n                                    attrs: attrs\n                                });\n\n                            }).then(function(product) {\n                                bom.set({\n                                    id: product.getBoms()[0]\n                                }, {shouldUpdate: false});\n\n                                return bom;\n                            }).then(function(bom) {\n                                ChangeStore.fixBomId(bom, {shouldUpdate: false});\n                                return bom;\n                            }).then(function(bom) {\n                                return bom.save(undefined, {\n                                    json: {\n                                        associations: true\n                                    }\n                                });\n                            }).then(function() {\n                                //bom.trigger(\"sync\");\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_NEW_BOM:\n                (function() {\n                    var product;\n                    var bom;\n                    var newFields;\n                    var change;\n\n                    AppDispatcher.waitFor([ProductStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"product\", \"bom\"])) { return; }\n                    product = action.result.product;\n                    bom = action.result.bom;\n\n                    newFields = action.result.newFields;\n                    if (!_.isArray(newFields)) { newFields = []; }\n\n                    change = \"Created BoM from import\";\n\n                    //queue change\n                    this.add({\n                        description: change,\n                        bomId: bom.id || bom.cid,\n                        request: function() {\n                            return Promise.all(\n\n                                newFields.map(function(field) {\n                                    if (field.isNew()) {\n                                        return field.save();\n                                    }\n                                })\n\n                            ).then(function() {\n\n                                // Update BoM attributes with new field ids\n                                _.each(newFields, function(field) {\n                                    bom.getAttributes().fixFieldId(field.cid, field.id);\n                                });\n\n                            }).then(function() {\n\n                                var attrs = bom.toJSON({\n                                    json: {\n                                        associations: true\n                                    }\n                                });\n\n                                attrs = _.extend(attrs, {\n                                    productId: product.id || product.cid,\n                                    change: change\n                                });\n\n                                return bom.save(null, { attrs: attrs });\n\n                            }).then(function(bom) {\n                                product.fixChildBomId(bom);\n                                return bom;\n                            }).then(function(bom) {\n                                ChangeStore.fixBomId(bom);\n                                return bom;\n                            });\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_UPDATE_BOM:\n                break;\n\n            // Bom View\n\n            case ActionConstants.CREATE_BOM_VIEW:\n                (function() {\n                    var view;\n\n                    AppDispatcher.waitFor([BomViewStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"view\"])) { return; }\n                    view = action.result.view;\n\n                    // queue change\n                    this.add({\n                        visible: false,\n                        request: function() {\n                            return view.save();\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_BOM_VIEW:\n                (function() {\n                    var view;\n\n                    AppDispatcher.waitFor([BomViewStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"view\"])) { return; }\n                    view = action.result.view;\n\n                    // TODO this should patch only changed attributes\n\n                    this.add({\n                        visible: false,\n                        request: function() {\n                            var attrs = view.toJSON({\n                                json: {\n                                    attributes: [\"name\", \"fieldIds\"]\n                                }\n                            });\n                            return view.save(undefined, {\n                                patch: true,\n                                attrs: attrs\n                            });\n                       }\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM_VIEW:\n                (function() {\n                    var view;\n\n                    AppDispatcher.waitFor([BomViewStore.dispatchToken]);\n\n                    if (!this.validateAction(action, undefined, [\"view\"])) { return; }\n                    view = action.result.view;\n\n                    this.add({\n                        visible: false,\n                        request: function() {\n                            return view.destroy();\n                        }\n                    });\n                }).apply(this);\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"constants/ApiConstants\":145,\"dispatcher/AppDispatcher\":152,\"events/UserEvent\":158,\"models/ChangeModel\":166,\"moment\":8,\"stores/BomStore\":190,\"stores/BomViewStore\":191,\"stores/ProductStore\":195,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],93:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar CommentModel = require(\"models/CommentModel\");\nvar _string = require(\"underscore.string\");\n\nvar CommentCollection = ExtendedCollection.extend(\n{\n    model: CommentModel,\n    parent: undefined,\n    comparator: function(a, b) {\n        var acid, bcid;\n\n        if ((a.id && !b.id) || (a.id < b.id)) { return 1; }\n        else if ((b.id && !a.id) || (a.id > b.id)) { return -1; }\n\n        acid = parseInt(_string.ltrim(a.cid, \"c\"), 10);\n        bcid = parseInt(_string.ltrim(b.cid, \"c\"), 10);\n\n        if (acid < bcid) { return 1; }\n        else if (acid > bcid) { return -1; }\n        else { return 0; }\n    },\n    totalServerCount: 0,\n    leftServerCount: 0,\n\n    url: function() {\n        return this.parent.url() + \"/comment\";\n    },\n\n    setParent: function(parent) {\n        this.parent = parent;\n\n        this.each(function(comment) {\n            comment.setParent(parent);\n        });\n    },\n\n    getParent: function() {\n        return this.parent;\n    },\n\n    setTotalServerCount: function(count) {\n        this.leftServerCount = this.totalServerCount = count;\n    },\n\n    decLeftServerCount: function(count) {\n        if (this.leftServerCount !== undefined) {\n            this.leftServerCount -= count;\n            this.leftServerCount = this.leftServerCount < 0 ? 0 : this.leftServerCount;\n        }\n    },\n\n    isLoaded: function() {\n        return this.leftServerCount === 0;\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.comments)) {\n            options.count = resp._embedded.comments.length;\n        }\n\n        // Return the field array\n        return resp._embedded && resp._embedded.comments ? resp._embedded.comments : resp;\n    },\n\n    set: function(models) {\n        var singular;\n\n        models = ExtendedCollection.prototype.set.apply(this, arguments);\n        singular = !_.isArray(models);\n\n        if (singular) {\n            if (models && _.isFunction(models.setParent)) {\n                models.setParent( this.parent );\n            }\n        }\n        else {\n            _.each(models, function(model) {\n                if (model && _.isFunction(model.setParent)) {\n                    model.setParent( this.parent );\n                }\n            }, this);\n        }\n\n        return models;\n    }\n});\n\nmodule.exports = CommentCollection;\n\n\n},{\"models/CommentModel\":167,\"underscore\":\"underscore\",\"underscore.string\":35,\"utils/ExtendedCollection\":201}],94:[function(require,module,exports){\n\"use strict\";\n\nvar Backbone = require(\"backbone\");\nvar _ = require(\"underscore\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar TypeConstants = require(\"constants/TypeConstants\");\n\nvar FieldModel = require(\"models/FieldModel\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: FieldModel,\n    comparator: \"name\",\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/field\";\n    },\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n        this.listenTo(this, \"change:\" + this.comparator, function() { this.sort(); });\n\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.field)) {\n            options.count = resp._embedded.field.length;\n        } else if (_.isArray(resp)) {\n            options.count = resp.length;\n        }\n\n        // Return the field array\n        return resp._embedded ? resp._embedded.field : resp;\n    },\n\n    getBestForName: function(name) {\n        if (!name) { return; }\n\n        var field = this.find(function(result) {\n            // return _.isString(result.get(\"name\"))\n            //     && (result.get(\"name\").toLowerCase() === name.toLowerCase());\n            return result.match(name);\n        });\n\n        return field;\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return; }\n\n        this.reset();\n        this.setCompany(event.company.id);\n\n        if (event.company.data && _.isArray(event.company.data.fields)) {\n            this.set(event.company.data.fields, {parse: true});\n        }\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n        switch (action.type) {\n\n            case ActionConstants.ADD_BOM_COLUMN:\n                (function() {\n                    var field;\n                    var attribute;\n\n                    if (!this.validateAction(action, [\"bomId\", \"attribute\"])) { return; }\n\n                    attribute = action.attributes.attribute;\n                    if (!attribute) { return; }\n\n                    if (!attribute.fieldId && attribute.typeId) {\n                        field = this.add({\n                            typeId: attribute.typeId,\n                            name: attribute.name\n                        });\n\n                        attribute = _.clone(attribute);\n                        attribute = _.omit(attribute, \"typeId\");\n                        attribute = _.extend(attribute, { fieldId: field.id || field.cid });\n                    }\n\n                    action.result = _.extend({}, action.result, {\n                        field: field,\n                        attribute: attribute\n                    });\n\n                }).apply(this);\n                break;\n\n            // case ActionConstants.SET_BOM_COLUMN:\n            //     (function() {\n            //         //TODO later if we use SET_BOM_COLUMN to change more than just the name\n            //     }).apply(this);\n            //     break;\n\n            case ActionConstants.SET_VISIBLE_BOM_COLUMNS:\n                (function() {\n                    var columns;\n                    var newFields = [];\n\n                    if (!this.validateAction(action, [\"columns\"])) {\n                        return;\n                    }\n\n                    columns = action.attributes.columns;\n\n                    //go through columns, and create a new field for each without field id\n                    columns = columns.map(function(result) {\n                        var field;\n\n                        if (!_.isObject(result)) {\n                            return result;\n                        } else if (result.fieldId) {\n                            return _.clone(result);\n                        } else if (result.typeId) {\n                            field = this.add({\n                                typeId: result.typeId,\n                                name: result.name\n                            });\n\n                            newFields.push(field);\n\n                            return {\n                                fieldId: field.id || field.cid,\n                                name: result.name\n                            };\n                        }\n                    }, this);\n\n                    //TODO make sure that new field is saved correclty\n                    // and what happens if the Bom fails to update after the fields are created? rollback?\n\n                    action.result = _.extend({}, action.result, {\n                        newFields: newFields,\n                        columns: columns\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_BOM_FILE:\n                (function() {\n                    var attributes;\n                    var items;\n\n                    if (!this.validateAction(action, [\"bom\"])) {\n                        return;\n                    }\n\n                    attributes = action.attributes.bom.meta.fields;\n                    if (!attributes) { return; }\n\n                    items = action.attributes.bom.data;\n\n                    // Removed last attribute if empty\n                    if (_.last(attributes) === \"\") {\n                        attributes.pop();\n                    }\n\n                    // Find best field match for each attribute\n                    attributes = attributes.map(function(result) {\n                        var field = this.getBestForName(result);\n\n                        return {\n                            name: result,\n                            fieldId: field ? field.id || field.cid : undefined\n                        };\n                    }, this);\n\n                    // Make sure that a field is assigned only once\n                    _.each(attributes, function(attribute, index) {\n                        var rest = _.rest(attributes, index+1);\n\n                        _.each(rest, function(result) {\n                            if (result.fieldId === attribute.fieldId) {\n                                result.fieldId = undefined;\n                            }\n                        });\n                    });\n\n                    // Store result for BomImportStore\n                    action.result = _.extend({}, action.result, {\n                        attributes: attributes\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_PRODUCT:\n            case ActionConstants.IMPORT_NEW_BOM:\n                (function() {\n                    var attributes;\n                    var newFields = [];\n\n                    if (!this.validateAction(action, [\"attributes\"])) {\n                        action.reject(new Error(\"Invalid import parameters\"));\n                        return;\n                    }\n\n                    attributes = action.attributes.attributes;\n\n                    //go through attributes, and create a new field for each without field id\n                    attributes = attributes.map(function(result) {\n                        var field;\n                        var typeId;\n\n                        if (!_.isObject(result)) {\n                            return result;\n                        } else if (result.fieldId || result.skip) {\n                            return _.clone(result);\n                        } else {\n                            typeId = result.typeId;\n                            if (!typeId) {\n                                typeId = TypeConstants.TEXT;\n                            }\n\n                            field = this.add({\n                                typeId: typeId,\n                                name: result.name\n                            });\n\n                            newFields.push(field);\n\n                            return _.extend({}, result, {\n                                fieldId: field.id || field.cid,\n                                name: result.name\n                            });\n                        }\n                    }, this);\n\n                    //TODO make sure that new field is saved correclty\n                    // and what happens if the Bom fails to update after the fields are created? rollback?\n\n                    action.result = _.extend({}, action.result, {\n                        newFields: newFields,\n                        attributes: attributes\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_UPDATE_BOM:\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"constants/ApiConstants\":145,\"constants/TypeConstants\":150,\"dispatcher/AppDispatcher\":152,\"events/UserEvent\":158,\"models/FieldModel\":168,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],95:[function(require,module,exports){\n\"use strict\";\n\nvar Backbone = require(\"backbone\");\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar FieldTypeModel = require(\"models/FieldTypeModel\");\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: FieldTypeModel,\n    url: ApiConstants.PATH_PREFIX + \"/fieldtype\",\n\n    initialize: function() {\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.fieldtype)) {\n            options.count = resp._embedded.fieldtype.length;\n        } else if (_.isArray(resp)) {\n            options.count = resp.length;\n        }\n\n        // Return the fieldtype array\n        return resp._embedded ? resp._embedded.fieldtype : resp;\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return; }\n\n        this.reset();\n        this.setCompany(event.company.id);\n\n        if (event.company.data && _.isArray(event.company.data.types)) {\n            this.set(event.company.data.types, {parse: true});\n        }\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ApiConstants\":145,\"events/UserEvent\":158,\"models/FieldTypeModel\":169,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],96:[function(require,module,exports){\n\"use strict\";\n\nvar Backbone = require(\"backbone\");\nvar _ = require(\"underscore\");\nvar moment = require(\"moment\");\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\nvar ApiConstants = require(\"constants/ApiConstants\");\n\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\nvar ProductModel = require(\"models/ProductModel\");\nvar BomStore = require(\"stores/BomStore\");\nvar UserEvent = require(\"events/UserEvent\");\n\nmodule.exports = ExtendedCollection.extend({\n    model: ProductModel,\n    comparator: \"position\",\n\n    url: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/product\";\n    },\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n\n        this.listenTo(Backbone, UserEvent.EVENT_LOAD_DATA, this.onLoadData);\n    },\n\n    parse: function(resp, options) {\n        if (!resp) {\n            return;\n        }\n\n        // Get the total number of items returned\n        if (resp.total_items) {\n            options.count = resp.total_items;\n        } else if (resp._embedded && _.isArray(resp._embedded.product)) {\n            options.count = resp._embedded.product.length;\n        } else if (_.isArray(resp)) {\n            options.count = resp.length;\n        }\n\n        // Return the field array\n        return resp._embedded ? resp._embedded.product : resp;\n    },\n\n    getParentsOfBom: function(bomId) {\n        return this.filter(function(product) {\n            return product.isParentOfBom(bomId);\n        });\n    },\n\n    onLoadData: function(event) {\n        if (!event.company) { return; }\n\n        this.reset();\n        this.setCompany(event.company.id);\n\n        if (event.company.data && _.isArray(event.company.data.products)) {\n            this.set(event.company.data.products, {parse: true});\n        }\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n        switch (action.type) {\n\n            case ActionConstants.FETCH_PRODUCT_CHANGES:\n                (function() {\n                    var product;\n\n                    if (!this.validateAction(action, [\"productId\"])) { return; }\n\n                    product = this.get(action.attributes.productId);\n                    if (!product) { return; }\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.CREATE_PRODUCT:\n                (function() {\n                    var bom;\n                    var product;\n\n                    if (!this.validateAction(action, [\"name\"])) {\n                        return;\n                    }\n\n                    //clean up name and create product\n                    if (!action.attributes.name) {\n                        return;\n                    }\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n                    bom = action.result.bom;\n\n                    product = this.add({\n                        name: action.attributes.name,\n                        position: this.length ? this.last().get(\"position\")+1 : 0,\n                        bomIds: [bom.cid]\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_PRODUCT:\n                //TODO add option to destroy BoMs recursively\n                (function() {\n                    var removed;\n\n                    if (!this.validateAction(action, [\"id\"])) {\n                        return;\n                    }\n\n                    removed = this.remove(action.attributes.id);\n\n                    // Update positions of Products after the removed\n                    this.each(function(product) {\n                        if (product.get(\"position\") > removed.get(\"position\")) {\n                            product.set(\"position\", product.get(\"position\")-1);\n                        }\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        product: removed\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_PRODUCT_NAME:\n                (function() {\n                    var product;\n\n                    if (!this.validateAction(action, [\"id\", \"name\"])) {\n                        return;\n                    }\n\n                    product = this.get(action.attributes.id);\n                    product.set({\n                        name: action.attributes.name\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_PRODUCT:\n                (function() {\n                    var product;\n                    var bom;\n\n                    // Validate action object\n                    if (!this.validateAction(action)) { return; }\n\n                    // Wait for field store to create new fields if needed\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n                    if (!action.reult && !action.result.bom) {\n                        action.reject(new Error(\"Failed to import BoM\"));\n                        return;\n                    }\n\n                    bom = action.result.bom;\n\n                    product = this.add({\n                        name: \"My Product\",\n                        position: this.length ? this.last().get(\"position\")+1 : 0,\n                        bomIds: [bom.id || bom.cid]\n                    });\n\n                    if (!product) {\n                        action.reject(new Error(\"Failed to create product\"));\n                        return;\n                    }\n\n                    action.resolve(product);\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.IMPORT_NEW_BOM:\n                (function() {\n                    var product;\n                    var bom;\n\n                    // Validate action object\n                    if (!this.validateAction(action, [\"parentProductId\"])) { return; }\n\n                    // Get the parent product\n                    product = this.get(action.attributes.parentProductId);\n                    if (!product) {\n                        action.reject(new Error(\"Invalid product\"));\n                    }\n\n                    // Wait for field store to create new fields if needed\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n                    if (!action.reult && !action.result.bom) {\n                        action.reject(new Error(\"Failed to import BoM\"));\n                        return;\n                    }\n\n                    bom = action.result.bom;\n                    product.attachBom(bom.id || bom.cid);\n\n                    action.resolve(bom);\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.CREATE_BOM:\n                (function() {\n                    var bom;\n                    var product;\n\n                    if (!this.validateAction(action, [\"productId\"])) { return; }\n\n                    AppDispatcher.waitFor([BomStore.dispatchToken]);\n                    if (!action.reult && !action.result.bom) {\n                        return;\n                    }\n\n                    product = this.get(action.attributes.productId);\n                    if (!product) { return; }\n\n                    bom = action.result.bom;\n                    bom.set({\n                        position: product.getBoms().length\n                    });\n\n                    product.attachBom(bom.id || bom.cid);\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_BOM:\n                (function() {\n                    var bomId;\n                    var product;\n\n                    if (!this.validateAction(action, [\"bomId\"])) { return; }\n                    bomId = action.attributes.bomId;\n\n                    //remove the bom from products\n                    // this.each(function(product) {\n                    //     if (_.contains(product.getBoms(), bomId)) {\n                    //         product.detachBom(bomId);\n                    //     }\n                    // });\n\n                    product = this.find(function(product) {\n                        return _.contains(product.getBoms(), bomId);\n                    });\n                    if (!product) { return; }\n\n                    product.detachBom(bomId);\n\n                    action.result = _.extend({}, action.result, {\n                        product: product\n                    });\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.FETCH_PRODUCT_COMMENTS:\n                (function() {\n                    var product;\n                    var comments;\n                    var prevLength;\n\n                    if (!this.validateAction(action, [\"productId\", \"count\"])) { return; }\n\n                    product = this.get(action.attributes.productId);\n                    if (!product) { return; }\n\n                    comments = product.getComments();\n                    comments.decLeftServerCount( action.attributes.count );\n\n                    prevLength = comments.length;\n                    comments.fetch({\n                        data: {\n                            count: action.attributes.count,\n                            before: comments.length ? comments.last().get(\"createdAt\") : undefined\n                        },\n                        remove: false\n                    }).then(function(comments) {\n                        if (comments.length-prevLength < action.attributes.count) {\n                            comments.setTotalServerCount(0);\n                            this.trigger(\"update\");\n                        }\n                    }.bind(this));\n\n                    this.trigger(\"update\");\n\n                }).apply(this);\n                break;\n\n            case ActionConstants.CREATE_PRODUCT_COMMENT:\n                (function() {\n                    var product;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"productId\", \"body\"])) { return; }\n\n                    product = this.get(action.attributes.productId);\n                    if (!product) { return; }\n\n                    comment = product.getComments().add({\n                        body: action.attributes.body,\n                        createdAt: moment().unix()\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.UPDATE_PRODUCT_COMMENT:\n                (function() {\n                    var product;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"productId\", \"commentId\", \"body\"])) { return; }\n\n                    product = this.get(action.attributes.productId);\n                    if (!product) { return; }\n\n                    comment = product.getComments().get(action.attributes.commentId);\n                    if (!comment) { return; }\n\n                    comment.set({\n                        body: action.attributes.body\n                    });\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            case ActionConstants.DESTROY_PRODUCT_COMMENT:\n                (function() {\n                    var product;\n                    var comment;\n\n                    if (!this.validateAction(action, [\"productId\", \"commentId\"])) { return; }\n\n                    product = this.get(action.attributes.productId);\n                    if (!product) { return; }\n\n                    comment = product.getComments().remove(action.attributes.commentId);\n                    if (!comment) { return; }\n\n                    action.result = _.extend({}, action.result, {\n                        comment: comment\n                    });\n                }).apply(this);\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"constants/ApiConstants\":145,\"dispatcher/AppDispatcher\":152,\"events/UserEvent\":158,\"models/ProductModel\":171,\"moment\":8,\"stores/BomStore\":190,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],97:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar ActionConstants = require(\"constants/ActionConstants\");\n\nvar ExtendedCollection = require(\"utils/ExtendedCollection\");\n\nvar Backbone = require(\"backbone\");\nvar SelectedBomItemModel = Backbone.Model.extend({});\n\nmodule.exports = ExtendedCollection.extend({\n    model: SelectedBomItemModel,\n\n    initialize: function() {\n        this.dispatchToken = AppDispatcher.register(this.dispatchCallback.bind(this));\n    },\n\n    isAnySelected: function() {\n        return this.length > 0;\n    },\n\n    select: function(bomId, itemId) {\n        this.selectWhere( {bomId: bomId, itemId: itemId} );\n    },\n\n    selectWhere: function(attributes) {\n        // Check if the item is already present/selected\n        var item = this.findWhere(attributes);\n        if (item) { return; }\n\n        // If not, then select it\n        this.push(attributes);\n    },\n\n    unselect: function(bomId, itemId) {\n        this.unselectWhere( {bomId: bomId, itemId: itemId} );\n    },\n\n    unselectWhere: function(attributes) {\n        // Check if the item is already present/selected\n        var item = this.findWhere(attributes);\n\n        //Unselect\n        if (item) { this.remove(item); }\n    },\n\n    unselectBom: function(bomIds) {\n        var singular = !_.isArray(bomIds);\n        bomIds = singular ? (bomIds ? [bomIds] : []) : bomIds.slice();\n\n        _.each(bomIds, function(result) {\n            console.log(\"unselecting bom: \"+result);\n            this.unselectWhere( {bomId: result} );\n        }, this);\n    },\n\n    getItemIdsForBom: function(bomId) {\n        return this.where({\n            bomId: bomId\n        }).map(function(result) {\n            return result.get(\"itemId\");\n        });\n    },\n\n    dispatchCallback: function(payload) {\n        var action = payload.action;\n        switch (action.type) {\n\n            case ActionConstants.SELECT_BOM_ITEM:\n                (function() {\n                    if (!this.validateAction(action, [\"bomId\", \"itemId\"])) {\n                        return;\n                    }\n\n                    if (action.attributes.select) {\n                        if (action.attributes.reset) {\n                            this.reset();\n                        }\n\n                        this.select(action.attributes.bomId, action.attributes.itemId);\n\n                    } else {\n                        if (action.attributes.reset) {\n                            this.reset();\n                        } else {\n                            this.unselect(action.attributes.bomId, action.attributes.itemId);\n                        }\n                    }\n                }).apply(this);\n                break;\n\n            case ActionConstants.REMOVE_BOM_ITEMS:\n                (function() {\n                    var items;\n                    var bomId;\n\n                    if (!this.validateAction(action, [\"bomId\", \"items\"])) {\n                        return;\n                    }\n\n                    bomId = action.attributes.bomId;\n                    items = action.attributes.items;\n                    if (!items.length) {\n                        return;\n                    }\n\n                    _.each(items, function(result) {\n                        var item = this.findWhere({\n                            bomId: bomId,\n                            itemId: result\n                        });\n                        this.remove(item);\n                    }, this);\n                }).apply(this);\n                break;\n\n            case ActionConstants.UNSELECT_BOM_ITEMS:\n                (function() {\n                    if (!this.validateAction(action)) {\n                        return;\n                    }\n\n                    this.reset();\n                }).apply(this);\n                break;\n\n            default:\n                // do nothing\n        }\n    }\n\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ActionConstants\":144,\"dispatcher/AppDispatcher\":152,\"underscore\":\"underscore\",\"utils/ExtendedCollection\":201}],98:[function(require,module,exports){\n\"use strict\";\n\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar Backbone = require(\"backbone\");\nvar CompanyMixin = require(\"utils/CompanyMixin\");\nvar UserInviteModel = require(\"models/UserInviteModel\");\n\nmodule.exports = Backbone.Collection.extend({\n\tmixins: [\n\t\tCompanyMixin\n\t],\n\n \tmodel: UserInviteModel,\n\n\turl: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/invite\";\n    },\n\n    comparator: function(first, second) {\n    \treturn (second.get(\"id\") || 0) - (first.get(\"id\") || 0);\n\t},\n\n    getNewInvite: function(){\n\t\tif(!this.newInvite) {\n\t\t\tthis.buildNewInvite();\n\t\t}\n\t\treturn this.newInvite;\n    },\n\n    buildNewInvite: function() {\n    \tthis.newInvite = new UserInviteModel();\n    \tthis.newInvite.setCompany(this.getCompany());\n\t\tthis.newInvite.on(\"sync\", function() {\n\t\t\tthis.add(this.newInvite.clone());\n\t\t\tvar attrs = {\n\t\t\t\tfirstName: this.newInvite.get(\"firstName\"),\n\t\t\t\tlastName: this.newInvite.get(\"lastName\"),\n\t\t\t\temail: this.newInvite.get(\"email\")\n\t\t\t};\n\t\t\tthis.newInvite.clear();\n\t\t\tthis.newInvite.set(attrs);\n\t\t\tthis.newInvite.set(\"state\", this.newInvite.STATE_SUCCESS);\n\t\t}.bind(this));\n    }\n\n});\n\n\n},{\"backbone\":\"backbone\",\"constants/ApiConstants\":145,\"models/UserInviteModel\":172,\"utils/CompanyMixin\":200}],99:[function(require,module,exports){\n\"use strict\";\n\nvar backboneMixin = require(\"backbone-react-component\");\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n    mixins: [backboneMixin],\n\n    render: function() {\n        return (\n            React.createElement(\"li\", {className: \"list-group-item\"}, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-12\"}, \n                        React.createElement(\"h5\", {className: \"list-group-item-heading\"}, \n                            this.getModel().get(\"firstName\") + \" \" + this.getModel().get(\"lastName\")\n                        ), \n                        React.createElement(\"p\", {className: \"list-group-item-text\"}, this.getModel().get(\"email\"))\n                    )\n                )\n            )\n        );\n    }\n});\n\n\n\n\n},{\"backbone-react-component\":2,\"react\":\"react\"}],100:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Modal = require(\"react-bootstrap\").Modal;\nvar Button = require(\"react-bootstrap\").Button;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\nvar SplitButton = require(\"react-bootstrap\").SplitButton;\nvar Input = require(\"react-bootstrap\").Input;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar TypeConstants = require(\"constants/TypeConstants\");\nvar InputConstants = require('constants/InputConstants');\n\nvar AddColumnModal = React.createClass({displayName: \"AddColumnModal\",\n\n  propTypes: {\n    index: React.PropTypes.number.isRequired,\n    onCancel: React.PropTypes.func.isRequired,\n    onSave: React.PropTypes.func.isRequired,\n    fields: React.PropTypes.array.isRequired,\n    allTypes: React.PropTypes.object.isRequired\n  },\n\n  getInitialState: function() {\n    return {\n      fieldId: FieldConstants.SELECT_FIELD.id,\n      typeId: TypeConstants.TEXT,\n      name: ''\n    };\n  },\n\n  /**\n   * @return {object}\n   */\n  render: function() {\n    var field;\n    var fieldsElement;\n    var fieldsOptions;\n    var fieldsTitle;\n    var nameInput;\n    var type;\n    var typesTitle;\n    var typesOptions;\n    var typesElement;\n\n    if (this.state.fieldId === FieldConstants.SELECT_FIELD.id) {\n      fieldsTitle = FieldConstants.SELECT_FIELD.name;\n    }\n    else if (this.state.fieldId === FieldConstants.CUSTOM_FIELD.id) {\n      fieldsTitle = FieldConstants.CUSTOM_FIELD.name;\n    }\n    else {\n      field = _.find(this.props.fields, function(result) {\n        return result.id === this.state.fieldId;\n      }, this);\n      fieldsTitle = field.name;\n    }\n\n    // create the list of fields\n    fieldsOptions = this.props.fields.map(function(result) {\n      return (\n        React.createElement(MenuItem, {\n          className: result.disabled ? \"disabled\" : \"\", \n          key: result.id, \n          eventKey: result.id}, \n          result.name)\n      );\n    });\n\n    fieldsElement = (\n      React.createElement(\"div\", {className: \"form-group col-md-12\"}, \n        React.createElement(\"label\", {className: \"control-label\"}, React.createElement(\"span\", null, \"Attribute\")), \n        React.createElement(\"div\", null, \n          React.createElement(SplitButton, {\n            bsStyle: \"default\", \n            title: fieldsTitle, \n            onSelect: this._onSelectField}, \n            fieldsOptions, \n            React.createElement(MenuItem, {divider: true}), \n            React.createElement(MenuItem, {eventKey: FieldConstants.CUSTOM_FIELD.id}, \"New Attribute\")\n          )\n        )\n      ));\n\n    type = this.props.allTypes.get( this.state.typeId );\n    typesTitle = type.get(\"name\");\n\n    // create the list of field types\n    typesOptions = this.props.allTypes.map(function(result) {\n      return (\n        React.createElement(MenuItem, {\n          key: result.id || result.cid, \n          eventKey: result.id || result.cid}, result.get(\"name\"))\n      );\n    });\n\n    typesElement = (\n      React.createElement(\"div\", {className: \"form-group col-md-4\"}, \n        React.createElement(\"label\", {className: \"control-label\"}, React.createElement(\"span\", null, \"Value Type\")), \n        React.createElement(\"div\", null, \n          React.createElement(SplitButton, {\n            bsStyle: \"default\", \n            title: typesTitle, \n            onSelect: this._onSelectType, \n            disabled: this.state.fieldId !== FieldConstants.CUSTOM_FIELD.id}, \n            typesOptions\n          )\n        )\n      ));\n\n    nameInput = (\n      React.createElement(Input, {\n        groupClassName: \"col-md-4\", \n        label: \"Display Name\", \n        type: \"text\", \n        onChange: this._onChangeName, \n        onKeyUp: this._onKeyUp, \n        value: this.state.name}));\n\n    return (\n      React.createElement(Modal, React.__spread({},  this.props, \n        {onRequestHide: this.props.onCancel, \n        bsStyle: \"primary\", \n        title: \"Add a column\", \n        animation: false, \n        className: \"modal-add-column\"}), \n        React.createElement(\"div\", {className: \"modal-body\"}, \n          React.createElement(\"form\", null, \n            React.createElement(\"div\", {className: \"row\"}, \n              fieldsElement, \n              typesElement, \n              nameInput\n            )\n          )\n        ), \n        React.createElement(\"div\", {className: \"modal-footer\"}, \n          React.createElement(Button, {onClick: this.props.onCancel}, \"Close\"), \n          React.createElement(Button, {bsStyle: \"primary\", \n            onClick: this._onSave, \n            disabled: !this.state.name}, \"Add\")\n        )\n      )\n      );\n  },\n\n  _onSelectField: function(id) {\n    var typeId;\n    var name;\n    var field;\n\n    if (id !== FieldConstants.CUSTOM_FIELD.id) {\n\n      field = _.find(this.props.fields, function(result) {\n        return result.id === id;\n      }, this);\n      if (!field || field.disabled) { return; }\n\n      name = field.name;\n      typeId = field.typeId;\n    }\n    else {\n      typeId = TypeConstants.TEXT;\n    }\n\n    this.setState({\n      fieldId: id,\n      name: name,\n      typeId: typeId\n    });\n  },\n\n  _onSelectType: function(id) {\n    this.setState({\n      typeId: id\n    })\n  },\n\n  _onChangeName: function(event) {\n    this.setState({\n      name: event.target.value\n    });\n  },\n\n  _onKeyUp: function(event) {\n    switch(event.keyCode) {\n      case InputConstants.ENTER:\n        this._onSave();\n        event.preventDefault();\n        break;\n\n      case InputConstants.ESC:\n        this.props.onCancel();\n        event.preventDefault();\n        break;\n    }\n  },\n\n\n  _onSave: function(event) {\n    this.props.onSave(\n      this.state.fieldId === FieldConstants.CUSTOM_FIELD.id ? undefined : this.state.fieldId,\n      this.state.typeId,\n      this.state.name,\n      this.props.index);\n  }\n\n});\n\nmodule.exports = AddColumnModal;\n\n\n},{\"constants/FieldConstants\":148,\"constants/InputConstants\":149,\"constants/TypeConstants\":150,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"underscore\":\"underscore\"}],101:[function(require,module,exports){\n\"use strict\";\n\nvar cx = require(\"react/lib/cx\");\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n    propTypes: {\n        type: React.PropTypes.string.isRequired,\n        index: React.PropTypes.string.isRequired,\n        onClick: React.PropTypes.func.isRequired,\n        sticky: React.PropTypes.bool\n    },\n\n\n    componentDidMount: function() {\n        var current = $(React.findDOMNode(this));\n        current.slideDown(\"fast\");\n        if(!this.props.sticky) {\n            current.delay(5000).fadeOut(600, function() {\n                this.onClick();\n            }.bind(this));\n        }\n    },\n\n    render: function() {\n        var classes = {\n            alert: true,\n            \"alert-dismissible\": true\n        };\n        classes[\"alert-\" + this.props.type] = true;\n        return (\n            React.createElement(\"div\", {className: cx(classes), role: \"alert\"}, \n                React.createElement(\"button\", {\n                    type: \"button\", \n                    onClick: this.onClick, \n                    className: \"close\", \n                    \"aria-label\": \"Close\"}, \n                    React.createElement(\"span\", {\"aria-hidden\": \"true\"}, \"×\")\n                ), \n                this.props.children\n            )\n        );\n    },\n\n    onClick: function() {\n        this.props.onClick(this.props.index);\n    }\n});\n\n\n},{\"react\":\"react\",\"react/lib/cx\":9}],102:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Alert = require(\"components/Alert.jsx\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n    getInitialState: function() {\n        return {\n            alerts: {}\n        };\n    },\n\n    componentDidMount: function() {\n        AppDispatcher.register((function(payload) {\n            if(!payload || !payload.action || !payload.action.type){\n                return;\n            }\n\n            if(payload.action.type === \"show-alert\"){\n                var newAlerts = _.clone(this.state.alerts);\n                newAlerts[_.uniqueId(\"alert_\")] = payload.alert;\n                this.setState({\n                    alerts: newAlerts\n                });\n            }\n        }).bind(this));\n    },\n\n    render: function() {\n        return (\n            React.createElement(\"div\", {id: \"alerts\", className: \"alerts\"}, \n                React.createElement(\"div\", {className: \"center-block\"}, \n                    this.renderAlerts()\n                )\n            )\n        );\n    },\n\n    renderAlerts: function() {\n        return _.first(_.map(this.state.alerts, function (element, index) {\n            return (\n                React.createElement(Alert, {type: element.type, onClick: this.onClick, index: index, sticky: element.sticky}, \n                    element.message\n                ));\n        }.bind(this)), 3);\n    },\n\n    onClick: function(index) {\n        var newAlerts = _.clone(this.state.alerts);\n        delete newAlerts[index];\n        this.setState({\n            alerts: newAlerts\n        });\n    }\n});\n\n\n},{\"components/Alert.jsx\":101,\"dispatcher/AppDispatcher\":152,\"react\":\"react\",\"underscore\":\"underscore\"}],103:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Modal = require(\"react-bootstrap\").Modal;\nvar Button = require(\"react-bootstrap\").Button;\nvar Navigation = require(\"react-router\").Navigation;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar BomActions = require(\"actions/BomActions\");\nvar BomExportStore = require(\"stores/BomExportStore\");\n\nfunction getState() {\n    return {\n        allExportBoms: BomExportStore\n    };\n}\n\nvar BomExportModal = React.createClass({displayName: \"BomExportModal\",\n\n    propTypes: {\n        onCancel: React.PropTypes.func.isRequired,\n        onDownload: React.PropTypes.func.isRequired\n    },\n\n    getInitialState: function() {\n        return getState();\n    },\n\n    componentDidMount: function() {\n        BomExportStore.on(\"add change remove\", this._onChange);\n    },\n\n    componentWillUnmount: function() {\n        BomExportStore.off(\"add change remove\", this._onChange);\n    },\n\n    /**\n     * Event handler for \"change\" events coming from the BomExportStore\n     */\n    _onChange: function(model, options) {\n        this.setState(getState());\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var exported = this.state.allExportBoms.last();\n        var status;\n        var message;\n        var title;\n        var downloadBtn;\n\n        if (exported) {\n            status = exported.get(\"status\");\n        }\n\n        if (status === \"ready\") {\n            title = \"Your export is ready!\";\n            downloadBtn = (\n                React.createElement(Button, {\n                    bsStyle: \"primary\", \n                    href: exported.get(\"url\"), \n                    target: \"_blank\", \n                    onClick: this.props.onDownload}, \n                React.createElement(Glyphicon, {glyph: \"download\"}), \" CSV\"));\n\n        }\n        else if (status === \"failed\") {\n            title = \"Sorry, something went wrong.\";\n            message = exported.get(\"message\");\n            downloadBtn = (\n                React.createElement(Button, {bsStyle: \"primary\", onClick: this._retry}, \n                React.createElement(\"span\", {className: \"glyphicon glyphicon-refresh\", \"aria-hidden\": \"true\"}), \" CSV\"));\n\n        }\n        else {\n            title = \"Your export is in progress...\";\n            downloadBtn = (\n                React.createElement(Button, {bsStyle: \"primary\", disabled: true}, \n                React.createElement(\"span\", {className: \"glyphicon glyphicon-refresh glyphicon-spin\", \"aria-hidden\": \"true\"}), \" CSV\"));\n        }\n\n        return (\n            React.createElement(Modal, React.__spread({},  this.props, \n                {onRequestHide: function(){}, \n                bsStyle: \"primary\", \n                backdrop: true, \n                title: title, \n                animation: true, \n                className: \"modal-export\"}), \n                React.createElement(\"div\", {className: \"modal-body\"}, message), \n                React.createElement(\"div\", {className: \"modal-footer\"}, \n                  React.createElement(Button, {ref: \"cancelBtn\", onClick: this.props.onCancel}, \"Cancel\"), \n                  downloadBtn\n                )\n            )\n        );\n    },\n\n    _retry: function() {\n        BomActions.retryExportItems();\n    }\n});\n\nmodule.exports = BomExportModal;\n\n\n},{\"actions/BomActions\":79,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"stores/BomExportStore\":188}],104:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar BomActions = require(\"actions/BomActions\");\nvar BomFieldInput = require(\"components/BomFieldInput.jsx\");\nvar TypeConstants = require(\"constants/TypeConstants\");\n\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar cx = require(\"react/lib/cx\");\n\nvar BomField = React.createClass({displayName: \"BomField\",\n\n    propTypes: {\n        index: React.PropTypes.number.isRequired,\n        header: React.PropTypes.object.isRequired,\n        field: React.PropTypes.object.isRequired,\n        onAddColumn: React.PropTypes.func.isRequired,\n        onEditColumn: React.PropTypes.func.isRequired,\n        readonly: React.PropTypes.bool\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var header = this.props.header;\n        var attribute = this.props.header ? this.props.header.attribute : undefined;\n        var spinner;\n\n        // Show spinner if the value is read only but not because of parent\n        if (!this.props.readonly && this._isReadOnly()) {\n            spinner = (\n                React.createElement(Glyphicon, {\n                    className: cx({\n                        \"glyphicon-spin\" : attribute && attribute.isSyncing(),\n                        \"pull-right\": true\n                    }), \n                    bsSize: \"small\", \n                    bsStyle: \"default\", \n                    glyph: \"repeat\"}));\n        }\n\n        return (\n            React.createElement(\"th\", {className: cx({\n                \"bom-field\": true,\n                \"bom-field-boolean\": this.props.field.get(\"typeId\") === TypeConstants.BOOLEAN,\n                \"editing\": false,\n                \"readonly\": this._isReadOnly() })}, \n                spinner, \n                React.createElement(\"div\", {className: \"btn-add-column-wrapper btn-add-column-left btn-circle\"}, \n                    React.createElement(Button, {\n                        className: \"btn-circle btn-add-column\", \n                        bsStyle: \"primary\", \n                        onClick: this._onAddColumnBefore}, \n                        React.createElement(Glyphicon, {\n                            glyph: \"plus\"})\n                    )\n                ), \n                React.createElement(\"div\", {className: \"btn-add-column-wrapper btn-add-column-right btn-circle\"}, \n                    React.createElement(Button, {\n                        className: \"btn-circle btn-add-column\", \n                        bsStyle: \"primary\", \n                        onClick: this._onAddColumnAfter}, \n                        React.createElement(Glyphicon, {\n                            glyph: \"plus\"})\n                    )\n                ), \n                React.createElement(\"div\", {className: \"btn-group column-name\"}, \n                    header.name\n                ), \n                React.createElement(ButtonToolbar, null, \n                    React.createElement(Button, {className: \"btn-nobg\", onClick: this._onEditColumn, disabled: this._isReadOnly()}, \n                        React.createElement(Glyphicon, {glyph: \"pencil\"})\n                    )\n                )\n            )\n        );\n    },\n\n    /**\n     * Check if value is read only\n     */\n    _isReadOnly: function() {\n        var attribute = this.props.header ? this.props.header.attribute : undefined;\n        // TODO need to pass attribute object in case it's saving\n        return this.props.readonly || (attribute && (attribute.isNew() || attribute.isDirty()));\n    },\n\n    _onAddColumnBefore: function(event) {\n        this.props.onAddColumn(this.props.index);\n    },\n\n    _onAddColumnAfter: function(event) {\n        this.props.onAddColumn(this.props.index+1);\n    },\n\n    _onEditColumn: function(index) {\n        this.props.onEditColumn(this.props.index);\n    },\n\n});\n\nmodule.exports = BomField;\n\n\n},{\"actions/BomActions\":79,\"components/BomFieldInput.jsx\":105,\"constants/TypeConstants\":150,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react/lib/cx\":9}],105:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\n\nvar Input = require(\"react-bootstrap\").Input;\nvar SplitButton = require(\"react-bootstrap\").SplitButton;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Button = require(\"react-bootstrap\").Button;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar TypeConstants = require(\"constants/TypeConstants\");\n\nvar BomFieldInput = React.createClass({displayName: \"BomFieldInput\",\n\n  propTypes: {\n    onSave: React.PropTypes.func.isRequired,\n    onCancel: React.PropTypes.func.isRequired,\n    onRemove: React.PropTypes.func.isRequired,\n    allFields: React.PropTypes.object.isRequired,\n    allTypes: React.PropTypes.object.isRequired,\n    field: React.PropTypes.object\n  },\n\n  getInitialState: function(props) {\n    props = props || this.props;\n\n    var id;\n    var name;\n    var type;\n    var field = props.field;\n\n    if (field) {\n      id = field.id;\n      name = field.get(\"name\") || \"\";\n      type = field.get(\"typeId\");\n    }\n    else {\n      id = FieldConstants.SELECT_FIELD.id;\n      name = FieldConstants.SELECT_FIELD.name;\n      type = undefined;\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    this.setState(this.getInitialState(nextProps));\n  },\n\n  /**\n   * @return {object}\n   */\n  render: function() /*object*/ {\n    // var allFields = this.props.allFields;\n    // var allTypes = this.props.allTypes;\n    var id = this.state.id;\n    var name = this.state.name;\n    var type = this.state.type;\n    var fieldOptions;\n    var typeOptions;\n    var nameInput;\n    var typeSelect;\n    var removeButton;\n\n    //create the list of field names\n    fieldOptions = this.props.allFields.map(function(result) {\n      return (\n        React.createElement(MenuItem, {\n          key: result.id || result.cid, \n          eventKey: result.id || result.cid}, result.get(\"name\"))\n      );\n    });\n\n    typeOptions = this.props.allTypes.map(function(result) {\n      return (\n        React.createElement(MenuItem, {\n          key: result.id || result.cid, \n          eventKey: result.id || result.cid}, result.get(\"name\"))\n      );\n    });\n\n    if (id === FieldConstants.CUSTOM_FIELD.id) {\n      nameInput = React.createElement(Input, {\n        label: \"Field Name\", \n        labelClassName: \"sr-only\", \n        className: \"col-md-1\", \n        type: \"text\", \n        onChange: this._onChangeName, \n        value: name})\n    }\n\n    if (id !== FieldConstants.SELECT_FIELD.id) {\n      typeSelect = React.createElement(SplitButton, {\n        bsStyle: \"default\", \n        title: type ? this.props.allTypes.get(type).get(\"name\") : \"Select a data type\", \n        onSelect: this._onSelectType, \n        disabled: id !== FieldConstants.CUSTOM_FIELD.id}, \n        typeOptions\n      )\n\n      if (this.props.field) {\n        removeButton = React.createElement(Button, {\n          bsStyle: \"danger\", \n          onClick: this._onRemove}, \n          \"Remove\"\n        );\n      }\n    }\n\n    return (\n      React.createElement(\"div\", null, \n        React.createElement(\"form\", {className: \"form-inline\"}, \n          React.createElement(SplitButton, {\n            bsStyle: \"default\", \n            title: id === FieldConstants.CUSTOM_FIELD.id ? FieldConstants.CUSTOM_FIELD.name : name, \n            onSelect: this._onSELECT_FIELD}, \n            fieldOptions, \n            React.createElement(MenuItem, {divider: true}), \n            React.createElement(MenuItem, {eventKey: FieldConstants.CUSTOM_FIELD.id}, \"Custom\")\n          ), \n          nameInput, \n          typeSelect, \n          React.createElement(ButtonToolbar, {className: \"pull-right\"}, \n            removeButton, \n            React.createElement(Button, {\n              bsStyle: \"default\", \n              onClick: this._onCancel}, \n              \"Cancel\"\n            ), \n            React.createElement(Button, {\n              bsStyle: \"primary\", \n              onClick: this._onSave, \n              disabled: id === FieldConstants.SELECT_FIELD.id ||\n                (id === FieldConstants.CUSTOM_FIELD.id &&\n                (!name || !type))}, \n              \"Save\"\n            )\n          )\n        )\n      )\n    );\n  },\n\n  _onSELECT_FIELD: function(id) {\n    var field;\n\n    if (id === FieldConstants.CUSTOM_FIELD.id) {\n      this.setState({\n        id: FieldConstants.CUSTOM_FIELD.id,\n        name: \"\",\n        type: FieldConstants.CUSTOM_FIELD.type\n      })\n    }\n    else {\n      field = this.props.allFields.get(id);\n      this.setState({\n        id: field.id,\n        name: field.get(\"name\"),\n        type: field.get(\"typeId\")\n      })\n    }\n  },\n\n  /**\n   * @param {object} event\n   */\n  _onChangeName: function(/*object*/ event) {\n    this.setState({\n      name: event.target.value\n    });\n  },\n\n  _onSelectType: function(id) {\n    this.setState({\n      type: id\n    })\n  },\n\n  _onSave: function() {\n    this.props.onSave(this.state.id, this.state.name, this.state.type);\n    this.setState(FieldConstants.SELECT_FIELD);\n  },\n\n  _onCancel: function() {\n    this.props.onCancel()\n    this.setState(FieldConstants.SELECT_FIELD);\n  },\n\n  _onRemove: function() {\n    this.props.onRemove();\n    this.setState(FieldConstants.SELECT_FIELD);\n  }\n\n});\n\nmodule.exports = BomFieldInput;\n\n\n},{\"constants/FieldConstants\":148,\"constants/TypeConstants\":150,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],106:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\nvar DropdownButton = require(\"react-bootstrap\").DropdownButton;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Button = require(\"react-bootstrap\").Button;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar BomImportAttribute = React.createClass({displayName: \"BomImportAttribute\",\n\n    propTypes: {\n        attribute: React.PropTypes.object.isRequired,\n        index: React.PropTypes.number.isRequired,\n        onSave: React.PropTypes.func.isRequired,\n        onChange: React.PropTypes.func.isRequired,\n        onEdit: React.PropTypes.func.isRequired,\n        onSkip: React.PropTypes.func.isRequired,\n        fields: React.PropTypes.array.isRequired,\n        allTypes: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        var name = this.props.attribute.name;\n\n        return {\n            name: name\n        };\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        switch(this.props.attribute.status) {\n            case \"readonly\":\n                return this.renderReadOnly();\n\n            case \"active\":\n                return this.renderDefault(true);\n\n            case \"saved\":\n                return this.renderSaved();\n\n            case \"skipped\":\n                return this.renderSkipped();\n\n            default:\n                return this.renderDefault(false);\n        }\n    },\n\n    renderReadOnly: function() {\n        //var name = this._getName();\n        var name = this.state.name;\n\n        return (\n            React.createElement(\"th\", {className: \"readonly\"}, \n                React.createElement(\"p\", null, name), \n                React.createElement(\"span\", null, \"(autogenerated)\")\n            ));\n    },\n\n    renderDefault: function(active) {\n        var name = this.state.name;\n        var attribute = this.props.attribute;\n        var field;\n        var fieldElement;\n        var attributeElement;\n        var buttonToolbar;\n\n        // Find the best matching field for this attribute\n        if (attribute.fieldId) {\n            if (attribute.fieldId === FieldConstants.CUSTOM_FIELD.id) {\n                field = FieldConstants.CUSTOM_FIELD;\n            }\n            else {\n                field = _.find(this.props.fields, function(result) {\n                    return result.id === attribute.fieldId;\n                }, this);\n            }\n        }\n\n        // No match found, we have a custom column\n        if (!field || field.id === FieldConstants.CUSTOM_FIELD.id) {\n\n            fieldElement = this.renderField(\"New Column\");\n\n            if (name) {\n                attributeElement = this.renderAttribute( name );\n            }\n\n            buttonToolbar = this.renderMatchButtons( !!name );\n        }\n        // Found a matching field\n        else {\n            if (!name) {\n                fieldElement = this.renderField( field.name );\n                buttonToolbar = this.renderMatchButtons( true );\n            }\n            // If the imported name doesn't match the field's main name\n            // let the user pick between the two\n            else if (field.name !== name) {\n                fieldElement = this.renderField( field.name, \"(our column name)\" );\n                attributeElement = this.renderAttribute( name, \"(your column name)\" );\n                buttonToolbar = this.renderDiffButtons( field.name, name );\n            }\n            // If the imported name match the main field name, use it\n            else {\n                fieldElement = this.renderField( field.name, \"(yours and ours)\" );\n                buttonToolbar = this.renderMatchButtons( !!name );\n            }\n        }\n\n        return (\n            React.createElement(\"th\", {className: active?\"active\":\"default\"}, \n                fieldElement, \n                attributeElement, \n                buttonToolbar\n            )\n        );\n    },\n\n    renderSkipped: function() {\n        var name = this.state.name;\n\n        return (\n            React.createElement(\"th\", {className: \"skipped\"}, \n                React.createElement(\"p\", null, name), \n                React.createElement(Button, {bsStyle: \"default\", onClick: this.onCancelSkip}, \"Unskip\")\n            ));\n    },\n\n    renderSaved: function() {\n        //var name = this.state.savedName;\n        var name = this.props.attribute.savedName;\n\n        return (\n            React.createElement(\"th\", {className: \"saved\"}, \n                React.createElement(\"p\", null, name), \n                React.createElement(Button, {bsStyle: \"default\", onClick: this.onCancelSave}, \"Edit\")\n            ));\n    },\n\n    renderField: function(title, label) {\n        var labelElement;\n\n        var options = this.props.fields.map(function(result) {\n            return (\n                React.createElement(MenuItem, {\n                    className: result.disabled ? \"disabled\" : \"\", \n                    key: result.id || result.cid, \n                    eventKey: result.id || result.cid}, result.name));\n        });\n\n        if (label) {\n            labelElement = (React.createElement(\"div\", null, React.createElement(\"label\", null, label)));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"form-group\"}, \n                React.createElement(DropdownButton, {\n                    bsStyle: \"default\", \n                    title: title, \n                    onSelect: this.onSelectField}, \n                        options, \n                        React.createElement(MenuItem, {divider: true}), \n                        React.createElement(MenuItem, {eventKey: FieldConstants.CUSTOM_FIELD.id}, \"New Column\")\n                ), \n                labelElement\n            ));\n    },\n\n    renderAttribute: function(name, label) {\n        var nameElement;\n        var labelElement;\n\n        if (this.state.isEditing) {\n            nameElement = (\n                React.createElement(TextInput, {\n                    className: \"edit\", \n                    onSave: this.onSaveName, \n                    value: name}));\n        }\n        else {\n            nameElement = (\n                React.createElement(ButtonToolbar, null, \n                    React.createElement(\"div\", {className: \"btn-group attribute-name\"}, \n                        name || \"Untitled\"\n                    ), \n                    React.createElement(Button, {className: \"btn-nobg\", onClick: this.onEditName}, \n                        React.createElement(Glyphicon, {glyph: \"pencil\"})\n                    )\n                ));\n        }\n\n        if (label) {\n            labelElement = (React.createElement(\"div\", null, React.createElement(\"label\", null, label)));\n        }\n\n        return  (\n            React.createElement(\"div\", {className: \"form-group\"}, \n                nameElement, \n                labelElement\n            ));\n    },\n\n    renderMatchButtons: function( canSave ) {\n        return (\n            React.createElement(ButtonToolbar, null, \n                React.createElement(Button, {bsStyle: \"primary\", onClick: this.onSave, disabled: !canSave}, \"Save\"), \n                React.createElement(Button, {bsStyle: \"default\", onClick: this.onSkip}, \"Skip\")\n            ));\n    },\n\n    renderDiffButtons: function(ours, yours) {\n        return (\n            React.createElement(ButtonToolbar, null, \n                React.createElement(Button, {bsStyle: \"primary\", onClick: this.onSaveOurs}, \"Ours\"), \n                React.createElement(Button, {bsStyle: \"default\", onClick: this.onSave, disabled: !yours}, \"Yours\"), \n                React.createElement(Button, {bsStyle: \"default\", onClick: this.onSkip}, \"Skip\")\n            ));\n    },\n\n    onSelectField: function(fieldId) {\n        // var field;\n\n        // // If the name is not set, and the selected field isn't the Custom field\n        // if (!this.state.name && fieldId !== FieldConstants.CUSTOM_FIELD.id) {\n        //     // Get the field\n        //     field = _.find(this.props.fields, function(result) {\n        //         return result.id === fieldId;\n        //     }, this);\n\n        //     // Assign the name to the attribute\n        //     this.onSaveName( field.name );\n        // }\n        if (FieldConstants.CUSTOM_FIELD.id !== fieldId) {\n            var field = _.findWhere(this.props.fields, {id: fieldId});\n            if (!field || field.disabled) return;\n        }\n\n        this.props.onChange(this.props.index, fieldId);\n    },\n\n    onEditName: function(event) {\n        this.setState({\n            isEditing: true\n        })\n    },\n\n    onSaveName: function(name) {\n        this.setState({\n            name: name,\n            isEditing: false\n        });\n    },\n\n    onSkip: function(event) {\n        this.props.onSkip( this.props.index, true );\n        // this.setState({\n        //     isSkipped: true\n        // });\n    },\n\n    onCancelSkip: function(event) {\n        this.props.onSkip( this.props.index, false );\n        // this.setState({\n        //     isSkipped: false\n        // });\n    },\n\n    onSaveOurs: function(event) {\n        var field = _.find(this.props.fields, function(result) {\n            return result.id === this.props.attribute.fieldId;\n        }, this);\n        if (!field) return;\n\n        // this.setState({\n        //     name: field.name\n        // })\n\n        this.onSaveAttribute(field.name);\n    },\n\n    onSave: function(event) {\n        var name = this.state.name;\n        var fieldId = this.props.attribute.fieldId;\n        var field;\n\n        // If the name is not set, and the selected field isn't the Custom field\n        if (!name && fieldId !== FieldConstants.CUSTOM_FIELD.id) {\n            // Get the field\n            field = _.find(this.props.fields, function(result) {\n                return result.id === fieldId;\n            });\n\n            // Assign the name to the attribute\n            if (field) {\n                name = field.name\n            }\n        }\n\n        if (name) {\n            this.onSaveAttribute(name);\n        }\n    },\n\n    onSaveAttribute: function(name) {\n        var fieldId = this.props.attribute.fieldId;\n\n        // If user manually chose the custom field,\n        // pass undefined to create a new field\n        if (fieldId === FieldConstants.CUSTOM_FIELD.id) {\n            fieldId = undefined;\n        }\n\n        this.props.onSave( this.props.index, name, fieldId );\n    },\n\n    onCancelSave: function() {\n        this.props.onEdit( this.props.index );\n    },\n\n});\n\nmodule.exports = BomImportAttribute;\n\n\n},{\"components/TextInput.jsx\":139,\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"underscore\":\"underscore\"}],107:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\n\nvar BomImportItem = React.createClass({displayName: \"BomImportItem\",\n\n    propTypes: {\n        item: React.PropTypes.object.isRequired,\n        attributes: React.PropTypes.array.isRequired\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var item = this.props.item;\n        var attributes = this.props.attributes;\n\n        var values = attributes.map(function(attribute) {\n            var value = item.getValueForAttribute(attribute.id);\n            return React.createElement(\"td\", {className: attribute.status, key: attribute.id}, value ? value.get(\"content\") : \"\")\n        });\n\n        return (\n            React.createElement(\"tr\", null, values)\n        );\n    }\n\n});\n\nmodule.exports = BomImportItem;\n\n\n},{\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],108:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Glyphicon = require('react-bootstrap').Glyphicon;\nvar OverlayTrigger = require('react-bootstrap').OverlayTrigger;\nvar Tooltip = require('react-bootstrap').Tooltip;\n\nvar BomItemField = require(\"components/BomItemField.jsx\");\nvar BomActions = require(\"actions/BomActions\");\nvar BomAttributeModel = require(\"models/BomAttributeModel\");\nvar InputConstants = require('constants/InputConstants');\n\nvar cx = require(\"react/lib/cx\");\n\nvar BomItem = React.createClass({displayName: \"BomItem\",\n\n    propTypes: {\n        bom: React.PropTypes.object.isRequired,\n        item: React.PropTypes.object.isRequired,\n        headers: React.PropTypes.array.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        selected: React.PropTypes.bool.isRequired,\n        readonly: React.PropTypes.bool,\n        sequence: React.PropTypes.number.isRequired\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var headers = this.props.headers;\n        var allFields = this.props.allFields;\n        var icon;\n\n        // Only show when syncing as we are not saving until the first value\n        if (item.isSyncing()) {\n            icon = React.createElement(Glyphicon, {\n              className: \"glyphicon-spin\", \n              bsSize: \"small\", \n              bsStyle: \"default\", \n              glyph: \"repeat\"});\n        }\n        else if (!item.isValid()) {\n            icon = (\n                React.createElement(OverlayTrigger, {placement: \"top\", overlay: \n                    React.createElement(Tooltip, null, \n                        item.getValidationErrorMessages().map(function(msg, index) {\n                            return React.createElement(\"div\", {key: index}, msg)\n                        })\n                    )}, \n                    React.createElement(Glyphicon, {\n                        bsSize: \"small\", \n                        bsStyle: \"warning\", \n                        glyph: \"warning-sign\"})\n                ));\n        }\n\n        return (\n          React.createElement(\"tr\", {className: cx({\n                \"active\": this.props.selected,\n                \"readonly\": this._isReadOnly() }), \n              onClick: this._onSelect}, \n\n            React.createElement(\"td\", {className: cx({\n                \"readonly\": this._isReadOnly(),\n                \"bom-table-index\": true,\n                \"text-right\": true })}, \n                React.createElement(\"span\", {className: \"pull-left\"}, icon), this.props.sequence\n            ), \n\n            headers.map(function(result, index) {\n              return React.createElement(BomItemField, {\n                ref: \"value-\" + result.fieldId, \n                key: result.fieldId, \n                value: bom.getItemValueForField(item.id || item.cid, result.fieldId), \n                field: allFields.get(result.fieldId), \n                readonly: this._isReadOnly(), \n                onSave: this._saveValue, \n                onNext: this._editNextValue});\n            }, this)\n\n          )\n        );\n    },\n\n    _isReadOnly: function() {\n        var item = this.props.item;\n        return this.props.readonly || (item && item.isSyncing());\n    },\n\n    _onSelect: function() {\n        if (this._isReadOnly()) { return; };\n\n        BomActions.selectItem(\n            this.props.bom.id || this.props.bom.cid,\n            this.props.item.id || this.props.item.cid,\n            !this.props.selected);\n    },\n\n    _editNextValue: function(fieldId) {\n        var next;\n        var headers = this.props.headers;\n\n        // get the value to the left of the value with field id\n        var current = _.findIndex(headers, function(header) {\n            return header.fieldId === fieldId;\n        });\n\n        if (!headers[current+1]) { return; }\n        next = \"value-\" + headers[current+1].fieldId;\n\n        if (this.refs[next]) {\n            this.refs[next].setEditing(true);\n        }\n\n    },\n\n    _saveValue: function(fieldId, content) {\n        var header;\n        var attribute = this.props.bom.getAttributeForField(fieldId)\n\n        // If an attribute doesn't exist, pass the values to create a new one\n        if (!attribute) {\n            // Get the header for this field id (to find its name)\n            header = this._getHeaderForField(fieldId);\n            if (!header) { return; }\n\n            attribute = {\n                fieldId: fieldId,\n                name: header.name\n            }\n        }\n\n        BomActions.updateItem(\n            this.props.bom.id || this.props.bom.cid,\n            this.props.item.id || this.props.item.cid,\n            attribute,\n            content);\n\n        this.forceUpdate();\n    },\n\n    _getHeaderForField: function(fieldId) {\n        return _.findWhere(this.props.headers, {\n            fieldId: fieldId\n        });\n    }\n\n});\n\nmodule.exports = BomItem;\n\n\n},{\"actions/BomActions\":79,\"components/BomItemField.jsx\":111,\"constants/InputConstants\":149,\"models/BomAttributeModel\":160,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react/lib/cx\":9,\"underscore\":\"underscore\"}],109:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar CommentItem = require(\"components/CommentItem.jsx\");\nvar TextInput = require(\"components/TextInput.jsx\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\nvar BomActions = require(\"actions/BomActions\");\n\nvar BomItemComments = React.createClass({displayName: \"BomItemComments\",\n\n    propTypes: {\n        bom: React.PropTypes.object,\n        item: React.PropTypes.object,\n        active: React.PropTypes.bool\n    },\n\n    getInitialState: function() {\n        return {\n            isAdding: false\n        };\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n        this._init();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n\n        this._init();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _init: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var changes = this.props.changes;\n\n        if (!bom || !item || !this.props.active || item.getComments().hasFetched() || item.getComments().isLoaded()) { return; }\n\n        BomActions.fetchItemComments(bom.id, item.id, 10);\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var newComment;\n        var spinner;\n        var more;\n\n        if (!bom || !item) {\n            return ( React.createElement(\"div\", null) );\n        }\n\n        // Create the new BoM item if + was clicked\n        if (this.state.isAdding) {\n            newComment = (React.createElement(\"tr\", null, \n                    React.createElement(\"td\", null, \n                        React.createElement(TextInput, {\n                            type: \"textarea\", \n                            className: \"edit\", \n                            onSave: this._onSaveNew, \n                            onCancel: this._onCancelNew, \n                            value: \"\", \n                            placeholder: \"Enter your comment\"})\n                    ), \n                    React.createElement(\"td\", {className: \"compact\"}, \n                        React.createElement(Button, {\n                            className: \"btn-nobg\", \n                            bsStyle: \"danger\", \n                            bsSize: \"small\", \n                            onClick: this._onCancelNew}, \n                            React.createElement(Glyphicon, {glyph: \"remove\"})\n                        )\n                    )\n                ));\n        }\n        else {\n            newComment = (React.createElement(\"tr\", null, \n                    React.createElement(\"td\", {colSpan: \"2\", onClick: this._onAdd}, \n                        React.createElement(ButtonToolbar, {className: \"pull-right btn-toolbar-right\"}, \n                            React.createElement(Button, {\n                                className: \"btn-nobg\", \n                                bsStyle: \"default\", \n                                bsSize: \"small\", \n                                onClick: this._onAdd}, \n                                React.createElement(Glyphicon, {glyph: \"plus\"})\n                            )\n                        )\n                    )\n                ));\n        }\n\n        if (item.getComments().isFetching()) {\n            spinner = (\n                React.createElement(\"tr\", {key: \"spinner\"}, \n                    React.createElement(\"td\", {colSpan: \"2\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n        }\n        else if (!item.getComments().isLoaded()) {\n            more = (\n                React.createElement(\"tr\", {key: \"more\"}, \n                    React.createElement(\"td\", {colSpan: \"2\", className: \"text-center\"}, \n                        React.createElement(Button, {bsStyle: \"link\", onClick: this._loadPrevious}, \"load previous\")\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"row content scrollable\"}, \n                React.createElement(\"div\", {className: \"wrapper col-md-12\"}, \n                    React.createElement(Table, {className: \"comment-table\", striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                        React.createElement(\"tbody\", null, \n                            newComment, \n                            item.getComments().map(function(comment, index) {\n                                return (React.createElement(CommentItem, {\n                                    key: comment.id || comment.cid, \n                                    comment: comment, \n                                    onSave: this._onSaveEdit, \n                                    onRemove: this._onRemove}));\n                            }, this), \n                            spinner, \n                            more\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _onAdd: function(event) {\n        this.setState({\n            isAdding: true,\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n    },\n\n    _onCancelNew: function(event) {\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSaveNew: function(body) {\n        var bom = this.props.bom;\n        var item = this.props.item;\n\n        body = body || \"\";\n        body = body.trim();\n\n        if (body) {\n            BomActions.createItemComment(bom.id || bom.cid, item.id || item.cid, body);\n        }\n\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSaveEdit: function(commentId, body) {\n        var bom = this.props.bom;\n        var item = this.props.item;\n\n        BomActions.updateItemComment(bom.id || bom.cid, item.id || item.cid, commentId, body);\n    },\n\n    _onRemove: function(commentId) {\n        var bom = this.props.bom;\n        var item = this.props.item;\n\n        BomActions.destroyItemComment(bom.id || bom.cid, item.id || item.cid, commentId);\n    },\n\n    _loadPrevious: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n\n        BomActions.fetchItemComments(bom.id || bom.cid, item.id || item.cid, 10);\n    }\n});\n\nmodule.exports = BomItemComments;\n\n\n},{\"actions/BomActions\":79,\"components/CommentItem.jsx\":120,\"components/TextInput.jsx\":139,\"constants/ChangeConstants\":147,\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],110:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\n\nvar BomItemDetails = React.createClass({displayName: \"BomItemDetails\",\n\n    propTypes: {\n        allFields: React.PropTypes.object.isRequired,\n        allTypes: React.PropTypes.object.isRequired,\n        item: React.PropTypes.object,\n        bom: React.PropTypes.object\n    },\n\n    componentDidMount: function() {\n        if (this.props.item) {\n            this._addScroll();\n        }\n    },\n\n    componentWillUnmount: function() {\n        var niceScroll = this._getScroll();\n        if (niceScroll) {\n            niceScroll.remove();\n        }\n    },\n\n    componentWillUpdate: function(nextProps) {\n        if (this.props.item && !this.props.item) {\n            this._removeScroll();\n        }\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        var niceScroll = this._getScroll();\n        if (this.props.item) {\n            if (!prevProps.item) {\n                this._addScroll();\n            }\n            else if (niceScroll) {\n                niceScroll.resize();\n            }\n        }\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).find(\"div.scrollable\").niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        var niceScroll = this._getScroll();\n        if (niceScroll) {\n            niceScroll.remove();\n        }\n    },\n\n    _getScroll: function() {\n        return $(this.getDOMNode()).find(\"div.scrollable\").getNiceScroll();\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var fieldIds;\n        var attributes;\n        var element;\n        var description;\n        var sku;\n        var id;\n\n        if (!item) {\n            element = (\n                React.createElement(\"div\", null, \n                    React.createElement(\"h1\", null, \"Component\"), \n                    React.createElement(\"div\", null, \"No selected component.\")\n                )\n            );\n        }\n        else {\n            fieldIds = [\n                FieldConstants.TYPE,\n                FieldConstants.VALUE,\n                FieldConstants.VOLT,\n                FieldConstants.TOLERANCE,\n                FieldConstants.TEMP_COEFF,\n                FieldConstants.PACKAGE];\n\n            id = bom.getItemValueForField(item.id || item.cid, FieldConstants.ID);\n            sku = bom.getItemValueForField(item.id || item.cid, FieldConstants.SKU);\n            description = bom.getItemValueForField(item.id || item.cid, FieldConstants.DESCRIPTION);\n\n            element = (\n                React.createElement(\"div\", {className: \"full-height\"}, \n                    React.createElement(\"h1\", null, \"Component \", sku ? sku.get(\"content\") : (id ? id.get(\"content\") : undefined)), \n                    React.createElement(\"div\", {className: \"scrollable\"}, \n                        React.createElement(\"div\", {className: \"wrapper\"}, \n                            React.createElement(\"p\", null, React.createElement(\"strong\", null, description ? description.get(\"content\") : undefined)), \n                            React.createElement(Table, {condensed: true}, \n                                React.createElement(\"tbody\", null, \n                                    fieldIds.map(function(result) {\n                                        var value = bom.getItemValueContentForField(item.id || item.cid, result);\n                                        return (\n                                            React.createElement(\"tr\", {key: result}, \n                                                React.createElement(\"td\", null, this.props.allFields.get(result).get(\"name\")), \n                                                React.createElement(\"td\", null, value)\n                                            ));\n                                    }, this)\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n        }\n\n        return (\n            React.createElement(\"div\", {id: \"component-details\", className: \"full-height col-md-3\"}, \n                element\n            )\n        );\n    }\n});\n\nmodule.exports = BomItemDetails;\n\n\n},{\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],111:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\n\nvar TextInput = require(\"components/TextInput.jsx\");\nvar TypeConstants = require(\"constants/TypeConstants\");\nvar Input = require(\"react-bootstrap\").Input;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar cx = require(\"react/lib/cx\");\n\nvar BomItemField = React.createClass({displayName: \"BomItemField\",\n\n    propTypes: {\n        value: React.PropTypes.object,\n        field: React.PropTypes.object.isRequired,\n        onSave: React.PropTypes.func.isRequired,\n        onNext: React.PropTypes.func,\n        readonly: React.PropTypes.bool\n    },\n\n    getInitialState: function() {\n        return {\n            isEditing: false\n        };\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var value = this.props.value;\n        var content = value ? value.get(\"content\") : undefined;\n        var field = this.props.field;\n        var item;\n        var spinner;\n\n        if (this.state.isEditing) {\n            switch (field.get(\"typeId\")) {\n                case TypeConstants.TEXT:\n                case TypeConstants.NUMBER:\n                    item = this.renderTextInput(content, this._onSave);\n                    break;\n\n                case TypeConstants.BOOLEAN:\n                    item = this.renderBooleanInput(content, this._onSave);\n                    break;\n            }\n        }\n        else {\n            switch (field.get(\"typeId\")) {\n                case TypeConstants.TEXT:\n                case TypeConstants.NUMBER:\n                    item = this.renderText(content);\n                    break;\n\n                case TypeConstants.BOOLEAN:\n                    item = this.renderBooleanInput(content, this._onSave);\n                    break;\n            }\n        }\n\n        // Show spinner if the value is read only but not because of parent\n        if (!this.props.readonly && this._isReadOnly()) {\n            spinner = (\n                React.createElement(Glyphicon, {\n                    className: cx({\n                        \"glyphicon-spin\" : value.isSyncing(),\n                        \"pull-right\": true}), \n                    bsSize: \"small\", \n                    bsStyle: \"default\", \n                    glyph: \"repeat\"}));\n        }\n\n        return (\n            React.createElement(\"td\", {className: cx( {\n                  \"edit\": this.state.isEditing,\n                  \"readonly\": this._isReadOnly(),\n                  \"invalid\": value && !value.isValid()\n                }), \n                onClick: this.onClick}, \n                spinner, \n                item\n            )\n        );\n    },\n\n    /**\n     * Render a text value.\n     */\n    renderText: function(content) {\n        return (\n            React.createElement(\"span\", null, content));\n    },\n\n    /**\n     * Render input field for a text value.\n     */\n    renderTextInput: function(content, onSave) {\n        return (\n            React.createElement(TextInput, {\n                className: \"edit\", \n                onSave: this._onSave, \n                onNext: this._onNext, \n                onCancel: this._onCancel, \n                value: content}));\n    },\n\n    /**\n     * Render input field for a boolean value.\n     */\n    renderBooleanInput: function(content, onSave) {\n        return (\n            React.createElement(Input, {\n                type: \"checkbox\", labelClassName: \"sr-only\", \n                onChange: onSave.bind(this, !content), \n                checked: content, readOnly: true}));\n    },\n\n    setEditing: function(editing) {\n        this.setState({\n            isEditing: editing\n        });\n    },\n\n    /**\n     * Check if value is read only\n     * Readonly if readonly is true in properties\n     * or if the value is dirty or new\n     */\n    _isReadOnly: function() {\n        var value = this.props.value;\n        return this.props.readonly || (value && (value.isDirty() || value.isNew()));\n    },\n\n    /**\n     * Edit on doubleclick\n     */\n    onClick: function(event) {\n        // If read only, do nothing\n        if (this._isReadOnly()) { return; }\n\n        this.setState({isEditing: true});\n    },\n\n    /**\n     * Cancel editing value\n     */\n    _onCancel: function() {\n        this.setState({isEditing: false});\n    },\n\n    /**\n     * Save the value\n     */\n    _onSave: function(newContent) {\n        var field = this.props.field;\n        var content = this.props.value ? this.props.value.get(\"content\") : undefined;\n\n        // Validate and filter content\n        newContent = this._validate(newContent, field.get(\"typeId\"));\n\n        // Save only if content change\n        if (newContent !== content) {\n            this.props.onSave(field.id || field.cid, newContent);\n        }\n\n        this.setState({isEditing: false});\n    },\n\n    _onNext: function() {\n        var field = this.props.field;\n\n        if (this.props.onNext) {\n            this.props.onNext(field.id || field.cid);\n        }\n    },\n\n    /**\n     * Validate content for a specified value type\n     */\n    _validate: function(content, typeId) {\n        switch (typeId) {\n\n            case TypeConstants.TEXT:\n            case TypeConstants.NUMBER:\n              content = String(content);\n              content = content.trim();\n              break;\n\n            case TypeConstants.BOOLEAN:\n              break;\n            default:\n              //no op\n        }\n\n        return content;\n    }\n});\n\nmodule.exports = BomItemField;\n\n\n},{\"components/TextInput.jsx\":139,\"constants/TypeConstants\":150,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react/lib/cx\":9}],112:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar HistoryItem = require(\"components/HistoryItem.jsx\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\nvar ChangeActions = require(\"actions/ChangeActions\");\n\nvar BomItemHistory = React.createClass({displayName: \"BomItemHistory\",\n\n    propTypes: {\n        bom: React.PropTypes.object,\n        item: React.PropTypes.object,\n        changes: React.PropTypes.array,\n        active: React.PropTypes.bool\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n        this._init();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n\n        this._init();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _init: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var changes = this.props.changes;\n\n        if (!bom || !item || !this.props.active || item.hasLoadedChanges() || item.isNew()) { return; }\n\n        // load changes older than the new ones\n        changes = _.filter(changes, function(change) {\n            return change.isNew();\n        });\n\n        changes = _.sortBy(changes, function(change) {\n            return change.get(\"number\");\n        });\n\n        ChangeActions.fetchForItem(bom.id || bom.cid, item.id || item.cid, undefined, changes.length ? changes[0].get(\"number\") : undefined);\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var columns = this._getColumns();\n        var changes;\n        var spinner;\n\n        if (!bom || !item) { return ( React.createElement(\"div\", null) ); }\n\n        if (item.isLoadingChanges()) {\n            spinner = (\n                React.createElement(\"tr\", {key: \"spinner\"}, \n                    React.createElement(\"td\", {colSpan: \"4\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n        }\n        else {\n            changes = this.props.changes;\n            changes = _.sortBy(changes, function(change) {\n                return -change.get(\"number\");\n            });\n            changes = changes.map(function(change) {\n                return (\n                    React.createElement(HistoryItem, {\n                        key: change.id || change.cid, \n                        change: change, \n                        bom: bom, \n                        item: item, \n                        columns: columns}));\n            }, this);\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"row content scrollable\"}, \n                React.createElement(\"div\", {className: \"wrapper col-md-12\"}, \n                    React.createElement(Table, {striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                        React.createElement(\"thead\", null, \n                            React.createElement(\"tr\", null, \n                                columns.map(function(columnId) {\n                                    return this._getHeader(columnId);\n                                }, this)\n                            )\n                        ), \n                        React.createElement(\"tbody\", null, \n                            changes, \n                            spinner\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _getColumns: function() {\n        return [\n            ChangeConstants.NUMBER,\n            ChangeConstants.DETAILS,\n            ChangeConstants.DATE,\n            ChangeConstants.STATUS\n        ];\n    },\n\n    // TODO move the history table into a component\n    _getHeader: function(columnId) {\n        switch(columnId) {\n            case ChangeConstants.NUMBER:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Change #\"));\n                break;\n            case ChangeConstants.BOM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM ID\"));\n                break;\n            case ChangeConstants.BOM_NAME:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM Name\"));\n                break;\n            case ChangeConstants.ITEM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item ID\"));\n                break;\n            case ChangeConstants.ITEM_SKU:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item SKU\"));\n                break;\n            case ChangeConstants.DETAILS:\n                return (React.createElement(\"th\", {key: columnId}, \"Details\"));\n                break;\n            case ChangeConstants.DATE:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Date\"));\n                break;\n            case ChangeConstants.STATUS:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Saved\"));\n                break;\n        }\n    }\n});\n\nmodule.exports = BomItemHistory;\n\n\n},{\"actions/ChangeActions\":81,\"components/HistoryItem.jsx\":126,\"constants/ChangeConstants\":147,\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"underscore\":\"underscore\"}],113:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\nvar FieldConstants = require(\"constants/FieldConstants\");\n\nvar BomItemPurchasing = React.createClass({displayName: \"BomItemPurchasing\",\n\n  propTypes: {\n    bom: React.PropTypes.object,\n    item: React.PropTypes.object\n  },\n\n  /**\n   * @return {object}\n   */\n  render: function() {\n    var bom = this.props.bom;\n    var item = this.props.item;\n    var mfgField;\n    var mpnField;\n    var supField;\n    var spnField;\n    var priceField;\n    var leadTimeField;\n    var moqField;\n    var mfgs;\n    var suppliers;\n\n    if (!item) {\n      return (React.createElement(\"div\", null));\n    }\n\n    //get manufacturer fields and matching part numbers\n    mfgs = [];\n    mfgField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.MFG);\n    mpnField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.MPN);\n\n    if (mfgField || mpnField) {\n      mfgs.push({\n        \"key\": 1,\n        \"mfg\": mfgField,\n        \"mpn\": mpnField\n      });\n    }\n\n    //TODO add others fields that contain something like \"mfg\" or \"manufacturer\" in their name\n    // instead of above\n    // get list of BomFields with name that match the pattern\n\n    //get supplier fields and matching part numbers, price, lead time, moq\n    suppliers = [];\n    supField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.SUPPLIER);\n    spnField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.SPN);\n    priceField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.PRICE);\n    leadTimeField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.LEAD_TIME);\n    moqField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.MOQ);\n\n    if (supField || spnField || priceField || leadTimeField || moqField) {\n      suppliers.push({\n        \"key\": 1,\n        \"supplier\": supField,\n        \"spn\": spnField,\n        \"price\": priceField,\n        \"leadtime\": leadTimeField,\n        \"moq\": moqField\n      });\n    }\n\n    //TODO add others fields that contain something like \"supplier\" in the name\n\n    return (\n      React.createElement(\"div\", {className: \"row\"}, \n        React.createElement(\"div\", {className: \"col-md-5\"}, \n          React.createElement(Table, {condensed: true}, \n            React.createElement(\"thead\", null, \n              React.createElement(\"tr\", null, \n                React.createElement(\"th\", null, \"Manufacturer\"), \n                React.createElement(\"th\", null, \"MFG Part Number\")\n              )\n            ), \n            React.createElement(\"tbody\", null, \n              mfgs.map(function(result) {\n                return (\n                  React.createElement(\"tr\", {key: result.key}, \n                    React.createElement(\"td\", null, result.mfg), \n                    React.createElement(\"td\", null, result.mpn)\n                  )\n                  );\n              })\n            )\n          )\n        ), \n\n        React.createElement(\"div\", {className: \"col-md-7\"}, \n          React.createElement(Table, {condensed: true}, \n            React.createElement(\"thead\", null, \n              React.createElement(\"tr\", null, \n                React.createElement(\"th\", null, \"Supplier\"), \n                React.createElement(\"th\", null, \"Supplier PN\"), \n                React.createElement(\"th\", null, \"Price\"), \n                React.createElement(\"th\", null, \"Lead Time\"), \n                React.createElement(\"th\", null, \"MOQ\")\n              )\n            ), \n            React.createElement(\"tbody\", null, \n              suppliers.map(function(result) {\n                return (\n                  React.createElement(\"tr\", {key: result.key}, \n                    React.createElement(\"td\", null, result.supplier), \n                    React.createElement(\"td\", null, result.spn), \n                    React.createElement(\"td\", null, result.price), \n                    React.createElement(\"td\", null, result.leadtime), \n                    React.createElement(\"td\", null, result.moq)\n                  )\n                  );\n              })\n            )\n          )\n        )\n      )\n    );\n  }\n\n});\n\nmodule.exports = BomItemPurchasing;\n\n\n},{\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],114:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Table = require(\"react-bootstrap\").Table;\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar numberFormat = require(\"underscore.string/numberFormat\");\n\n\nvar BomItemUsage = React.createClass({displayName: \"BomItemUsage\",\n\n  propTypes: {\n    bom: React.PropTypes.object,\n    item: React.PropTypes.object\n  },\n\n  /**\n   * @return {object}\n   */\n  render: function() {\n    var bom = this.props.bom;\n    var item = this.props.item;\n    var qtyField;\n    var qtyFieldInt;\n    var priceField;\n    var priceFieldFloat;\n    var desigField;\n    var cpbField;\n\n    if (!item) {\n        return (React.createElement(\"div\", null));\n    }\n\n    qtyField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.QUANTITY);\n    priceField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.PRICE);\n    desigField = bom.getItemValueContentForField(item.id || item.cid, FieldConstants.DESIGNATORS);\n\n    qtyFieldInt = parseInt(qtyField);\n    priceFieldFloat = parseFloat(priceField);\n\n    if (qtyField !== undefined && !_.isNaN(qtyFieldInt) &&\n        priceField !== undefined && !_.isNaN(priceFieldFloat)) {\n        cpbField = numberFormat(priceFieldFloat * qtyFieldInt, 2);\n    }\n\n    if (priceField !== undefined && !_.isNaN(priceFieldFloat)) {\n        priceField = numberFormat(priceFieldFloat, 2);\n    }\n\n    return (\n      React.createElement(\"div\", {className: \"row\"}, \n        React.createElement(\"div\", {className: \"col-md-5\"}, \n          React.createElement(Table, {condensed: true}, \n            React.createElement(\"tbody\", null, \n              React.createElement(\"tr\", null, \n                React.createElement(\"td\", null, \"Quantity per board\"), \n                React.createElement(\"td\", null, qtyField)\n              ), \n              React.createElement(\"tr\", null, \n                React.createElement(\"td\", null, \"Designators\"), \n                React.createElement(\"td\", null, desigField)\n              ), \n              React.createElement(\"tr\", null, \n                React.createElement(\"td\", null, \"Cost per piece\"), \n                React.createElement(\"td\", null, priceField)\n              ), \n              React.createElement(\"tr\", null, \n                React.createElement(\"td\", null, \"Cost per board\"), \n                React.createElement(\"td\", null, cpbField)\n              )\n            )\n          )\n        )\n      )\n    );\n  }\n\n});\n\nmodule.exports = BomItemUsage;\n\n\n},{\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"underscore\":\"underscore\",\"underscore.string/numberFormat\":45}],115:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Navigation = require(\"react-router\").Navigation;\n\nvar BomActions = require(\"actions/BomActions\");\nvar BomItem = require(\"components/BomItem.jsx\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar cx = require(\"react/lib/cx\");\n\nvar BomList = React.createClass({displayName: \"BomList\",\n    mixins: [Navigation],\n\n    propTypes: {\n        bom: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired,\n        productId: React.PropTypes.oneOfType([\n            React.PropTypes.string.isRequired,\n            React.PropTypes.number.isRequired\n        ]),\n        currentBomId: React.PropTypes.oneOfType([\n            React.PropTypes.string.isRequired,\n            React.PropTypes.number.isRequired\n        ])\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var bom = this.props.bom;\n        var allBoms = this.props.allBoms;\n        var currentBomId = this.props.currentBomId;\n        var productId = this.props.productId;\n        var active = currentBomId && !!(currentBomId == (bom.id || bom.cid));\n        var childBoms;\n        var childIds = bom.get(\"bomIds\");\n\n        if (childIds.length) {\n            childBoms = allBoms.filter(function(result) {\n                return _.contains(childIds, result.id || result.cid);\n            });\n\n            childBoms = childBoms.map(function(result) {\n                return (React.createElement(BomList, {\n                    key: result.id || result.cid, \n                    bom: result, \n                    allBoms: allBoms, \n                    currentBomId: currentBomId, \n                    productId: productId}));\n            });\n        }\n\n        return (\n            React.createElement(\"ul\", null, \n                React.createElement(\"li\", {className: cx({\n                        bom: true,\n                        active: active\n                    })}, \n                    React.createElement(\"div\", null, \n                        React.createElement(\"span\", null, \n                            React.createElement(Link, {to: \"bom\", params: { productId: productId, bomId: bom.id || bom.cid}}, bom.get(\"name\"))\n                        )\n                    ), \n                    childBoms\n                )\n            )\n        );\n    }\n});\n\nmodule.exports = BomList;\n\n\n},{\"actions/BomActions\":79,\"components/BomItem.jsx\":108,\"components/TextInput.jsx\":139,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"react/lib/cx\":9,\"underscore\":\"underscore\"}],116:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Panel = require(\"react-bootstrap\").Panel;\nvar Table = require(\"react-bootstrap\").Table;\n\nvar BomActions = require(\"actions/BomActions\");\nvar BomPanelItem = require(\"components/BomPanelItem.jsx\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar BomPanel = React.createClass({displayName: \"BomPanel\",\n    mixins: [Navigation],\n\n    propTypes: {\n        product: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            isAdding: false\n        };\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var product = this.props.product;\n        var header;\n        var boms;\n        var newBom;\n\n        header = (\n            React.createElement(\"div\", null, \n                React.createElement(ButtonToolbar, {className: \"pull-right btn-toolbar-right\"}, \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        bsSize: \"medium\", \n                        onClick: this._onAdd}, \n                        React.createElement(\"span\", {className: \"fa fa-plus\", \"aria-hidden\": \"true\"})\n                    ), \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        bsSize: \"medium\", \n                        onClick: this._onImport}, \n                        React.createElement(\"span\", {className: \"fa fa-upload\", \"aria-hidden\": \"true\"})\n                    )\n                ), \n                React.createElement(\"h4\", null, React.createElement(\"span\", {className: \"fa fa-table panel-title-icon\", \"aria-hidden\": \"true\"}), \"Bill of Materials\")\n            ));\n\n        // Get the BoMs to display\n        boms = [];\n        _.each(product.getBoms(), function(result) {\n            boms.push(this.props.allBoms.get(result));\n            boms = boms.concat(this.props.allBoms.getDescendantBomsOfBom( result.id || result.cid ));\n        }, this);\n\n        // Create the new BoM item if + was clicked\n        if (this.state.isAdding) {\n            newBom = (React.createElement(\"tr\", null, \")\", \n                    React.createElement(\"td\", null, \n                        React.createElement(TextInput, {\n                            className: \"edit\", \n                            onSave: this._onSave, \n                            onCancel: this._onCancel, \n                            value: \"\", \n                            placeholder: \"New BoM\"})\n                    ), \n                    React.createElement(\"td\", null, \"0 item\"), \n                    React.createElement(\"td\", null, \n                        React.createElement(Button, {\n                            className: \"btn-nobg\", \n                            bsStyle: \"danger\", \n                            bsSize: \"small\", \n                            onClick: this._onCancel}, \n                            React.createElement(Glyphicon, {glyph: \"remove\"})\n                        )\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(Panel, {ref: \"panel\", header: header}, \n                React.createElement(Table, {striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                    React.createElement(\"tbody\", null, \n                        boms.map(function(bom) {\n                            return (React.createElement(BomPanelItem, {key: bom.id || bom.cid, bom: bom, product: product}));\n                        }, this), \n                        newBom\n                    )\n                )\n            )\n        );\n    },\n\n    _onAdd: function(event) {\n        this.setState({\n            isAdding: true\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n    },\n\n    _onCancel: function(event) {\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSave: function(name) {\n        name = name || \"\";\n        name = name.trim();\n\n        if (name) {\n            BomActions.create(name, this.props.product.id || this.props.product.cid);\n        }\n        else {\n            // TODO fix Panel class to update dimensions...\n        }\n\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onImport: function(event) {\n        var product = this.props.product;\n\n        this.transitionTo(\"productImport\", {\n            productId: product.id || product.cid\n        });\n    },\n});\n\nmodule.exports = BomPanel;\n\n\n},{\"actions/BomActions\":79,\"components/BomPanelItem.jsx\":117,\"components/TextInput.jsx\":139,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\"}],117:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Link = require(\"react-router\").Link;\n\nvar BomActions = require(\"actions/BomActions\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar Modal = require(\"components/Modal.jsx\");\n\nvar BomItemPanel = React.createClass({displayName: \"BomItemPanel\",\n    mixins: [Navigation],\n\n    propTypes: {\n        bom: React.PropTypes.object.isRequired,\n        product: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            isEditing: false\n        };\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var bom = this.props.bom;\n        var product = this.props.product;\n        var numItems = bom.getItemCount();\n        var nameElement;\n\n        if (this.state.isEditing) {\n            nameElement = (React.createElement(TextInput, {\n                className: \"edit\", \n                onSave: this._onSave, \n                onCancel: this._onCancel, \n                value: bom.get(\"name\")})\n            );\n        }\n        else {\n            nameElement = (React.createElement(\"div\", null, \n                    React.createElement(Link, {to: \"bom\", params: { productId: product.id || product.cid, bomId: bom.id || bom.cid}}, \n                        bom.get(\"name\")\n                    ), \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        bsSize: \"small\", \n                        onClick: this._onEdit}, \n                        React.createElement(Glyphicon, {\n                            bsSize: \"small\", \n                            glyph: \"pencil\"})\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(\"tr\", {key: bom.id || bom.cid}, \n                React.createElement(\"td\", null, \n                    nameElement\n                ), \n                React.createElement(\"td\", null, \n                    numItems, \" item\", numItems>1?\"s\":\"\"\n                ), \n                React.createElement(\"td\", null, \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"danger\", \n                        bsSize: \"small\", \n                        onClick: this._onDelete}, \n                        React.createElement(Glyphicon, {\n                            bsSize: \"small\", \n                            glyph: \"remove\"})\n                    )\n                )\n            )\n        );\n    },\n\n    _onEdit: function(event) {\n        this.setState({ isEditing: true });\n    },\n\n    _onCancel: function() {\n        this.setState({ isEditing: false });\n    },\n\n    _onSave: function(name) {\n        name = name || \"\";\n        name = name.trim();\n\n        if (name && this.props.bom.get(\"name\") !== name) {\n            BomActions.updateName(this.props.bom.id, name);\n        }\n\n        this.setState({\n            isEditing: false\n        });\n    },\n\n    _onDelete: function(event) {\n        AppDispatcher.dispatch({\n            action: {\n                type: \"show-modal\"\n            },\n            modal: (\n                React.createElement(Modal, {\n                    title: \"Delete BoM\", \n                    saveLabel: \"Confirm\", \n                    dismissLabel: \"Cancel\", \n                    onConfirm: this._onDeleteConfirm}, \n                    \"Are you sure you want to permanently delete this BoM?\"\n                ))\n        });\n   },\n\n    _onDeleteConfirm: function() {\n        var bom = this.props.bom;\n\n        BomActions.destroy(bom.id || bom.cid);\n    }\n});\n\nmodule.exports = BomItemPanel;\n\n\n},{\"actions/BomActions\":79,\"components/Modal.jsx\":130,\"components/TextInput.jsx\":139,\"dispatcher/AppDispatcher\":152,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\"}],118:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\n\nvar Table = require(\"react-bootstrap\").Table;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar BomItem = require(\"components/BomItem.jsx\");\nvar TextInput = require(\"components/TextInput.jsx\");\nvar BomActions = require(\"actions/BomActions\");\n\nvar BomSection = React.createClass({displayName: \"BomSection\",\n    mixins: [Navigation],\n\n    propTypes: {\n        bom: React.PropTypes.object.isRequired,\n        headers: React.PropTypes.array.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        selectedItemIds: React.PropTypes.array.isRequired,\n        readonly: React.PropTypes.bool\n    },\n\n    getInitialState: function() {\n        return {\n            isEditing: false,\n            isAdding: false\n        };\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var bom = this.props.bom;\n        var allFields = this.props.allFields;\n        var newItem;\n        var sequence = 1;\n\n        return (\n            React.createElement(\"tbody\", null, \n                bom.getItems().map(function(result) {\n                    return React.createElement(BomItem, {\n                        key: result.id || result.cid, \n                        bom: bom, \n                        item: result, \n                        headers: this.props.headers, \n                        allFields: allFields, \n                        sequence: sequence++, \n                        selected: this._isSelected(result.id || result.cid), \n                        readonly: this._isReadOnly()});\n                }, this), \n                newItem\n            )\n        );\n    },\n\n    _isSelected: function(id) {\n        return _.indexOf(this.props.selectedItemIds, id) !== -1;\n    },\n\n    _isReadOnly: function() {\n        var bom = this.props.bom;\n        return this.props.readonly || (bom && (bom.isNew() || bom.isDirty()));\n    }\n\n});\n\nmodule.exports = BomSection;\n\n\n},{\"actions/BomActions\":79,\"components/BomItem.jsx\":108,\"components/TextInput.jsx\":139,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\"}],119:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar TabbedArea = require(\"react-bootstrap\").TabbedArea;\nvar TabPane = require(\"react-bootstrap\").TabPane;\nvar Button = require(\"react-bootstrap\").Button;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar BomItemDetails = require(\"components/BomItemDetails.jsx\");\nvar BomItemPurchasing = require(\"components/BomItemPurchasing.jsx\");\nvar BomItemUsage = require(\"components/BomItemUsage.jsx\");\nvar BomItemHistory = require(\"components/BomItemHistory.jsx\");\nvar BomItemComments = require(\"components/BomItemComments.jsx\");\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar BomUtils = require(\"utils/BomUtils\");\n\nvar BottomPanel = React.createClass({displayName: \"BottomPanel\",\n\n    propTypes: {\n        allBoms: React.PropTypes.object.isRequired,\n        allSelectedBomItems: React.PropTypes.object.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        allTypes: React.PropTypes.object.isRequired,\n        allChanges: React.PropTypes.object.isRequired,\n        open: React.PropTypes.bool,\n        onClose: React.PropTypes.func,\n        onOpen: React.PropTypes.func\n    },\n\n    getInitialState: function() {\n        return {\n            activeTab: \"purchasing\"\n        };\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        return this.props.open ? this._renderOpen() : this._renderClose();\n    },\n\n    _renderOpen: function() {\n        var lastSelection = this.props.allSelectedBomItems.last();\n        var bom;\n        var item;\n        var sku;\n        var comments = [];\n\n        if (lastSelection) {\n            bom = this.props.allBoms.get( lastSelection.get(\"bomId\") );\n            item = bom.getItem( lastSelection.get(\"itemId\") );\n        }\n\n        return (\n          React.createElement(\"div\", {className: \"sidepanel sidepanel-bottom sidepanel-bottom-open\"}, \n            React.createElement(\"div\", {className: \"closer\"}, \n                React.createElement(Button, {bsStyle: \"link\", onClick: this._close}, \n                    React.createElement(Glyphicon, {glyph: \"chevron-down\"})\n                )\n            ), \n            React.createElement(\"div\", {className: \"row full-height\"}, \n              React.createElement(BomItemDetails, {\n                allFields: this.props.allFields, \n                allTypes: this.props.allTypes, \n                bom: bom, \n                item: item}), \n              React.createElement(\"div\", {id: \"component-tabs\", className: \"col-md-9\"}, \n                React.createElement(TabbedArea, {activeKey: this.state.activeTab, onSelect: this._handleSelectTab, animation: false}, \n                  React.createElement(TabPane, {eventKey: \"purchasing\", tab: \"Purchasing Information\"}, \n                    React.createElement(BomItemPurchasing, {\n                      bom: bom, \n                      item: item, \n                      active: this.state.activeTab === \"purchasing\"})\n                  ), \n                  React.createElement(TabPane, {eventKey: \"usage\", tab: \"Usage Information\"}, \n                    React.createElement(BomItemUsage, {\n                      bom: bom, \n                      item: item, \n                      active: this.state.activeTab === \"usage\"})\n                  ), \n                  React.createElement(TabPane, {eventKey: \"history\", tab: \"History\", className: \"history-tab-pane\"}, \n                    React.createElement(BomItemHistory, {\n                      bom: bom, \n                      item: item, \n                      changes: item ? this.props.allChanges.getVisibleForItem(item.id || item.cid) : undefined, \n                      active: this.state.activeTab === \"history\"})\n                  ), \n                  React.createElement(TabPane, {eventKey: \"comments\", tab: \"Comments\", className: \"comments-tab-pane\"}, \n                    React.createElement(BomItemComments, {\n                      bom: bom, \n                      item: item, \n                      active: this.state.activeTab === \"comments\"})\n                  )\n                )\n              )\n            )\n          )\n        );\n    },\n\n    _renderClose: function() {\n        return (\n            React.createElement(\"div\", {className: \"sidepanel sidepanel-bottom sidepanel-bottom-close\", onClick: this._open}, \n                React.createElement(\"div\", {className: \"closer\"}, \n                    React.createElement(Button, {bsStyle: \"link\", onClick: this._open}, \n                        React.createElement(Glyphicon, {glyph: \"chevron-up\"})\n                    )\n                )\n            )\n        );\n    },\n\n    _close: function(event) {\n        if (this.props.onClose) {\n            this.props.onClose();\n        }\n    },\n\n    _open: function() {\n        if (this.props.onOpen) {\n            this.props.onOpen();\n        }\n    },\n\n    _handleSelectTab: function(key) {\n        this.setState({\n            activeTab: key\n        });\n    }\n});\n\nmodule.exports = BottomPanel;\n\n\n},{\"components/BomItemComments.jsx\":109,\"components/BomItemDetails.jsx\":110,\"components/BomItemHistory.jsx\":112,\"components/BomItemPurchasing.jsx\":113,\"components/BomItemUsage.jsx\":114,\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"utils/BomUtils\":199}],120:[function(require,module,exports){\n\"use strict\";\n\nvar _string = require(\"underscore.string\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Link = require(\"react-router\").Link;\nvar Modal = require(\"components/Modal.jsx\");\nvar moment = require(\"moment\");\nvar Navigation = require(\"react-router\").Navigation;\nvar ProductActions = require(\"actions/ProductActions\");\nvar React = require(\"react\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar CommentItem = React.createClass({displayName: \"CommentItem\",\n    mixins: [Navigation],\n\n    propTypes: {\n        comment: React.PropTypes.object.isRequired,\n        onSave: React.PropTypes.func.isRequired,\n        onRemove: React.PropTypes.func.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            isEditing: false\n        };\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var comment = this.props.comment;\n        var createdAtElement = comment.has(\"createdAt\") ? (React.createElement(\"span\", null, React.createElement(\"small\", null, \"— \", moment.unix(comment.get(\"createdAt\")).calendar()))) : undefined;\n        var bodyElement;\n\n        if (this.state.isEditing) {\n            bodyElement = (React.createElement(TextInput, {\n                type: \"textarea\", \n                className: \"edit\", \n                onSave: this._onSave, \n                onCancel: this._onCancel, \n                value: comment.get(\"body\")})\n            );\n        }\n        else {\n            bodyElement = (React.createElement(\"p\", null, \n                _string(comment.get(\"body\")).lines().map(function(line, index){\n                    return (React.createElement(\"span\", {key: index}, line, React.createElement(\"br\", null)));\n                })\n            ));\n        }\n\n        return (React.createElement(\"tr\", null, \n                React.createElement(\"td\", null, \n                    bodyElement, \n                    createdAtElement\n                ), \n                React.createElement(\"td\", {className: \"actions\"}, \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        bsSize: \"small\", \n                        onClick: this._onEdit}, \n                        React.createElement(Glyphicon, {\n                            bsSize: \"small\", \n                            glyph: \"pencil\"})\n                    ), \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"danger\", \n                        bsSize: \"small\", \n                        onClick: this._onRemove}, \n                        React.createElement(Glyphicon, {\n                            bsSize: \"small\", \n                            glyph: \"remove\"})\n                    )\n                )\n            ))\n    },\n\n    _onEdit: function(event) {\n        this.setState({\n            isEditing: true\n        });\n    },\n\n    _onSave: function(body) {\n        body = body || \"\";\n        body = body.trim();\n\n        if (body && this.props.comment.get(\"body\") !== body) {\n            this.props.onSave(this.props.comment.id, body);\n        }\n\n        this.setState({\n            isEditing: false\n        });\n    },\n\n    _onCancel: function(body) {\n        this.setState({\n            isEditing: false\n        });\n    },\n\n    _onRemove: function(event) {\n        AppDispatcher.dispatch({\n            action: {\n                type: \"show-modal\"\n            },\n            modal: (\n                React.createElement(Modal, {\n                    title: \"Delete Comment\", \n                    saveLabel: \"Confirm\", \n                    dismissLabel: \"Cancel\", \n                    onConfirm: this._onRemoveConfirm}, \n                    \"Are you sure you want to permanently delete this comment?\"\n                ))\n        });\n   },\n\n    _onRemoveConfirm: function() {\n        var comment = this.props.comment;\n        this.props.onRemove(comment.id || comment.cid);\n    }\n});\n\nmodule.exports = CommentItem;\n\n\n},{\"actions/ProductActions\":83,\"components/Modal.jsx\":130,\"components/TextInput.jsx\":139,\"dispatcher/AppDispatcher\":152,\"moment\":8,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore.string\":35}],121:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Panel = require(\"react-bootstrap\").Panel;\nvar Table = require(\"react-bootstrap\").Table;\n\nvar BomUtils = require(\"utils/BomUtils\");\nvar TextInput = require(\"components/TextInput.jsx\");\nvar ProductActions = require(\"actions/ProductActions\");\nvar CommentItem = require(\"components/CommentItem.jsx\");\n\nvar CommentPanel = React.createClass({displayName: \"CommentPanel\",\n    mixins: [Navigation],\n\n    propTypes: {\n        product: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            isAdding: false\n        };\n    },\n\n    componentDidMount: function() {\n        this._init();\n        this._addScroll();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        this._init();\n    },\n\n    _init: function() {\n        if (this.props.product.getComments().hasFetched() ||\n            this.props.product.getComments().isLoaded()) {\n            return;\n        }\n        ProductActions.fetchComments(this.props.product.id, 10);\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).find(\"div.scrollable\").niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        var niceScroll = this._getScroll();\n        if (niceScroll) {\n            niceScroll.remove();\n        }\n    },\n\n    _getScroll: function() {\n        return $(this.getDOMNode()).find(\"div.scrollable\").getNiceScroll();\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var product = this.props.product;\n        var header;\n        var allComments = this.props.product.getComments();\n        var newComment;\n        var spinner;\n        var more;\n\n        header = (\n            React.createElement(\"div\", {onClick: this._onToggle}, \n                React.createElement(ButtonToolbar, {className: \"pull-right btn-toolbar-right\"}, \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        onClick: this._onAdd}, \n                        React.createElement(\"span\", {className: \"fa fa-plus\", \"aria-hidden\": \"true\"})\n                    )\n                ), \n                React.createElement(\"h4\", null, React.createElement(\"span\", {className: \"fa fa-comments-o panel-title-icon\", \"aria-hidden\": \"true\"}), \"Comments\")\n            ));\n\n        // Create the new BoM item if + was clicked\n        if (this.state.isAdding) {\n            newComment = (React.createElement(\"tr\", null, \n                    React.createElement(\"td\", null, \n                        React.createElement(TextInput, {\n                            type: \"textarea\", \n                            className: \"edit\", \n                            onSave: this._onSaveNew, \n                            onCancel: this._onCancelNew, \n                            value: \"\", \n                            placeholder: \"Enter your comment\"})\n                    ), \n                    React.createElement(\"td\", {className: \"compact\"}, \n                        React.createElement(Button, {\n                            className: \"btn-nobg\", \n                            bsStyle: \"danger\", \n                            bsSize: \"small\", \n                            onClick: this._onCancelMew}, \n                            React.createElement(Glyphicon, {glyph: \"remove\"})\n                        )\n                    )\n                ));\n        }\n\n        if (allComments.isFetching()) {\n            spinner = (\n                React.createElement(\"tr\", {key: \"spinner\"}, \n                    React.createElement(\"td\", {colSpan: \"2\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n        }\n        else if (!allComments.isLoaded()) {\n            more = (\n                React.createElement(\"tr\", {key: \"more\"}, \n                    React.createElement(\"td\", {colSpan: \"2\", className: \"text-center\"}, \n                        React.createElement(Button, {bsStyle: \"link\", onClick: this._loadPrevious}, \"load previous\")\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(Panel, {className: \"comment-panel\", ref: \"panel\", header: header}, \n                React.createElement(\"div\", {className: \"scrollable\"}, \n                    React.createElement(\"div\", {className: \"wrapper\"}, \n                        React.createElement(Table, {className: \"comment-table\", striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                            React.createElement(\"tbody\", null, \n                                newComment, \n                                allComments.map(function(comment, index) {\n                                    return (React.createElement(CommentItem, {\n                                        key: comment.id || comment.cid, \n                                        comment: comment, \n                                        onSave: this._onSaveEdit, \n                                        onRemove: this._onRemove}));\n                                }, this), \n                                spinner, \n                                more\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _onAdd: function(event) {\n        this.setState({\n            isAdding: true\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n    },\n\n    _onCancelNew: function(event) {\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSaveNew: function(body) {\n        body = body || \"\";\n        body = body.trim();\n\n        if (body) {\n            ProductActions.createComment(this.props.product.id || this.props.product.cid, body);\n        }\n\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSaveEdit: function(commentId, body) {\n        var product = this.props.product;\n        ProductActions.updateComment(product.id || product.cid, commentId, body);\n    },\n\n    _onRemove: function(commentId) {\n        var product = this.props.product;\n        ProductActions.destroyComment(product.id || product.cid, commentId);\n    },\n\n    _loadPrevious: function() {\n        ProductActions.fetchComments(this.props.product.id, 10);\n    }\n});\n\nmodule.exports = CommentPanel;\n\n\n},{\"actions/ProductActions\":83,\"components/CommentItem.jsx\":120,\"components/TextInput.jsx\":139,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"utils/BomUtils\":199}],122:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar DropdownStateMixin = require(\"react-bootstrap\").DropdownStateMixin;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonGroup = require(\"react-bootstrap\").ButtonGroup;\nvar DropdownMenu = require(\"react-bootstrap\").DropdownMenu;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\n\nvar cx = require(\"react/lib/cx\");\n\n/**\n * A component with a Button and a DropdownMenu.\n */\nvar DropdownButton = React.createClass({displayName: \"DropdownButton\",\n  mixins: [DropdownStateMixin],\n\n  propTypes: {\n    id: React.PropTypes.string,\n    glyphicon: React.PropTypes.string,\n    title: React.PropTypes.string,\n    pullRight: React.PropTypes.bool,\n    bsStyle: React.PropTypes.string,\n    trigger: React.PropTypes.string\n  },\n\n  render: function() {\n    var glyphicon;\n    var buttonGroupId;\n    var buttonId;\n\n    //generate the glyphicon if it is specified\n    if (this.props.glyphicon) {\n      glyphicon = React.createElement(\"span\", {className: \"glyphicon glyphicon-\" + this.props.glyphicon})\n    }\n\n    //get the buttonGroupId or default if not specified\n    buttonGroupId = this.props.id ? this.props.id : \"dropdown-menu\";\n\n    //get the buttonId or default if not specified\n    buttonId = this.props.id ? this.props.id + \"-button\" : \"dropdown-menu-button\";\n\n    //TODO pass className\n\n    return (\n      React.createElement(ButtonGroup, {\n        id: buttonGroupId, \n        className: cx({\n          \"open\": this.state.open\n        })}, \n        React.createElement(Button, {\n          id: buttonId, \n          bsStyle: this.props.bsStyle, \n          ref: \"dropdownButton\", \n          className: \"dropdown-toggle btn-nobg\", \n          onClick: !this.props.trigger || this.props.trigger === \"click\" ? this._toggle : undefined, \n          onMouseOver: this.props.trigger === \"hover\" ? this._open : undefined, \n          onMouseLeave: this.props.trigger === \"hover\" ? this._close : undefined}, \n          this.props.title, \n          glyphicon\n        ), \n        React.createElement(DropdownMenu, {\n          ref: \"menu\", \n          \"aria-labelledby\": buttonId, \n          pullRight: !!this.props.pullRight, \n          onMouseOver: this.props.trigger === \"hover\" ? this._open : undefined, \n          onMouseLeave: this.props.trigger === \"hover\" ? this._close : undefined}, \n          this.props.children.map(this._renderMenuItem)\n        )\n      )\n    );\n  },\n\n  /**\n   * Callback to close the DropdownMenu when the user clicks a MenuItem.\n   */\n  _toggle: function (event) {\n    event.preventDefault();\n    this.setDropdownState(!this.state.open);\n  },\n\n  _open: function (event) {\n    event.preventDefault();\n\n    if (this.state.closeId) {\n        clearTimeout(this.state.closeId);\n        this.setState({\n            closeId: undefined\n        })\n    }\n\n    this.setDropdownState(true);\n  },\n\n  _close: function (event) {\n    event.preventDefault();\n    this.setState({\n        closeId: setTimeout(function() {\n            this.setDropdownState(false);\n            this.setState({\n                closeId: undefined\n            });\n        }.bind(this), 1000)\n    })\n  },\n\n  /**\n   * Extend and render a MenuItem\n   */\n  _renderMenuItem: function(item) {\n    var origSelect = item.props.onSelect;\n\n    item.props.onSelect = function(key, href, target) {\n      this.setDropdownState(false);\n      if (origSelect) {\n        origSelect(key, href, target);\n      }\n    }.bind(this);\n\n    return item;\n  }\n\n});\n\nmodule.exports = DropdownButton;\n\n\n},{\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react/lib/cx\":9}],123:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Modal = require(\"react-bootstrap\").Modal;\nvar Button = require(\"react-bootstrap\").Button;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\nvar SplitButton = require(\"react-bootstrap\").SplitButton;\nvar Input = require(\"react-bootstrap\").Input;\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar TypeConstants = require(\"constants/TypeConstants\");\nvar InputConstants = require('constants/InputConstants');\n\nvar EditColumnModal = React.createClass({displayName: \"EditColumnModal\",\n\n  propTypes: {\n    index: React.PropTypes.number.isRequired,\n    fields: React.PropTypes.array.isRequired,\n    allTypes: React.PropTypes.object.isRequired,\n    onCancel: React.PropTypes.func.isRequired,\n    onSave: React.PropTypes.func.isRequired,\n    onHide: React.PropTypes.func,\n    column: React.PropTypes.object,\n    typeId: React.PropTypes.number\n  },\n\n  getInitialState: function() {\n    if (this.props.column) {\n      return {\n        fieldId: this.props.column.fieldId,\n        typeId: this.props.typeId,\n        name: this.props.column.name\n      };\n    }\n    else {\n      return {\n        fieldId: FieldConstants.SELECT_FIELD.id,\n        typeId: TypeConstants.TEXT_ID,\n        name: \"\"\n      };\n    }\n  },\n\n  /**\n   * @return {object}\n   */\n  render: function() {\n    var field;\n    var fieldsElement;\n    var fieldsOptions;\n    var fieldsTitle;\n    var nameInput;\n    var type;\n    var typesTitle;\n    var typesOptions;\n    var typesElement;\n\n    if (this.state.fieldId === FieldConstants.SELECT_FIELD.id) {\n      fieldsTitle = FieldConstants.SELECT_FIELD.name;\n    }\n    else if (this.state.fieldId === FieldConstants.CUSTOM_FIELD.id) {\n      fieldsTitle = \"New Attribute\";\n    }\n    else {\n      field = _.find(this.props.fields, function(result) {\n        return result.id === this.state.fieldId;\n      }, this);\n      fieldsTitle = field.name;\n    }\n\n    // create the list of fields\n    fieldsOptions = this.props.fields.map(function(result) {\n      return (\n        React.createElement(MenuItem, {\n          className: result.disabled ? \"disabled\" : \"\", \n          key: result.id, \n          eventKey: result.id}, result.name)\n      );\n    });\n\n    fieldsElement = (\n      React.createElement(\"div\", {className: \"form-group col-md-12\"}, \n        React.createElement(\"label\", {className: \"control-label\"}, React.createElement(\"span\", null, \"Attribute\")), \n        React.createElement(\"div\", null, \n          React.createElement(SplitButton, {\n            bsStyle: \"default\", \n            title: fieldsTitle, \n            onSelect: this._onSelectField}, \n            fieldsOptions, \n            React.createElement(MenuItem, {divider: true}), \n            React.createElement(MenuItem, {eventKey: FieldConstants.CUSTOM_FIELD.id}, \"New Attribute\")\n          )\n        )\n      ));\n\n    type = this.props.allTypes.get( this.state.typeId );\n    typesTitle = type.get(\"name\");\n\n    // create the list of field types\n    typesOptions = this.props.allTypes.map(function(result) {\n      return (\n        React.createElement(MenuItem, {\n          key: result.id || result.cid, \n          eventKey: result.id || result.cid}, result.get(\"name\"))\n      );\n    });\n\n    typesElement = (\n      React.createElement(\"div\", {className: \"form-group col-md-4\"}, \n        React.createElement(\"label\", {className: \"control-label\"}, React.createElement(\"span\", null, \"Value Type\")), \n        React.createElement(\"div\", null, \n          React.createElement(SplitButton, {\n            bsStyle: \"default\", \n            title: typesTitle, \n            onSelect: this._onSelectType, \n            disabled: this.state.fieldId !== FieldConstants.CUSTOM_FIELD.id}, \n            typesOptions\n          )\n        )\n      ));\n\n    nameInput = (\n      React.createElement(Input, {\n        groupClassName: \"col-md-4\", \n        label: \"Display Name\", \n        type: \"text\", \n        onChange: this._onChangeName, \n        onKeyUp: this._onKeyUp, \n        value: this.state.name}));\n\n    return (\n      React.createElement(Modal, React.__spread({},  this.props, \n        {onRequestHide: this.props.onCancel, \n        bsStyle: \"primary\", \n        title: \"Edit a column\", \n        animation: false, \n        className: \"modal-add-column\"}), \n        React.createElement(\"div\", {className: \"modal-body\"}, \n          React.createElement(\"form\", null, \n            React.createElement(\"div\", {className: \"row\"}, \n              fieldsElement, \n              typesElement, \n              nameInput\n            )\n          )\n        ), \n        React.createElement(\"div\", {className: \"modal-footer\"}, \n          React.createElement(Button, {className: \"pull-left\", bsStyle: \"danger\", onClick: this._onHide}, \"Hide\"), \n          React.createElement(Button, {onClick: this.props.onCancel}, \"Close\"), \n          React.createElement(Button, {bsStyle: \"primary\", onClick: this._onSave}, \"Save\")\n        )\n      )\n      );\n  },\n\n  _onSelectField: function(id) {\n    var typeId;\n    var name;\n    var field;\n\n    if (id !== FieldConstants.CUSTOM_FIELD.id) {\n\n      field = _.find(this.props.fields, function(result) {\n        return result.id === id;\n      }, this);\n      if (!field || field.disabled) { return; }\n\n      name = field.name;\n      typeId = field.typeId;\n    }\n    else {\n      typeId = TypeConstants.TEXT;\n    }\n\n    this.setState({\n      fieldId: id,\n      name: name,\n      typeId: typeId\n    });\n  },\n\n  _onSelectType: function(id) {\n    this.setState({\n      typeId: id\n    })\n  },\n\n  _onChangeName: function(event) {\n    this.setState({\n      name: event.target.value\n    });\n  },\n\n  _onKeyUp: function(event) {\n    switch(event.keyCode) {\n      case InputConstants.ENTER:\n        this._onSave();\n        event.preventDefault();\n        break;\n\n      case InputConstants.ESC:\n        this.props.onCancel();\n        event.preventDefault();\n        break;\n    }\n  },\n\n  _onSave: function(event) {\n    this.props.onSave(\n      this.state.fieldId === FieldConstants.CUSTOM_FIELD.id ? undefined : this.state.fieldId,\n      this.state.typeId,\n      this.state.name,\n      this.props.index,\n      this.props.column.id || this.props.column.cid);\n  },\n\n  _onHide: function(event) {\n    this.props.onHide(this.props.index);\n  }\n\n});\n\nmodule.exports = EditColumnModal;\n\n\n},{\"constants/FieldConstants\":148,\"constants/InputConstants\":149,\"constants/TypeConstants\":150,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"underscore\":\"underscore\"}],124:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\n\nvar Footer = React.createClass({displayName: \"Footer\",\n    render: function() {\n        return (\n            React.createElement(\"footer\", {className: \"footer\"}, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-8 col-md-offset-2 col-sm-12\"}, \n                        React.createElement(\"hr\", null), \n                        React.createElement(\"div\", {className: \"logo\"}), \n                        React.createElement(\"p\", {className: \"text-center small\"}, \"Fabule Fabrications Inc\")\n                    )\n                )\n            )\n        );\n    }\n});\n\nmodule.exports = Footer;\n\n\n},{\"react\":\"react\"}],125:[function(require,module,exports){\n\"use strict\";\n\nvar Backbone = require(\"backbone\");\n\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\nvar Navigation = require('react-router').Navigation;\n\nvar Button = require(\"react-bootstrap\").Button;\nvar MenuItem = require('react-bootstrap').MenuItem;\nvar Popover = require('react-bootstrap').Popover;\nvar OverlayTrigger = require('react-bootstrap').OverlayTrigger;\n\nvar UserConstants = require(\"constants/UserConstants\");\nvar DropdownButton = require(\"components/DropdownButton.jsx\");\n\nvar UserEvent = require(\"events/UserEvent\");\n\n/**\n * Header of the application.\n */\nvar Header = React.createClass({displayName: \"Header\",\n    mixins: [Navigation],\n\n    propTypes: {\n        user: React.PropTypes.object,\n        allChanges: React.PropTypes.object\n    },\n\n    getInitialState: function() {\n        return {\n            greeting: \"Salut\"\n        };\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        return (\n        React.createElement(\"header\", {className: \"bom-header\"}, \n            React.createElement(\"div\", {className: \"col-md-6\"}, \n                React.createElement(Link, {to: \"app\", tabIndex: \"-1\"}, React.createElement(\"div\", {className: \"logo\"}))\n            ), \n            this._renderRightHeader()\n        )\n        );\n    },\n\n    /**\n     * Get the right part of the header.\n     */\n     _renderRightHeader: function() {\n        if (!this.props.user) { return null; }\n\n        return (React.createElement(\"div\", {className: \"col-md-6 text-right header-right\"}, \n                this._renderSaveStatus(), \n                React.createElement(\"div\", {className: \"vertical-divider\"}), \n                React.createElement(\"div\", {className: \"menu\"}, \n                    React.createElement(\"span\", null, this.state.greeting, \", \"), \n                    React.createElement(Link, {to: \"userAccount\"}, this._renderDisplayName()), \n                    React.createElement(DropdownButton, {id: \"dropdown-user-menu\", glyphicon: \"option-vertical\", pullRight: true}, \n                        React.createElement(MenuItem, {eventKey: \"userAccount\", onSelect: this.transitionTo}, \"Your Account\"), \n                        React.createElement(MenuItem, {eventKey: \"/company/invite\", onSelect: this.transitionTo}, \"Invite Team Members\"), \n                        React.createElement(MenuItem, {divider: true}), \n                        React.createElement(MenuItem, {eventKey: \"signout\", onSelect: this._onSignout}, \"Sign out\")\n                    )\n                )\n            ));\n     },\n\n    /**\n     * Get the saving status from the change store.\n     */\n    _renderSaveStatus: function() {\n        var status;\n        var queueLength;\n        var changes = this.props.allChanges;\n        if (!changes) { return null; }\n\n        queueLength = changes.getQueueLength();\n\n        if (changes.isSaving()) {\n            status = \"Saving \"+queueLength+\" change\"+(queueLength>1?\"s\":\"\")+\".\";\n\n            return (\n                React.createElement(\"div\", {className: \"save-status\"}, \n                    React.createElement(DropdownButton, {title: status, trigger: \"hover\", bsStyle: \"link\", pullRight: true}, \n                        this._renderSaveList()\n                    )\n                ));\n        }\n        else if (queueLength) {\n            status = \"You have \"+queueLength+\" unsaved change\"+(queueLength>1?\"s\":\"\")+\".\";\n\n            return (\n                React.createElement(\"div\", {className: \"save-status\"}, \n                    React.createElement(DropdownButton, {title: status, trigger: \"hover\", bsStyle: \"link\", pullRight: true}, \n                        this._renderSaveList()\n                    )\n                ));\n        }\n        else {\n            status = \"All saved.\";\n\n            return (\n                React.createElement(\"div\", {className: \"save-status\"}, \n                    React.createElement(\"span\", null, status)\n                ));\n        }\n    },\n\n    _renderSaveList: function() {\n        var changes = this.props.allChanges.getNotSaved();\n\n        return changes.map(function(change) {\n            return (React.createElement(MenuItem, {key: change.id || change.cid, eventKey: change.id || change.cid}, \n                React.createElement(\"strong\", null, \"#\", change.get(\"number\")), \" - \", change.get(\"description\")\n            ));\n        });\n    },\n\n    /**\n     * Get the display name based on the user prop.\n     * @return {string}\n     */\n    _renderDisplayName: function() {\n        var user = this.props.user;\n        if (!user) { return null; }\n\n        return user.getDisplayName();\n    },\n\n    _onSignout: function() {\n        this.props.user.logout();\n    }\n});\n\nmodule.exports = Header;\n\n\n},{\"backbone\":\"backbone\",\"components/DropdownButton.jsx\":122,\"constants/UserConstants\":151,\"events/UserEvent\":158,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\"}],126:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar moment = require('moment');\n\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\n\nvar HistoryItem = React.createClass({displayName: \"HistoryItem\",\n    propTypes: {\n        change: React.PropTypes.object.isRequired,\n        bom: React.PropTypes.object,\n        item: React.PropTypes.object,\n        columns: React.PropTypes.array\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var change = this.props.change;\n        var bom = this.props.bom;\n        var item = this.props.item;\n        var columns = this.props.columns || this._getDefaultColumns();\n\n        return (\n            React.createElement(\"tr\", {key: change.id || change.cid}, \n                columns.map(function(columnId) {\n                    return this._getCell(columnId, change, bom, item);\n                }, this)\n            )\n        );\n    },\n\n    _getDefaultColumns: function() {\n        return [\n            ChangeConstants.NUMBER,\n            ChangeConstants.BOM_ID,\n            ChangeConstants.BOM_NAME,\n            // Disable for now as it currently does not work as expected.\n            //ChangeConstants.ITEM_ID,\n            ChangeConstants.ITEM_SKU,\n            ChangeConstants.DETAILS,\n            ChangeConstants.DATE,\n            ChangeConstants.STATUS\n        ];\n    },\n\n    _getCell: function(columnId, change, bom, item) {\n        switch(columnId) {\n            case ChangeConstants.NUMBER:\n                return (React.createElement(\"td\", {key: columnId}, change.get(\"number\")));\n                break;\n            case ChangeConstants.BOM_ID:\n                return (React.createElement(\"td\", {key: columnId}, change.get(\"bomId\")));\n                break;\n            case ChangeConstants.BOM_NAME:\n                return (React.createElement(\"td\", {key: columnId, className: \"nowrap\"}, change.get(\"bomId\") ? (bom ? bom.get(\"name\") : \"Deleted\") : \"\"));\n                break;\n            case ChangeConstants.ITEM_ID:\n                return (React.createElement(\"td\", {key: columnId}, bom && item ? bom.getItemValueContentForField(item.id || item.cid, FieldConstants.ID) : \"\"));\n                break;\n            case ChangeConstants.ITEM_SKU:\n                return (React.createElement(\"td\", {key: columnId}, bom && item ? bom.getItemValueContentForField(item.id || item.cid, FieldConstants.SKU) : \"\"));\n                break;\n            case ChangeConstants.DETAILS:\n                return (React.createElement(\"td\", {key: columnId}, change.get(\"description\")));\n                break;\n            case ChangeConstants.DATE:\n                return (React.createElement(\"td\", {key: columnId, className: \"nowrap\"}, moment.unix(change.get(\"createdAt\")).calendar()));\n                break;\n            case ChangeConstants.STATUS:\n                return (React.createElement(\"td\", {key: columnId}, this._getStatus(change)));\n                break;\n        }\n    },\n\n    _getStatus: function(change) {\n        if (change.isSaved()) {\n            return (React.createElement(Glyphicon, {bsSize: \"small\", bsStyle: \"success\", glyph: \"ok-circle\"}));\n        }\n        else if (change.isSaving()) {\n            return (React.createElement(Glyphicon, {className: \"glyphicon-spin\", bsSize: \"small\", bsStyle: \"primary\", glyph: \"repeat\"}));\n        }\n        else if (change.triedSaving()) {\n            return (React.createElement(Glyphicon, {bsSize: \"small\", bsStyle: \"danger\", glyph: \"ban-circle\"}));\n        }\n        else {\n            return (React.createElement(Glyphicon, {bsSize: \"small\", bsStyle: \"default\", glyph: \"record\"}));\n        }\n    }\n});\n\nmodule.exports = HistoryItem;\n\n\n},{\"constants/ChangeConstants\":147,\"constants/FieldConstants\":148,\"moment\":8,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],127:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\nvar Navigation = require(\"react-router\").Navigation;\nvar Panel = require(\"react-bootstrap\").Panel;\nvar Table = require(\"react-bootstrap\").Table;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Button = require(\"react-bootstrap\").Button;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar HistoryItem = require(\"components/HistoryItem.jsx\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\nvar ChangeActions = require(\"actions/ChangeActions\");\n\nvar HistoryPanel = React.createClass({displayName: \"HistoryPanel\",\n    mixins: [Navigation],\n\n    propTypes: {\n        product: React.PropTypes.object.isRequired,\n        changes: React.PropTypes.array.isRequired,\n        allBoms: React.PropTypes.object.isRequired\n    },\n\n    componentDidMount: function() {\n        this._init();\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        this._init();\n    },\n\n    _init: function() {\n        var product = this.props.product;\n        var changes = this.props.changes;\n\n        // load changes older than the new ones\n        changes = _.filter(changes, function(change) {\n            return change.isNew();\n        });\n\n        changes = _.sortBy(changes, function(change) {\n            return change.get(\"number\");\n        });\n\n        if (product.isNew() || product.hasLoadedChanges()) {\n            return;\n        }\n\n        ChangeActions.fetchForProduct(product.id, 10, changes.length ? changes[0].get(\"number\") : undefined);\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var product = this.props.product;\n        var allBoms = this.props.allBoms;\n        var columns = this._getColumns();\n        var changes = this.props.changes;\n        var header;\n        var count;\n        var total;\n        var spinner;\n\n        changes = _.sortBy(changes, function(change) {\n            return -change.get(\"number\");\n        });\n\n        total = changes.length ? _.first(changes).get(\"number\") : 0;\n\n        changes = _.first(changes, 10);\n\n        if (product.hasLoadedChanges() && !product.isLoadingChanges()) {\n            count = changes.length ? (React.createElement(\"span\", null, \" (\", changes.length, \"/\", total, \" change\", total>1?\"s\":\"\", \")\")) : undefined;\n        }\n\n        header = (\n            React.createElement(\"div\", {onClick: this._onToggle}, \n                React.createElement(ButtonToolbar, {className: \"pull-right btn-toolbar-right\"}, \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        onClick: this._onViewAll}, \n                        React.createElement(\"span\", {className: \"fa fa-list\", \"aria-hidden\": \"true\"})\n                    )\n                ), \n                React.createElement(\"h4\", null, React.createElement(\"span\", {className: \"fa fa-history panel-title-icon\", \"aria-hidden\": \"true\"}), \"Recent History\", count)\n            ));\n\n        if (product.isLoadingChanges()) {\n            spinner = (\n                React.createElement(\"tr\", null, \n                    React.createElement(\"td\", {colSpan: \"8\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n            changes = undefined;\n        }\n        else {\n            changes = changes.map(function(change) {\n                var bom = change.has(\"bomId\") ? allBoms.get(change.get(\"bomId\")) : undefined;\n                var item = bom && change.has(\"itemId\") ? bom.getItem(change.get(\"itemId\")) : undefined;\n\n                return (\n                    React.createElement(HistoryItem, {\n                        key: change.id || change.cid, \n                        change: change, \n                        bom: bom, \n                        item: item, \n                        columns: columns}));\n            }, this);\n        }\n\n        return (\n            React.createElement(Panel, {className: \"history-panel\", header: header}, \n                React.createElement(Table, {striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                    React.createElement(\"thead\", null, \n                        React.createElement(\"tr\", null, \n                            columns.map(function(columnId) {\n                                return this._getHeader(columnId);\n                            }, this)\n                        )\n                    ), \n                    React.createElement(\"tbody\", null, \n                        spinner, \n                        changes\n                    )\n                )\n            )\n        );\n    },\n\n    _onViewAll: function(event) {\n        var product = this.props.product;\n        this.transitionTo(\"productHistory\", {productId: product.id || product.cid});\n    },\n\n    _getColumns: function() {\n        return [\n            ChangeConstants.NUMBER,\n            ChangeConstants.BOM_ID,\n            ChangeConstants.BOM_NAME,\n            // Disable item id for now, as it does not really work. Will readd later when fixed.\n            //ChangeConstants.ITEM_ID,\n            ChangeConstants.ITEM_SKU,\n            ChangeConstants.DETAILS,\n            ChangeConstants.DATE,\n            ChangeConstants.STATUS\n        ];\n    },\n\n    // TODO move the history table into a component\n    _getHeader: function(columnId) {\n        switch(columnId) {\n            case ChangeConstants.NUMBER:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Change #\"));\n                break;\n            case ChangeConstants.BOM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM ID\"));\n                break;\n            case ChangeConstants.BOM_NAME:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM Name\"));\n                break;\n            case ChangeConstants.ITEM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item ID\"));\n                break;\n            case ChangeConstants.ITEM_SKU:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item SKU\"));\n                break;\n            case ChangeConstants.DETAILS:\n                return (React.createElement(\"th\", {key: columnId}, \"Details\"));\n                break;\n            case ChangeConstants.DATE:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Date\"));\n                break;\n            case ChangeConstants.STATUS:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Saved\"));\n                break;\n        }\n    },\n});\n\nmodule.exports = HistoryPanel;\n\n\n},{\"actions/ChangeActions\":81,\"components/HistoryItem.jsx\":126,\"constants/ChangeConstants\":147,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\"}],128:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar ProductList = require(\"components/ProductList.jsx\");\n\nvar Button = require(\"react-bootstrap\").Button;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar LeftPanel = React.createClass({displayName: \"LeftPanel\",\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired,\n        currentProductId: React.PropTypes.oneOfType([\n            React.PropTypes.string,\n            React.PropTypes.number\n        ]),\n        currentBomId: React.PropTypes.oneOfType([\n            React.PropTypes.string,\n            React.PropTypes.number\n        ]),\n        open: React.PropTypes.bool,\n        onClose: React.PropTypes.func,\n        onOpen: React.PropTypes.func\n    },\n\n    getInitialState: function() {\n        return {\n            view: 'products'\n        };\n    },\n\n    componentDidMount: function() {\n        if (this.props.open) {\n            this._addScroll();\n        }\n    },\n\n    componentWillUnmount: function() {\n        var niceScroll = this._getScroll();\n        if (niceScroll) {\n            niceScroll.remove();\n        }\n    },\n\n    componentWillUpdate: function(nextProps) {\n        if (this.props.open && !nextProps.open) {\n            this._removeScroll();\n        }\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        var niceScroll = this._getScroll();\n        if (this.props.open) {\n            if (!prevProps.open) {\n                this._addScroll();\n            }\n            else if (niceScroll) {\n                niceScroll.resize();\n            }\n        }\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).find(\"div.scrollable\").niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        var niceScroll = this._getScroll();\n        if (niceScroll) {\n            niceScroll.remove();\n        }\n    },\n\n    _getScroll: function() {\n        return $(this.getDOMNode()).find(\"div.scrollable\").getNiceScroll();\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        return this.props.open ? this._renderOpen() : this._renderClose();\n    },\n\n    _renderOpen: function() {\n        var panel;\n        var footer;\n\n        switch(this.state.view) {\n            case 'products':\n                panel = (React.createElement(ProductList, {\n                    allProducts: this.props.allProducts, \n                    allBoms: this.props.allBoms, \n                    currentProductId: this.props.currentProductId, \n                    currentBomId: this.props.currentBomId}));\n                break;\n\n            default:\n                break;\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"sidepanel sidepanel-left sidepanel-left-open pull-left\"}, \n                React.createElement(\"div\", {className: \"scrollable\"}, \n                    React.createElement(\"div\", {className: \"wrapper\"}, \n                        panel\n                    )\n                ), \n                React.createElement(\"div\", {className: \"closer\"}, \n                    React.createElement(Button, {bsStyle: \"link\", onClick: this._close}, \n                        React.createElement(Glyphicon, {glyph: \"chevron-left\"})\n                    )\n                ), \n                React.createElement(\"div\", {className: \"footer\"}, \n                    footer\n                )\n            )\n        );\n    },\n\n    _renderClose: function() {\n        return (\n            React.createElement(\"div\", {className: \"sidepanel sidepanel-left sidepanel-left-close pull-left\", onClick: this._open}, \n                React.createElement(\"div\", {className: \"closer\"}, \n                    React.createElement(Button, {bsStyle: \"link\", onClick: this._open}, \n                        React.createElement(Glyphicon, {glyph: \"chevron-right\"})\n                    )\n                )\n            )\n        );\n    },\n\n    _close: function(event) {\n        if (this.props.onClose) {\n            this.props.onClose();\n        }\n    },\n\n    _open: function() {\n        if (this.props.onOpen) {\n            this.props.onOpen();\n        }\n    },\n\n    _showProducts: function(event) {\n        this.setState({\n            view: \"products\",\n        });\n        this._open();\n    }\n});\n\nmodule.exports = LeftPanel;\n\n\n},{\"components/ProductList.jsx\":133,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],129:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar backboneMixin = require(\"backbone-react-component\");\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n    mixins: [backboneMixin],\n\n    propTypes: {\n        emptyText: React.PropTypes.string,\n        item: React.PropTypes.func.isRequired,\n        filter: React.PropTypes.func\n    },\n\n    render: function() {\n        if(this.props.emptyText && !_.size(this.getList()))\n        {\n            return (React.createElement(\"div\", {className: \"text-center text-muted\"}, this.props.emptyText));\n        }\n\n        return (\n            React.createElement(\"ul\", {className: \"list-group list-striped\"}, \n                this.getList().map(this.createItem)\n            )\n        );\n    },\n\n    createItem: function(item, index) {\n        return (React.createElement(this.props.item, {key: item.id || item.cid, model: item}));\n    },\n\n    getList: function() {\n        if(!this.props.filter) {\n            return this.getCollection();\n        }\n\n        return this.getCollection().filter(this.props.filter);\n    }\n});\n\n\n},{\"backbone-react-component\":2,\"react\":\"react\",\"underscore\":\"underscore\"}],130:[function(require,module,exports){\n\"use strict\";\n\nvar cx = require(\"react/lib/cx\");\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n    propTypes: {\n      title: React.PropTypes.string.isRequired,\n      saveLabel: React.PropTypes.string.isRequired,\n      dismissLabel: React.PropTypes.string,\n      backdrop: React.PropTypes.string,\n      onConfirm: React.PropTypes.func\n    },\n\n    render: function() {\n        var dismissHeader = null;\n        var dismissFooter = null;\n\n        if(this.props.dismissLabel) {\n            dismissHeader = (\n                React.createElement(\"button\", {type: \"button\", className: \"close\", \"data-dismiss\": \"modal\", tabIndex: \"-1\"}, \n                    React.createElement(\"span\", {\"aria-hidden\": \"true\"}, \"×\")\n                ));\n            dismissFooter = (\n                React.createElement(\"button\", {type: \"button\", className: \"btn btn-default\", \"data-dismiss\": \"modal\", tabIndex: \"2\"}, \n                    this.props.dismissLabel\n                ));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"modal fade\", id: \"modal\", \"data-backdrop\": this.props.backdrop}, \n                React.createElement(\"div\", {className: \"modal-dialog\"}, \n                    React.createElement(\"div\", {className: \"modal-content\"}, \n                        React.createElement(\"div\", {className: \"modal-header\"}, \n                            dismissHeader, \n                            React.createElement(\"h4\", {className: \"modal-title\"}, this.props.title)\n                        ), \n                        React.createElement(\"div\", {className: \"modal-body\"}, \n                            this.props.children\n                        ), \n                        React.createElement(\"div\", {className: \"modal-footer\"}, \n                            dismissFooter, \n                            React.createElement(\"button\", {\n                                type: \"button\", \n                                id: \"modalConfirm\", \n                                className: \"btn btn-primary\", \n                                \"data-dismiss\": \"modal\", \n                                tabIndex: \"1\", \n                                onClick: this.props.onConfirm}, \n                                this.props.saveLabel\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    }\n});\n\n\n\n},{\"react\":\"react\",\"react/lib/cx\":9}],131:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n    propTypes: {\n        title: React.PropTypes.string.isRequired,\n        description: React.PropTypes.string\n    },\n\n    render: function() {\n        return (\n            React.createElement(\"div\", {className: \"col-md-10 col-md-offset-1\"}, \n                React.createElement(\"div\", {className: \"panel panel-default\"}, \n                    React.createElement(\"div\", {className: \"panel-heading\"}, \n                        React.createElement(\"div\", {className: \"panel-title\"}, \n                            React.createElement(\"h4\", null, \n                                this.props.title, \n                                React.createElement(\"small\", null, \n                                    React.createElement(\"span\", {className: \"pull-right\"}, \n                                        this.props.description\n                                    )\n                                )\n                            )\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"panel-body\"}, \n                        this.props.children\n                    )\n                )\n            )\n        );\n    }\n});\n\n},{\"react\":\"react\"}],132:[function(require,module,exports){\n\"use strict\";\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar backboneMixin = require(\"backbone-react-component\");\nvar Modal = require(\"components/Modal.jsx\");\nvar cx = require(\"react/lib/cx\");\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n    mixins: [backboneMixin],\n\n    render: function() {\n        return (\n            React.createElement(\"li\", {className: \"list-group-item\"}, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-8\"}, \n                        React.createElement(\"h5\", {className: \"list-group-item-heading\"}, \n                            this.getModel().get(\"firstName\") + \" \" + this.getModel().get(\"lastName\")\n                        ), \n                        React.createElement(\"p\", {className: \"list-group-item-text\"}, this.getModel().get(\"email\"))\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-4\"}, \n                        React.createElement(\"div\", {className: \"btn-group pull-right\", role: \"group\"}, \n                            React.createElement(\"button\", {\n                                type: \"button\", \n                                onClick: this.cancelInvite, \n                                className: cx({\n                                    \"btn\": true,\n                                    \"btn-default\": true,\n                                    \"disabled\": this.getModel().get(\"status\") !== this.getModel().INVITE_STATUS_PENDING\n                                }), \n                                disabled: this.getModel().get(\"status\") !== this.getModel().INVITE_STATUS_PENDING}, \n                                React.createElement(\"span\", {className: \"fa fa-minus-circle\", \"aria-hidden\": \"true\"})\n                            ), \n                            React.createElement(\"button\", {type: \"button\", className: \"btn btn-default\", onClick: this.resendInvite}, \n                                React.createElement(\"span\", {className: \"fa fa-envelope\", \"aria-hidden\": \"true\"})\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    cancelInvite: function() {\n        AppDispatcher.dispatch({\n            action: {\n                type: \"show-modal\"\n            },\n            modal: (\n                React.createElement(Modal, {\n                    title: \"Cancel Invitation\", \n                    saveLabel: \"Confirm\", \n                    dismissLabel: \"Cancel\", \n                    onConfirm: this.onConfirmCancellation}, \n                    \"Are you sure you want to cancel the invitation for this user?\"\n                ))\n        });\n    },\n\n    resendInvite: function() {\n        AppDispatcher.dispatch({\n            action: {\n                type: \"show-modal\"\n            },\n            modal: (\n                React.createElement(Modal, {\n                    title: \"Resend Invitation\", \n                    saveLabel: \"Confirm\", \n                    dismissLabel: \"Cancel\", \n                    onConfirm: this.onConfirmResend}, \n                    \"Do you want to send an email invitation to this user?\"\n                ))\n        });\n    },\n\n    onConfirmCancellation: function() {\n        this.getModel().destroy({\n            wait: true\n        }).then(undefined, function(error) {\n            this.getModel().fetch();\n\n            AppDispatcher.dispatch({\n                action: {\n                    type: \"show-alert\"\n                },\n                alert: { type: \"danger\", message: error.message}\n            });\n        }.bind(this));\n    },\n\n    onConfirmResend: function() {\n        this.getModel().save({send: true}, {patch: true}).then(function(invite) {\n            AppDispatcher.dispatch({\n                action: {\n                    type: \"show-alert\"\n                },\n                alert: { type: \"success\", message: \"The invitation has successfully been sent.\"}\n            });\n        }, function(error) {\n            this.getModel().fetch();\n\n            AppDispatcher.dispatch({\n                action: {\n                    type: \"show-alert\"\n                },\n                alert: { type: \"danger\", message: error.message}\n            });\n        }.bind(this));\n\n    }\n});\n\n\n\n},{\"backbone-react-component\":2,\"components/Modal.jsx\":130,\"dispatcher/AppDispatcher\":152,\"react\":\"react\",\"react/lib/cx\":9}],133:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar cx = require(\"react/lib/cx\");\n\nvar ValidatedInput = require(\"components/forms/ValidatedInput.jsx\");\nvar ProductSublist = require(\"components/ProductSublist.jsx\");\nvar ProductActions = require(\"actions/ProductActions\");\nvar ProductModel = require(\"models/ProductModel\");\n\nvar ProductList = React.createClass({displayName: \"ProductList\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired,\n        currentProductId: React.PropTypes.oneOfType([\n            React.PropTypes.string,\n            React.PropTypes.number\n        ]),\n        currentBomId: React.PropTypes.oneOfType([\n            React.PropTypes.string,\n            React.PropTypes.number\n        ])\n    },\n\n    getInitialState: function() {\n        return {\n            isAdding: false\n        };\n    },\n\n    render: function() {\n        var currentProductId = this.props.currentProductId;\n        var currentBomId = this.props.currentBomId;\n        var allBoms = this.props.allBoms;\n        var newProduct;\n\n        if (this.state.isAdding) {\n            newProduct =\n                React.createElement(\"form\", {onSubmit: this.onSubmitNewProduct}, \n                    React.createElement(ValidatedInput, {\n                        ref: \"name\", \n                        name: \"name\", \n                        placeholder: \"Product Name\", \n                        onChange: this.onChangeNewProductName, \n                        onEnter: this.onSubmitNewProduct, \n                        type: \"text\", \n                        autoFocus: true}\n                    )\n                )\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"product-list\"}, \n                React.createElement(\"h4\", {className: \"title\"}, \n                    React.createElement(\"div\", {className: \"pull-right btn-toolbar\", role: \"toolbar\"}, \n                        React.createElement(\"button\", {className: \"btn btn-nobg btn-lg btn-default\", title: \"Add a Product\", type: \"button\", onClick: this.onToggleAddNewProduct}, \n                            React.createElement(\"span\", {className: cx({\"fa\":true, \"fa-plus-square-o\":!this.state.isAdding, \"fa-minus-square-o\":this.state.isAdding})})\n                        )\n                    ), \n                    React.createElement(\"span\", null, \"Products\")\n                ), \n                React.createElement(\"ul\", null, \n                \n                    this.props.allProducts.map(function(result) {\n                        return (\n                            React.createElement(ProductSublist, {\n                                key: result.id || result.cid, \n                                product: result, \n                                allBoms: allBoms, \n                                active: !currentBomId && !!currentProductId && !!(currentProductId == (result.id || result.cid)), \n                                currentBomId: currentBomId})\n                        );\n                    })\n                \n                ), \n                newProduct\n            )\n        );\n    },\n\n    onToggleAddNewProduct: function(event) {\n        this.setState({\n            isAdding: !this.state.isAdding\n        });\n    },\n\n    onSubmitNewProduct: function(event) {\n        var product;\n        var name\n\n        name = this.refs.name.state.value;\n        name = name ? name.trim() : name;\n\n        // TODO add validation\n\n        if (name) {\n            ProductActions.create(name);\n            product = this.props.allProducts.last();\n            this.transitionTo(\"product\", {productId: product.id || product.cid});\n        }\n\n        this.setState({\n            isAdding:false\n        });\n    }\n\n});\n\nmodule.exports = ProductList;\n\n\n},{\"actions/ProductActions\":83,\"components/ProductSublist.jsx\":134,\"components/forms/ValidatedInput.jsx\":142,\"models/ProductModel\":171,\"react\":\"react\",\"react-router\":\"react-router\",\"react/lib/cx\":9}],134:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Navigation = require(\"react-router\").Navigation;\n\nvar BomActions = require(\"actions/BomActions\");\nvar ProductActions = require(\"actions/ProductActions\");\nvar BomList = require(\"components/BomList.jsx\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar cx = require(\"react/lib/cx\");\n\nvar ProductSublist = React.createClass({displayName: \"ProductSublist\",\n    mixins: [Navigation],\n\n    propTypes: {\n        product: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired,\n        active: React.PropTypes.bool,\n        currentBomId: React.PropTypes.oneOfType([\n            React.PropTypes.string,\n            React.PropTypes.number\n        ])\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var product = this.props.product;\n        var allBoms = this.props.allBoms;\n        var currentBomId = this.props.currentBomId;\n        var childBoms;\n\n        childBoms = product.get(\"bomIds\").map(function(result) {\n            return allBoms.get(result);\n        });\n\n        childBoms = childBoms.map(function(result) {\n            return (React.createElement(BomList, {\n                key: result.id || result.cid, \n                bom: result, \n                allBoms: allBoms, \n                currentBomId: currentBomId, \n                productId: product.id || product.cid}));\n        });\n\n        return (\n            React.createElement(\"li\", {\n                className: cx({\n                product: true,\n                active: this.props.active })}, \n                React.createElement(\"div\", null, \n                    React.createElement(\"span\", null, \n                        React.createElement(Link, {to: \"product\", params: {productId: product.id || product.cid}}, product.get(\"name\"))\n                    )\n                ), \n                childBoms\n            )\n        );\n    }\n});\n\nmodule.exports = ProductSublist;\n\n\n},{\"actions/BomActions\":79,\"actions/ProductActions\":83,\"components/BomList.jsx\":115,\"components/TextInput.jsx\":139,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"react/lib/cx\":9}],135:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Modal = require(\"react-bootstrap\").Modal;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Button = require(\"react-bootstrap\").Button;\nvar SplitButton = require(\"react-bootstrap\").SplitButton;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar SaveViewModal = React.createClass({displayName: \"SaveViewModal\",\n\n  propTypes: {\n    onCancel: React.PropTypes.func.isRequired,\n    onSave: React.PropTypes.func.isRequired,\n    onDelete: React.PropTypes.func,\n    columns: React.PropTypes.array.isRequired,\n    view: React.PropTypes.object,\n    allViews: React.PropTypes.object.isRequired\n  },\n\n  getInitialState: function() {\n    return {\n        columns: this.props.columns.map(_.clone),\n        name: this.props.view ? this.props.view.get(\"name\") : undefined,\n        view: this.props.view\n    };\n  },\n\n  /**\n   * @return {object}\n   */\n  render: function() {\n    var columns = this.state.columns;\n    var deleteBtn;\n\n    if (this.state.view && this.props.onDelete) {\n        deleteBtn = (\n            React.createElement(Button, {className: \"pull-left\", bsStyle: \"danger\", onClick: this._onDelete}, \"Delete\"));\n    }\n\n    return (\n        React.createElement(Modal, React.__spread({},  this.props, \n            {onRequestHide: this.props.onCancel, \n            bsStyle: \"primary\", \n            title: \"Save Custom View\", \n            animation: false, \n            className: \"modal-save-view\"}), \n            React.createElement(\"div\", {className: \"modal-body\"}, \n                React.createElement(\"div\", null, \n                    React.createElement(\"form\", {className: \"form-horizontal\"}, \n                        React.createElement(\"div\", {className: \"form-group\"}, \n                            React.createElement(\"label\", {className: \"control-label col-xs-2\"}, \n                                React.createElement(\"span\", null, \"View\")\n                            ), \n                            React.createElement(\"div\", {className: \"col-xs-10\"}, \n                                this._renderViewSelector(), \n                                React.createElement(TextInput, {\n                                    ref: \"name\", \n                                    label: \"Name\", \n                                    placeholder: \"Name\", \n                                    value: this.state.name, \n                                    onSave: this._onSaveName, \n                                    onChange: this._onChangeName, \n                                    onCancel: this._onCancelName, \n                                    groupClassName: \"name-group\"})\n                            )\n                        ), \n                        React.createElement(\"div\", {className: \"form-group\"}, \n                            React.createElement(\"label\", {className: \"control-label col-xs-2\"}, \n                                React.createElement(\"span\", null, \"Columns\")\n                            ), \n                            React.createElement(\"div\", {className: \"col-xs-10\"}, \n                                React.createElement(\"ul\", {className: \"list-unstyled control-content\"}, \n                                columns.map(function(column, index) {\n                                    return (\n                                        React.createElement(\"li\", {className: column.removed ? \"removed\" : undefined, key: column.fieldId}, \n                                            React.createElement(\"span\", null, column.name), \n                                            React.createElement(ButtonToolbar, null, \n                                                React.createElement(Button, {\n                                                    className: \"btn-nobg\", \n                                                    bsStyle: \"default\", \n                                                    onClick: this._onMoveColumnUp.bind(this, index)}, \n                                                    React.createElement(Glyphicon, {glyph: \"triangle-top\"})\n                                                ), \n                                                React.createElement(Button, {\n                                                    className: \"btn-nobg\", \n                                                    bsStyle: \"default\", \n                                                    onClick: this._onMoveColumnDown.bind(this, index)}, \n                                                    React.createElement(Glyphicon, {glyph: \"triangle-bottom\"})\n                                                ), \n                                                column.removed ? (\n                                                    React.createElement(Button, {\n                                                        className: \"btn-nobg\", \n                                                        bsStyle: \"default\", \n                                                        onClick: this._onAddColumn.bind(this, index)}, \n                                                        React.createElement(Glyphicon, {glyph: \"ok-circle\"})\n                                                    )) : (\n                                                    React.createElement(Button, {\n                                                        className: \"btn-nobg\", \n                                                        bsStyle: \"danger\", \n                                                        onClick: this._onRemoveColumn.bind(this, index)}, \n                                                        React.createElement(Glyphicon, {glyph: \"remove-circle\"})\n                                                    )\n                                                )\n                                            )\n                                        ));\n                                }, this)\n                                )\n                            )\n                        )\n                    )\n                )\n            ), \n            React.createElement(\"div\", {className: \"modal-footer\"}, \n                deleteBtn, \n                React.createElement(Button, {onClick: this.props.onCancel}, \"Close\"), \n                React.createElement(Button, {bsStyle: \"primary\", onClick: this._onSave, disabled: !this._canSave()}, \"Save\")\n            )\n        )\n        );\n    },\n\n    _renderViewSelector: function() {\n        var allViews = this.props.allViews;\n        var view = this.state.view;\n        var title = view ? view.get(\"name\") : \"New View\";\n        var options;\n\n        // Get the saved custom views (if any)\n        options = allViews.getSaved().map(function(view) {\n            return React.createElement(MenuItem, {key: view.id || view.cid, eventKey: view.id || view.cid}, view.get(\"name\"))\n        });\n\n        if (!_.isEmpty(options)) {\n            options.push(React.createElement(MenuItem, {key: \"new-divider\", divider: true}));\n\n            // Add option to save a new view\n            options.push(React.createElement(MenuItem, {\n                key: \"_new\", \n                eventKey: \"_new\"}, \"New View\"));\n        }\n\n        return (\n            React.createElement(SplitButton, {\n                bsStyle: \"default\", \n                title: title, \n                onSelect: this._onSelectView}, \n                options\n            ));\n    },\n\n    // View\n\n    _onSelectView: function(id) {\n        var view;\n\n        if (id === \"_new\") {\n            this.setState({\n                view: undefined,\n                name: \"\"\n            })\n        }\n        else {\n            view = this.props.allViews.get(id);\n            if (!view) { return; }\n\n            this.setState({\n                view: view,\n                name: view.get(\"name\")\n            });\n        }\n    },\n\n    // Name\n\n    _onCancelName: function() {},\n\n    _onChangeName: function(name) {\n        this.setState({name: name});\n    },\n\n    _onSaveName: function(name) {\n        this.setState({name: name});\n    },\n\n    // Columns\n\n    _onMoveColumnUp: function(index) {\n        var columns;\n\n        if (index < 1) { return; }\n\n        columns = this.state.columns.map(_.clone);\n        columns[index] = columns.splice(index-1, 1, columns[index])[0];\n        this.setState({columns: columns});    },\n\n    _onMoveColumnDown: function(index) {\n        var columns;\n\n        if (index >= this.state.columns.length-1) { return; }\n\n        columns = this.state.columns.map(_.clone);\n        columns[index] = columns.splice(index+1, 1, columns[index])[0];\n\n        this.setState({columns: columns});\n    },\n\n    _onRemoveColumn: function(index) {\n        var columns = this.state.columns.map(_.clone);\n        columns[index].removed = true;\n        this.setState({columns: columns});\n    },\n\n    _onAddColumn: function(index) {\n        var columns = this.state.columns.map(_.clone);\n        delete columns[index].removed;\n        this.setState({columns: columns});\n    },\n\n    // View\n\n    _canSave: function() {\n        return !_.isEmpty(this.state.name) &&\n            !_.isEmpty(_.filter(this.state.columns, function(column) {\n                return !column.removed;\n            }));\n    },\n\n    _onSave: function(event) {\n        var columns = this.state.columns.map(_.clone);\n        var view = this.state.view;\n\n        columns = _.filter(columns, function(column) {\n            return !column.removed;\n        });\n\n        this.props.onSave(this.state.name, _.pluck(columns, \"fieldId\"), view ? view.id || view.cid : undefined);\n    },\n\n    _onDelete: function(event) {\n        if (!this.state.view || !this.props.onDelete) { return; }\n        this.props.onDelete( this.state.view.id || this.state.view.cid );\n    }\n\n});\n\nmodule.exports = SaveViewModal;\n\n\n},{\"components/TextInput.jsx\":139,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"underscore\":\"underscore\"}],136:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Modal = require(\"components/Modal.jsx\");\n\nvar SessionTimeoutModal = React.createClass({displayName: \"SessionTimeoutModal\",\n    /**\n    * @return {object}\n    */\n    render: function() {\n        return (\n            React.createElement(Modal, {\n                title: \"Your Session Timed Out\", \n                saveLabel: \"Sign In\", \n                backdrop: \"static\", \n                onConfirm: this._redirect}, \n                \"You've been idle for for some time. We signed you out for security reasons. Please sign back in to continue.\"\n            )\n        );\n    },\n\n    _redirect: function() {\n        window.location.href = \"/user/signout\";\n    }\n});\n\nmodule.exports = SessionTimeoutModal;\n\n\n},{\"components/Modal.jsx\":130,\"react\":\"react\"}],137:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\n\nvar SimpleHeader = React.createClass({displayName: \"SimpleHeader\",\n    render: function() {\n        return (\n\t\t\tReact.createElement(\"header\", {className: \"simple-header text-center\"}, \n                React.createElement(\"div\", {className: \"logo\"}, React.createElement(\"span\", null, \"BOM SQUAD\"))\n            )\n        );\n    }\n});\n\nmodule.exports = SimpleHeader;\n\n},{\"react\":\"react\"}],138:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\n\nvar Footer = require(\"components/Footer.jsx\");\nvar SimpleHeader = require(\"components/SimpleHeader.jsx\");\n\nvar NavigationErrorModel = require(\"models/NavigationErrorModel\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n    propTypes: {\n        statusCode: React.PropTypes.string\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var model = new NavigationErrorModel({statusCode: this.props.statusCode});\n\n        return (\n            React.createElement(\"div\", {className: \"container-fluid dark-background\"}, \n                React.createElement(SimpleHeader, null), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6 col-md-offset-3 col-sm-10 col-sm-offset-1\"}, \n                        this.props.children\n                    )\n                ), \n                React.createElement(Footer, null)\n            )\n        );\n    }\n\n});\n\n\n},{\"components/Footer.jsx\":124,\"components/SimpleHeader.jsx\":137,\"models/NavigationErrorModel\":170,\"react\":\"react\"}],139:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Input = require(\"react-bootstrap\").Input;\n\nvar InputConstants = require(\"constants/InputConstants\");\n\nvar TextInput = React.createClass({displayName: \"TextInput\",\n\n    propTypes: {\n        type: React.PropTypes.string,\n        label: React.PropTypes.string,\n        id: React.PropTypes.string,\n        value: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        help: React.PropTypes.string,\n        error: React.PropTypes.string,\n        autoFocus: React.PropTypes.bool,\n        hasFeedback: React.PropTypes.bool,\n        className: React.PropTypes.string,\n        groupClassName: React.PropTypes.string,\n        wrapperClassName: React.PropTypes.string,\n        onSave: React.PropTypes.func,\n        onChange: React.PropTypes.func,\n        onCancel: React.PropTypes.func,\n        onNext: React.PropTypes.func,\n        validate: React.PropTypes.func\n    },\n\n    getInitialState: function(props) {\n        props = props || this.props;\n\n        return {\n            value: props.value || \"\"\n        };\n    },\n\n    getInputDOMNode: function() {\n        return this.refs.input.getInputDOMNode();\n    },\n\n    componentDidMount: function() {\n        var input = this.getInputDOMNode();\n        input.focus();\n        input.select();\n    },\n\n    getValue: function() {\n        return this.state.value;\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() /*object*/ {\n        return (\n            React.createElement(Input, {\n                ref: \"input\", \n                label: this.props.label, \n                labelClassName: \"sr-only\", \n                type: this.props.type || \"text\", \n                className: this.props.className, \n                id: this.props.id, \n                placeholder: this.props.placeholder, \n                onBlur: this._onSave, \n                onChange: this._onChange, \n                onKeyDown: this._onKeyDown, \n                value: this.state.value, \n                autoFocus: this.props.autoFocus, \n                help: this.props.error ? this.props.error : this.props.help, \n                bsStyle: this.props.error ? \"error\" : undefined, \n                hasFeedback: this.props.hasFeedback, \n                wrapperClassName: this.props.wrapperClassName, \n                groupClassName: this.props.groupClassName})\n        );\n    },\n\n    /**\n     * Invokes the callback passed in as onSave, allowing this component to be\n     * used in different ways.\n     */\n    _onSave: function() {\n        if (this.props.validate) {\n            this.props.validate(this.state.value);\n        }\n\n        if (!this.props.onSave) { return; }\n        this.props.onSave(this.state.value);\n    },\n\n    /**\n     * @param {object} event\n     */\n    _onChange: function(/*object*/ event) {\n        if (this.props.onChange) {\n            this.props.onChange(event.target.value);\n        }\n\n        this.setState({\n            value: event.target.value\n        });\n    },\n\n    _onCancel: function() {\n        if (!this.props.onCancel) { return; }\n        this.props.onCancel();\n    },\n\n    _onKeyDown: function(event) {\n        switch(event.keyCode) {\n            case InputConstants.ENTER:\n                // Do nothing for multiline textarea\n                if (this.props.type === \"textarea\") { return; }\n\n                // Save for single line input\n                this._onSave();\n                event.preventDefault();\n                break;\n\n            case InputConstants.ESC:\n                this._onCancel();\n                event.preventDefault();\n                break;\n\n            case InputConstants.TAB:\n                this._onSave();\n                if (this.props.onNext) {\n                    this.props.onNext();\n                }\n                event.preventDefault();\n                break;\n        }\n    }\n});\n\nmodule.exports = TextInput;\n\n\n},{\"constants/InputConstants\":149,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\"}],140:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar backboneMixin = require(\"backbone-react-component\");\nvar cx = require(\"react/lib/cx\");\nvar React = require(\"react\");\nvar ValidatedInput = require(\"components/forms/ValidatedInput.jsx\");\n\nvar EmailInviteForm = React.createClass({displayName: \"EmailInviteForm\",\n    mixins: [backboneMixin],\n\n    propTypes: {\n        isEmailInvited: React.PropTypes.func.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            errors: {}\n        };\n    },\n\n    render: function() {\n        var personIcon = React.createElement(\"span\", {className: \"fa fa-user\", \"aria-hidden\": \"true\"});\n        var emailIcon = React.createElement(\"span\", {className: \"fa fa-envelope\", \"aria-hidden\": \"true\"});\n        var buttonText = this.getButtonText();\n        var statusFeedback = this.getStatusFeedback();\n        return (\n            React.createElement(\"form\", {\n                id: \"email-invite-form\", \n                ref: \"form\", \n                className: \"form\", \n                autoComplete: \"off\", \n                onSubmit: this.onFormSubmit}, \n                React.createElement(\"div\", {className: \"form-group\"}, \n                    React.createElement(\"div\", {className: \"row\"}, \n                        React.createElement(\"div\", {className: \"col-md-5\"}, \n                            React.createElement(ValidatedInput, {\n                                ref: \"firstName\", \n                                name: \"firstName\", \n                                icon: personIcon, \n                                onChange: this.onChange, \n                                placeholder: \"First Name\", \n                                errorLabel: this.state.errors.firstName, \n                                displayFeedback: this.getModel().has(\"firstName\")}\n                            )\n                        ), \n                        React.createElement(\"div\", {className: \"col-md-5\"}, \n                            React.createElement(ValidatedInput, {\n                                ref: \"lastName\", \n                                name: \"lastName\", \n                                icon: personIcon, \n                                onChange: this.onChange, \n                                placeholder: \"Last Name\", \n                                errorLabel: this.state.errors.lastName, \n                                displayFeedback: this.getModel().has(\"lastName\")}\n                            )\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-10\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"email\", \n                            name: \"email\", \n                            icon: emailIcon, \n                            onChange: this.onChange, \n                            placeholder: \"Email\", \n                            type: \"email\", \n                            errorLabel: this.state.errors.email, \n                            displayFeedback: this.getModel().has(\"email\")}\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-2\"}, \n                        React.createElement(\"button\", {\n                            type: \"submit\", \n                            className: cx({\n                                \"btn\": true,\n                                \"btn-default\": true,\n                                \"bom-button\": true,\n                                \"disabled\": !this.canSubmit()\n                            }), \n                            disabled: !this.canSubmit(), \n                            value: \"submit\"}, buttonText)\n                    )\n                ), \n                statusFeedback\n            )\n        );\n    },\n\n    canSubmit: function() {\n        return _.isEmpty(this.state.errors) &&\n                !!this.getModel().get(\"email\") &&\n                this.getModel().get(\"state\") !== this.getModel().STATE_SENDING;\n    },\n\n    getStatusFeedback: function(){\n        if(this.getModel().get(\"state\") === this.getModel().STATE_IDLE ||\n           this.getModel().get(\"state\") === this.getModel().STATE_SENDING) {\n            return null;\n        }\n\n        var message =\n            (this.getModel().get(\"state\") === this.getModel().STATE_SUCCESS) ?\n            \"The invitation has been sent!\" :\n            \"A problem occurred while sending. Please try again.\";\n\n        var statusMessage = (React.createElement(\"p\", {className: cx({\n            \"text-center\": true,\n            \"text-danger\": (this.getModel().get(\"state\") === this.getModel().STATE_ERROR),\n            \"text-success\": (this.getModel().get(\"state\") === this.getModel().STATE_SUCCESS)\n        })}, message));\n        return (\n            React.createElement(\"div\", {className: \"row\"}, \n                React.createElement(\"div\", {className: \"col-md-12\"}, \n                    React.createElement(\"hr\", null)\n                ), \n                React.createElement(\"div\", {className: \"col-md-12\"}, \n                    statusMessage\n                )\n            ));\n    },\n\n    getButtonText: function(){\n        if(this.getModel().get(\"state\") === this.getModel().STATE_SENDING) {\n            return (\n                React.createElement(\"div\", {className: \"spinner\"}, \n                    React.createElement(\"div\", {className: \"bounce1\"}), \n                    React.createElement(\"div\", {className: \"bounce2\"}), \n                    React.createElement(\"div\", {className: \"bounce3\"})\n                )\n            );\n        } else {\n            return \"Send\";\n        }\n    },\n\n    onChange: function(event) {\n        this.getModel().set(event.target.name, event.target.value);\n        var errors = this.getModel().validate() || {};\n        if(event.target.name === \"email\" && this.props.isEmailInvited(event.target.value)) {\n            errors.email = \"An invitation already exists for this email\";\n        }\n        this.setState({errors: errors});\n    },\n\n    onFormSubmit: function(e) {\n        e.preventDefault();\n        this.getModel().save().then(function() {\n            this.reset();\n        }.bind(this));\n    },\n\n    reset: function() {\n        this.refs.firstName.reset();\n        this.refs.lastName.reset();\n        this.refs.email.reset();\n    }\n});\n\nmodule.exports = EmailInviteForm;\n\n\n},{\"backbone-react-component\":2,\"components/forms/ValidatedInput.jsx\":142,\"react\":\"react\",\"react/lib/cx\":9,\"underscore\":\"underscore\"}],141:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar backboneMixin = require(\"backbone-react-component\");\nvar cx = require(\"react/lib/cx\");\n\nvar ValidatedInput = require(\"components/forms/ValidatedInput.jsx\");\n\nvar UserAccountForm = React.createClass({displayName: \"UserAccountForm\",\n    mixins: [backboneMixin],\n\n    getInitialState: function() {\n        return {\n            profileOpen: false,\n            profileSaving: false,\n            profileFail: null,\n            profileSuccess: null,\n            profileErrors: {},\n            emailOpen: false,\n            emailSaving: false,\n            emailFail: null,\n            emailSuccess: null,\n            emailErrors: {},\n            passwordOpen: false,\n            passwordSaving: false,\n            passwordFail: null,\n            passwordSuccess: null,\n            passwordErrors: {}\n        };\n    },\n\n    render: function() {\n        return (\n            React.createElement(\"div\", {className: \"user-account-form\"}, \n                this.renderProfile(), \n                this.renderEmail(), \n                this.renderPassword()\n            )\n        );\n    },\n\n    renderProfile: function() {\n        return (\n            React.createElement(\"form\", {className: \"user-profile-form\", onReset: this.toggleProfile, onSubmit: this.onSubmitProfile}, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-4\"}, \n                        React.createElement(\"label\", null, \"Profile\")\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(\"p\", null, this.renderFullName())\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-2 text-right\"}, \n                        React.createElement(\"button\", {className: \"btn btn-default btn-lg btn-nobg\", onClick: this.toggleProfile}, \n                            React.createElement(\"span\", {className: cx({\"fa\":true, \"fa-pencil\": !this.state.profileOpen, \"fa-chevron-down\": this.state.profileOpen})})\n                        )\n                    )\n                ), \n                this.state.profileOpen ? this.renderProfileForm() : null\n            )\n        );\n    },\n\n    renderProfileForm: function() {\n        var company = this.getModel().getCurrentCompany();\n\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"firstName\", \n                            name: \"firstName\", \n                            label: \"First Name\", \n                            value: this.getModel().get(\"firstName\"), \n                            onChange: this.onChangeProfile, \n                            onEnter: this.onSubmitProfile, \n                            type: \"text\", \n                            errorLabel: this.state.profileErrors.firstName, \n                            displayFeedback: !!this.state.profileErrors.firstName, \n                            autoComplete: \"firstname\"}\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"lastName\", \n                            name: \"lastName\", \n                            label: \"Last Name\", \n                            value: this.getModel().get(\"lastName\"), \n                            onChange: this.onChangeProfile, \n                            onEnter: this.onSubmitProfile, \n                            type: \"text\", \n                            errorLabel: this.state.profileErrors.lastName, \n                            displayFeedback: !!this.state.profileErrors.lastName, \n                            autoComplete: \"lastname\"}\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"companyName\", \n                            name: \"companyName\", \n                            label: \"Company Name\", \n                            value: company ? company.name : null, \n                            onChange: this.onChangeProfile, \n                            onEnter: this.onSubmitProfile, \n                            type: \"text\", \n                            errorLabel: this.state.profileErrors.companyName, \n                            displayFeedback: !!this.state.profileErrors.companyName, \n                            autoComplete: \"company\"}\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"displayName\", \n                            name: \"displayName\", \n                            label: \"Display Name\", \n                            value: this.getModel().get(\"displayName\"), \n                            onChange: this.onChangeProfile, \n                            onEnter: this.onSubmitProfile, \n                            type: \"text\", \n                            errorLabel: this.state.profileErrors.displayName, \n                            displayFeedback: !!this.state.profileErrors.displayName}\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-12 text-right\"}, \n                        React.createElement(\"div\", {className: \"form-group clearfix\"}, \n                            React.createElement(\"div\", {className: \"btn-toolbar pull-right\"}, \n                                React.createElement(\"div\", {className: \"btn-group\"}, \n                                    React.createElement(\"button\", {\n                                        type: \"reset\", \n                                        className: \"btn btn-default btn-lg\", \n                                        value: \"cancel\"}, \"Cancel\")\n                                ), \n                                React.createElement(\"div\", {className: \"btn-group\"}, \n                                    React.createElement(\"button\", {\n                                        type: \"submit\", \n                                        className: cx({\n                                            \"btn\": true,\n                                            \"btn-primary\": true,\n                                            \"btn-lg\": true,\n                                            \"disabled\": !_.isEmpty(this.state.profileErrors)\n                                        }), \n                                        disabled: !_.isEmpty(this.state.profileErrors), \n                                        value: \"submit\"}, this.renderProfileButtonText())\n                                )\n                            )\n                        ), \n                        this.renderProfileStatusFeedback()\n                    )\n                )\n            )\n        );\n    },\n\n    renderProfileButtonText: function() {\n        if(this.state.profileSaving) {\n            return (\n                React.createElement(\"div\", {className: \"spinner\"}, \n                    React.createElement(\"div\", {className: \"bounce1\"}), \n                    React.createElement(\"div\", {className: \"bounce2\"}), \n                    React.createElement(\"div\", {className: \"bounce3\"})\n                )\n            );\n        } else {\n            return \"Save\";\n        }\n    },\n\n    renderProfileStatusFeedback: function() {\n        if (!this.state.profileFail && !this.state.profileSuccess) {\n            return null;\n        }\n\n        return (\n            React.createElement(\"div\", {className: cx({\n                    \"text-danger\": !!this.state.profileFail,\n                    \"text-success\": !!this.state.profileSuccess,\n                    \"text-center\": true\n                })}, \n                this.state.profileFail || this.state.profileSuccess\n            ));\n    },\n\n    onSubmitProfile: function(event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        var attrs = {\n            firstName: this.refs.firstName.state.value,\n            lastName: this.refs.lastName.state.value,\n            companyName: this.refs.companyName.state.value,\n            displayName: this.refs.displayName.state.value\n        };\n\n        var company = this.getModel().getCurrentCompany() || {};\n        if (attrs.firstName === this.getModel().get(\"firstName\") &&\n            attrs.lastName === this.getModel().get(\"lastName\") &&\n            attrs.companyName === company.name &&\n            attrs.displayName === this.getModel().get(\"displayName\")) {\n            this.toggleProfile();\n            return;\n        }\n\n        this.setState({\n            profileSaving: true,\n            profileFail: null,\n            profileSuccess: null\n        });\n\n        this.getModel().saveProfile(attrs).then(function(user) {\n            this.setState({\n                profileSuccess: \"Your profile has been saved!\",\n                profileSaving: false\n            });\n        }.bind(this), function(error) {\n            this.setState({\n                profileErrors: error.getValidationErrors() || {},\n                profileFail: _.isEmpty(error.getValidationErrors()) ? error.message : null,\n                profileSaving: false\n            });\n        }.bind(this));\n    },\n\n    renderFullName: function() {\n        var firstName = this.getModel().get(\"firstName\");\n        var lastName = this.getModel().get(\"lastName\");\n\n        var fullName = \"\";\n        fullName += firstName ? firstName : \"\";\n        fullName += lastName ? (\" \" + lastName) : \"\";\n        return fullName.trim();\n    },\n\n    renderEmail: function() {\n        return (\n            React.createElement(\"form\", {className: \"user-email-form\", onReset: this.toggleEmail, onSubmit: this.onSubmitEmail, autoComplete: \"off\"}, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-4\"}, \n                        React.createElement(\"label\", null, \"Email\")\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(\"p\", null, this.getModel().get(\"email\"))\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-2 text-right\"}, \n                        React.createElement(\"button\", {className: \"btn btn-default btn-lg btn-nobg\", onClick: this.toggleEmail}, \n                            React.createElement(\"span\", {className: cx({\"fa\":true, \"fa-pencil\": !this.state.emailOpen, \"fa-chevron-down\": this.state.emailOpen})})\n                        )\n                    )\n                ), \n                this.state.emailOpen ? this.renderEmailForm() : null\n            )\n        );\n    },\n\n    renderEmailForm: function() {\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"email\", \n                            name: \"email\", \n                            placeholder: \"Email\", \n                            value: this.getModel().get(\"email\"), \n                            onChange: this.onChangeEmail, \n                            onEnter: this.onSubmitEmail, \n                            type: \"text\", \n                            errorLabel: this.state.emailErrors.email, \n                            displayFeedback: !!this.state.emailErrors.email, \n                            autoComplete: \"off\"}\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"currentPasswordForEmail\", \n                            name: \"currentPassword\", \n                            placeholder: \"Confirm Current Password\", \n                            onChange: this.onChangeEmail, \n                            onEnter: this.onSubmitEmail, \n                            type: \"password\", \n                            errorLabel: this.state.emailErrors.currentPassword, \n                            displayFeedback: !!this.state.emailErrors.currentPassword, \n                            autoComplete: \"off\"}\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-12 text-right\"}, \n                        React.createElement(\"div\", {className: \"form-group clearfix\"}, \n                            React.createElement(\"div\", {className: \"btn-toolbar pull-right\"}, \n                                React.createElement(\"div\", {className: \"btn-group\"}, \n                                    React.createElement(\"button\", {\n                                        type: \"reset\", \n                                        className: \"btn btn-default btn-lg\", \n                                        value: \"cancel\"}, \"Cancel\")\n                                ), \n                                React.createElement(\"div\", {className: \"btn-group\"}, \n                                    React.createElement(\"button\", {\n                                        type: \"submit\", \n                                        className: cx({\n                                            \"btn\": true,\n                                            \"btn-primary\": true,\n                                            \"btn-lg\": true,\n                                            \"disabled\": !_.isEmpty(this.state.emailErrors)\n                                        }), \n                                        disabled: !_.isEmpty(this.state.emailErrors), \n                                        value: \"submit\"}, this.renderEmailButtonText())\n                                )\n                            )\n                        ), \n                        this.renderEmailStatusFeedback()\n                    )\n                )\n            )\n        );\n    },\n\n    renderEmailButtonText: function() {\n        if(this.state.emailSaving) {\n            return (\n                React.createElement(\"div\", {className: \"spinner\"}, \n                    React.createElement(\"div\", {className: \"bounce1\"}), \n                    React.createElement(\"div\", {className: \"bounce2\"}), \n                    React.createElement(\"div\", {className: \"bounce3\"})\n                )\n            );\n        } else {\n            return \"Save\";\n        }\n    },\n\n    renderEmailStatusFeedback: function() {\n        if (!this.state.emailFail && !this.state.emailSuccess) {\n            return null;\n        }\n\n        return (\n            React.createElement(\"div\", {className: cx({\n                    \"text-danger\": !!this.state.emailFail,\n                    \"text-success\": !!this.state.emailSuccess,\n                    \"text-center\": true\n                })}, \n                this.state.emailFail || this.state.emailSuccess\n            ));\n    },\n\n    onSubmitEmail: function(event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.refs.email.state.value === this.getModel().get(\"email\")) {\n            this.toggleEmail();\n            return;\n        }\n        else if (!this.refs.currentPasswordForEmail.state.value) {\n            this.setState({\n                emailErrors: { currentPassword: \"Please confirm your current password\"}\n            });\n            return;\n        }\n\n        var attrs = {\n            email: this.refs.email.state.value,\n            currentPassword: this.refs.currentPasswordForEmail.state.value,\n        };\n\n        this.setState({\n            emailSaving: true,\n            emailFail: null,\n            emailSuccess: null\n        });\n\n        this.getModel().saveEmail(attrs).then(function(user) {\n            this.setState({\n                emailSuccess: \"Your email has been saved!\",\n                emailSaving: false\n            });\n\n            this.refs.currentPasswordForEmail.setState({value: null});\n        }.bind(this), function(error) {\n            this.setState({\n                emailErrors: error.getValidationErrors() || {},\n                emailFail: _.isEmpty(error.getValidationErrors()) ? error.message : null,\n                emailSaving: false\n            });\n        }.bind(this));\n    },\n\n    renderPassword: function() {\n        return (\n            React.createElement(\"form\", {className: \"user-email-form\", onReset: this.togglePassword, onSubmit: this.onSubmitPassword, autoComplete: \"off\"}, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-4\"}, \n                        React.createElement(\"label\", null, \"Password\")\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(\"p\", null, \"********\")\n                    ), \n                    React.createElement(\"div\", {className: \"col-md-2 text-right\"}, \n                        React.createElement(\"button\", {className: \"btn btn-default btn-lg btn-nobg\", onClick: this.togglePassword}, \n                            React.createElement(\"span\", {className: cx({\"fa\":true, \"fa-pencil\": !this.state.passwordOpen, \"fa-chevron-down\": this.state.passwordOpen})})\n                        )\n                    )\n                ), \n                this.state.passwordOpen ? this.renderPasswordForm() : null\n            )\n        );\n    },\n\n    renderPasswordForm: function() {\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"currentPasswordForPassword\", \n                            name: \"currentPassword\", \n                            label: \"Confirm Current Password\", \n                            onChange: this.onChangePassword, \n                            onEnter: this.onSubmitPassword, \n                            type: \"password\", \n                            errorLabel: this.state.passwordErrors.currentPassword, \n                            displayFeedback: !!this.state.passwordErrors.currentPassword, \n                            autoComplete: \"off\"}\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"password\", \n                            name: \"password\", \n                            label: \"New Password\", \n                            onChange: this.onChangePassword, \n                            onEnter: this.onSubmitPassword, \n                            type: \"password\", \n                            errorLabel: this.state.passwordErrors.password, \n                            displayFeedback: !!this.state.passwordErrors.password, \n                            autoComplete: \"off\"}\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6\"}, \n                        React.createElement(ValidatedInput, {\n                            ref: \"confirmPassword\", \n                            name: \"confirmPassword\", \n                            label: \"Confirm New Password\", \n                            onChange: this.onChangePassword, \n                            onEnter: this.onSubmitPassword, \n                            type: \"password\", \n                            errorLabel: this.state.passwordErrors.confirmPassword, \n                            displayFeedback: !!this.state.passwordErrors.confirmPassword, \n                            autoComplete: \"off\"}\n                        )\n                    )\n                ), \n                React.createElement(\"div\", {className: \"row\"}, \n                    React.createElement(\"div\", {className: \"col-md-6 text-right\"}, \n                        React.createElement(\"div\", {className: \"form-group clearfix\"}, \n                            React.createElement(\"div\", {className: \"btn-toolbar pull-right\"}, \n                                React.createElement(\"div\", {className: \"btn-group\"}, \n                                    React.createElement(\"button\", {\n                                        type: \"reset\", \n                                        className: \"btn btn-default btn-lg\", \n                                        value: \"cancel\"}, \"Cancel\")\n                                ), \n                                React.createElement(\"div\", {className: \"btn-group\"}, \n                                    React.createElement(\"button\", {\n                                        type: \"submit\", \n                                        className: cx({\n                                            \"btn\": true,\n                                            \"btn-primary\": true,\n                                            \"btn-lg\": true,\n                                            \"disabled\": !_.isEmpty(this.state.passwordErrors)\n                                        }), \n                                        disabled: !_.isEmpty(this.state.passwordErrors), \n                                        value: \"submit\"}, this.renderPasswordButtonText())\n                                )\n                            )\n                        ), \n                        this.renderPasswordStatusFeedback()\n                    )\n                )\n            )\n        );\n    },\n\n\n    renderPasswordButtonText: function() {\n        if(this.state.passwordSaving) {\n            return (\n                React.createElement(\"div\", {className: \"spinner\"}, \n                    React.createElement(\"div\", {className: \"bounce1\"}), \n                    React.createElement(\"div\", {className: \"bounce2\"}), \n                    React.createElement(\"div\", {className: \"bounce3\"})\n                )\n            );\n        } else {\n            return \"Save\";\n        }\n    },\n\n    renderPasswordStatusFeedback: function() {\n        if (!this.state.passwordFail && !this.state.passwordSuccess) {\n            return null;\n        }\n\n        return (\n            React.createElement(\"div\", {className: cx({\n                    \"text-danger\": !!this.state.passwordFail,\n                    \"text-success\": !!this.state.passwordSuccess,\n                    \"text-center\": true\n                })}, \n                this.state.passwordFail || this.state.passwordSuccess\n            ));\n    },\n\n    onSubmitPassword: function(event) {\n        var errors = {};\n        var attrs;\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (!this.refs.currentPasswordForPassword.state.value) {\n            errors = _.extend(errors, { currentPassword: \"Please confirm your current password\"});\n        }\n\n        if (!this.refs.password.state.value) {\n            errors = _.extend(errors, { password: \"Please enter your new password\"});\n        }\n\n        if (!this.refs.confirmPassword.state.value) {\n            errors = _.extend(errors, { confirmPassword: \"Please confirm your new password\"});\n        }\n        else if (this.refs.confirmPassword.state.value !== this.refs.password.state.value) {\n            errors = _.extend(errors, { confirmPassword: \"This password does not match your new password\"});\n        }\n\n        if (!_.isEmpty(errors)) {\n            this.setState({\n                passwordErrors: errors\n            });\n            return;\n        }\n\n        attrs = {\n            password: this.refs.password.state.value,\n            currentPassword: this.refs.currentPasswordForPassword.state.value,\n        };\n\n        this.setState({\n            passwordSaving: true,\n            passwordFail: null,\n            passwordSuccess: null\n        });\n\n        this.getModel().savePassword(attrs).then(function(user) {\n            this.setState({\n                passwordSuccess: \"Your password has been saved!\",\n                passwordSaving: false\n            });\n\n            this.refs.currentPasswordForPassword.setState({value: null});\n            this.refs.password.setState({value: null});\n            this.refs.confirmPassword.setState({value: null});\n        }.bind(this), function(error) {\n            this.setState({\n                passwordErrors: error.getValidationErrors() || {},\n                passwordFail: error.message,\n                passwordSaving: false\n            });\n        }.bind(this));\n    },\n\n    toggleProfile: function(event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.setState({\n            profileOpen: !this.state.profileOpen,\n            profileFail: null,\n            profileSuccess: null,\n            profileErrors: {}\n        });\n    },\n\n    toggleEmail: function(event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.setState({\n            emailOpen: !this.state.emailOpen,\n            emailFail: null,\n            emailSuccess: null,\n            emailErrors: {}\n        });\n    },\n\n    togglePassword: function(event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.setState({\n            passwordOpen: !this.state.passwordOpen,\n            passwordFail: null,\n            passwordSuccess: null,\n            passwordErrors: {}\n        });\n    },\n\n    onChangeProfile: function(event) {\n        var value = {}\n        var errors;\n\n        value[event.target.name] = event.target.value;\n        errors = this.getModel().preValidate(value) || {};\n\n        if (!errors[event.target.name]) {\n            errors = _.omit(this.state.profileErrors, event.target.name);\n        }\n        else {\n            errors = _.extend(this.state.profileErrors, errors);\n        }\n\n        this.setState({profileErrors: errors});\n    },\n\n    onChangeEmail: function(event) {\n        var value = {}\n        var errors;\n\n        value[event.target.name] = event.target.value;\n        errors = this.getModel().preValidate(value) || {};\n\n        if (event.target.name === \"currentPassword\" && !event.target.value) {\n            errors = _.extend(errors, { currentPassword: \"Please confirm your current password\"});\n        }\n\n        if (!errors[event.target.name]) {\n            errors = _.omit(this.state.emailErrors, event.target.name);\n        }\n        else {\n            errors = _.extend(this.state.emailErrors, errors);\n        }\n\n        this.setState({emailErrors: errors});\n    },\n\n    onChangePassword: function(event) {\n        var value = {}\n        var errors;\n        var allErrors = _.clone(this.state.passwordErrors);\n\n        value[event.target.name] = event.target.value;\n        errors = this.getModel().preValidate(value) || {};\n\n        if (event.target.name === \"currentPassword\") {\n            if (!event.target.value) {\n                errors = _.extend(errors, { currentPassword: \"Please confirm your current password\"});\n            }\n            else if (event.target.value === this.refs.password.state.value) {\n                errors = _.extend(errors, { password: \"This password is the same as your current password\"});\n            }\n\n            allErrors = !errors[\"password\"] ? _.omit(allErrors, \"password\") : allErrors;\n        }\n        else if (event.target.name === \"password\") {\n            if (!event.target.value) {\n                errors = _.extend(errors, { password: \"Please enter a new password\"});\n            }\n            else {\n                if (this.refs.confirmPassword.state.value && event.target.value !== this.refs.confirmPassword.state.value) {\n                    errors = _.extend(errors, { confirmPassword: \"This password does not match your new password\"});\n                }\n\n                if (event.target.value === this.refs.currentPasswordForPassword.state.value) {\n                    errors = _.extend(errors, { password: \"This password is the same as your current password\"});\n                }\n            }\n\n            allErrors = !errors[\"confirmPassword\"] ? _.omit(allErrors, \"confirmPassword\") : allErrors;\n        }\n        else if (event.target.name === \"confirmPassword\") {\n            if (!event.target.value) {\n                errors = _.extend(errors, { confirmPassword: \"Please confirm your new password\"});\n            }\n            else if (event.target.value !== this.refs.password.state.value) {\n                errors = _.extend(errors, { confirmPassword: \"This password does not match your new password\"});\n            }\n        }\n\n        allErrors = !errors[event.target.name] ? _.omit(allErrors, event.target.name) : allErrors;\n\n        errors = _.extend(allErrors, errors);\n\n        this.setState({passwordErrors: errors});\n    }\n});\n\nmodule.exports = UserAccountForm;\n\n\n},{\"backbone-react-component\":2,\"components/forms/ValidatedInput.jsx\":142,\"react\":\"react\",\"react/lib/cx\":9,\"underscore\":\"underscore\"}],142:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar validator = require('validator');\nvar cx = require(\"react/lib/cx\");\n\nvar InputConstants = require(\"constants/InputConstants\");\n\nvar ValidatedInput = React.createClass({displayName: \"ValidatedInput\",\n\n    propTypes: {\n        name: React.PropTypes.string.isRequired,\n        value: React.PropTypes.string,\n        onChange: React.PropTypes.func,\n        onEnter: React.PropTypes.func,\n        label: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        type: React.PropTypes.string,\n        errorLabel: React.PropTypes.string,\n        displayFeedback: React.PropTypes.bool,\n        icon: React.PropTypes.node,\n        autoFocus: React.PropTypes.bool,\n        autoComplete: React.PropTypes.string\n    },\n\n    getInitialState: function() {\n        return {\n            value: this.props.value\n        };\n    },\n\n    render: function() {\n    \tvar isValid = !this.props.errorLabel;\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: cx({\n                    \"form-group\" : true,\n                    \"has-success\": this.props.displayFeedback && this.state.value !== null && isValid,\n                    \"has-error\": this.props.displayFeedback && this.state.value !== null && !isValid,\n                    \"has-feedback\": this.props.displayFeedback && this.state.value !== null\n                    })}, \n                    this.renderLabel(), \n                    this.renderInput(), \n                    React.createElement(\"span\", {\n                        className: cx({\n                            \"glyphicon\": true,\n                            \"glyphicon-ok\": this.props.displayFeedback && this.state.value !== null && isValid,\n                            \"glyphicon-remove\": this.props.displayFeedback && this.state.value !== null && !isValid,\n                            \"hide\": !this.props.displayFeedback && this.state.value !== null,\n                            \"form-control-feedback\": true,\n                        }), \n                        \"aria-hidden\": \"true\"}), \n                    React.createElement(\"div\", {className: cx({\n                        \"hide\": !(this.props.displayFeedback && this.state.value !== null) || isValid,\n                        \"text-danger\": true\n                        })}, \n                        this.props.errorLabel\n                    )\n                )\n            ));\n    },\n\n    renderLabel: function() {\n        return this.props.label ? React.createElement(\"label\", null, this.props.label) : null;\n    },\n\n    renderInput: function() {\n        var icon = this.renderIcon();\n\n        var input = (\n            React.createElement(\"input\", {\n                ref: \"input\", \n                type: this.props.type || \"text\", \n                value: this.state.value, \n                className: \"form-control\", \n                name: this.props.name, \n                placeholder: this.props.placeholder || \"\", \n                onChange: this.onChange, \n                autoComplete: this.props.autoComplete, \n                autoFocus: this.props.autoFocus, \n                onKeyDown: this.onKeyDown}\n                ));\n\n        if (icon) {\n            input = (\n                React.createElement(\"div\", {className: \"input-group\"}, \n                    icon, \n                    input\n                ))\n        }\n\n        return input;\n    },\n\n    renderIcon: function() {\n        return this.props.icon ? (\n            React.createElement(\"span\", {className: \"input-group-addon\"}, \n                this.props.icon\n            )\n        ) : null;\n    },\n\n    onChange: function(event) {\n        this.setState({\n            value: event.target.value\n        });\n\n        if (this.props.onChange) {\n            this.props.onChange(event);\n        }\n    },\n\n    onKeyDown: function(event) {\n        if (event.keyCode === InputConstants.ENTER) {\n            if (this.props.onEnter) {\n                this.props.onEnter();\n                event.preventDefault();\n            }\n        }\n    },\n\n    reset: function() {\n        this.onChange({\n            target: {\n                name: this.props.name,\n                value: this.props.value\n            }\n        });\n    }\n});\n\nmodule.exports = ValidatedInput;\n\n\n},{\"constants/InputConstants\":149,\"react\":\"react\",\"react/lib/cx\":9,\"validator\":\"validator\"}],143:[function(require,module,exports){\n\nif(!window.appConfig) {\n\tthrow new Error(\"No app config has been loaded.\");\n}\n\nmodule.exports = window.appConfig;\n\n\n},{}],144:[function(require,module,exports){\n\"use strict\";\n\nvar keyMirror = require(\"keymirror\");\n\nvar ActionConstants = keyMirror({\n    //BoM actions\n    FETCH_BOM: null,\n    CREATE_BOM: null,\n    UPDATE_BOM_NAME: null,\n    DESTROY_BOM: null,\n    ADD_BOM_ITEM: null,\n    REMOVE_BOM_ITEMS: null,\n    UPDATE_BOM_ITEM: null,\n    SELECT_BOM_ITEM: null,\n    UNSELECT_BOM_ITEMS: null,\n    ADD_BOM_COLUMN: null,\n    SET_BOM_COLUMN: null,\n    SET_VISIBLE_BOM_COLUMNS: null,\n    HIDE_BOM_COLUMN: null,\n    IMPORT_BOM_FILE: null,\n    IMPORT_PRODUCT: null,\n    IMPORT_NEW_BOM: null,\n    IMPORT_UPDATE_BOM: null,\n    EXPORT_BOM_ITEMS: null,\n    RETRY_EXPORT_BOM_ITEMS: null,\n    FETCH_BOM_ITEM_COMMENTS: null,\n    CREATE_BOM_ITEM_COMMENT: null,\n    UPDATE_BOM_ITEM_COMMENT: null,\n    DESTROY_BOM_ITEM_COMMENT: null,\n    FETCH_BOM_COMMENTS: null,\n    CREATE_BOM_COMMENT: null,\n    UPDATE_BOM_COMMENT: null,\n    DESTROY_BOM_COMMENT: null,\n\n    //Product actions\n    CREATE_PRODUCT: null,\n    DESTROY_PRODUCT: null,\n    UPDATE_PRODUCT_NAME: null,\n    FETCH_PRODUCT_COMMENTS: null,\n    CREATE_PRODUCT_COMMENT: null,\n    UPDATE_PRODUCT_COMMENT: null,\n    DESTROY_PRODUCT_COMMENT: null,\n\n    //Change actions\n    SYNC_CHANGES: null,\n    FETCH_PRODUCT_CHANGES: null,\n    FETCH_BOM_CHANGES: null,\n    FETCH_ITEM_CHANGES: null,\n\n    //User actions\n    CREATE_USER: null,\n    INIT_USER: null,\n    UPDATE_USER: null,\n    VALIDATE_USER: null,\n\n    //Company actions\n    FETCH_COMPANY: null,\n    SELECT_COMPANY: null,\n\n    //Bom View actions\n    CREATE_BOM_VIEW: null,\n    UPDATE_BOM_VIEW: null,\n    DESTROY_BOM_VIEW: null\n});\n\nmodule.exports = ActionConstants;\n\n\n},{\"keymirror\":\"keymirror\"}],145:[function(require,module,exports){\n\"use strict\";\n\nvar ApiConstants = {\n  PATH_PREFIX: \"/api\",\n  MAX_RETRIES: 3,\n  RETRY_INTERVAL: 10000, // 10 seconds\n  PING_INTERVAL: 600000 //10 minutes\n};\n\nmodule.exports = ApiConstants;\n\n\n},{}],146:[function(require,module,exports){\n\"use strict\";\n\nvar AppConstants = {\n  SUPPORT_EMAIL: \"support@bomsquad.io\"\n};\n\nmodule.exports = AppConstants;\n\n\n},{}],147:[function(require,module,exports){\n\"use strict\";\n\nvar keyMirror = require(\"keymirror\");\n\nvar ChangeConstants = keyMirror({\n    NUMBER: null,\n    BOM_ID: null,\n    BOM_NAME: null,\n    ITEM_ID: null,\n    ITEM_SKU: null,\n    DETAILS: null,\n    DATE: null,\n    STATUS: null\n});\n\nmodule.exports = ChangeConstants;\n\n\n},{\"keymirror\":\"keymirror\"}],148:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n    //default fields\n    SKU: 1,\n    ID: 2,\n    QUANTITY: 3,\n    DESCRIPTION: 4,\n    TYPE: 5,\n    VALUE: 6,\n    VOLT: 7,\n    TOLERANCE: 8,\n    TEMP_COEFF: 9,\n    PACKAGE: 10,\n    DESIGNATORS: 11,\n    MFG: 12,\n    MPN: 13,\n    SUPPLIER: 14,\n    SPN: 15,\n    PRICE: 16,\n    MOQ: 17,\n    LEAD_TIME: 18,\n    LINK: 19,\n    ROHS: 20,\n\n    //extra columns, not visible by default, but available\n    SMT: 21,\n    DNI: 22,\n    BUILD_OPTION: 23,\n    SIDE: 24,\n    CATEGORY: 25,\n    COMMENT: 26,\n    AVL_NOTES: 27,\n    TOTAL_PRICE: 28,\n\n    // TODO rename fieldset to view\n    CUSTOM_FIELDSET: \"_custom_view\",\n    FULL_FIELDSET: 1,\n    SIMPLE_FIELDSET: 2,\n    SOURCING_FIELDSET: 3,\n    ASSEMBLY_FIELDSET: 4,\n\n    CUSTOM_FIELD: {\n        id: \"_custom\",\n        name: \"New Column\",\n        type: undefined\n    },\n\n    SELECT_FIELD: {\n        id: \"_select\",\n        name: \"Select an attribute\",\n        type: undefined\n    },\n};\n\n\n},{}],149:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n    TAB: 9,\n    ENTER: 13,\n    ESC: 27\n};\n\n\n},{}],150:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n    TEXT: 1,\n    NUMBER: 2,\n    BOOLEAN: 3,\n};\n\n\n},{}],151:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  DEFAULT_DISPLAY_NAME: \"Partner\"\n};\n\n\n},{}],152:[function(require,module,exports){\n/*global _:true*/\n\"use strict\";\n\nvar Dispatcher = require(\"flux\").Dispatcher;\nvar _ = require(\"underscore\");\n\n/**\n * Dispatcher of the application connecting the views and the stores.\n */\nvar AppDispatcher = _.extend(new Dispatcher(), {\n\n  /**\n   * A bridge function between the views and the dispatcher.\n   * @param  {object} action The data coming from the view.\n   */\n  handleViewAction: function(action) {\n    this.dispatch({\n      source: \"VIEW_ACTION\",\n      action: action\n    });\n  },\n});\n\nmodule.exports = AppDispatcher;\n\n\n},{\"flux\":\"flux\",\"underscore\":\"underscore\"}],153:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\n\nfunction ApiError(attributes) {\n    attributes = attributes || {};\n\n    this.name = \"ApiError\";\n    this.xhr = attributes.xhr;\n    this.textStatus = attributes.textStatus;\n    this.errorThrown = attributes.errorThrown;\n\n    if (attributes.xhr && _.isObject(attributes.xhr.responseJSON)) {\n        this.message = attributes.xhr.responseJSON.detail;\n        this.validationMessages = attributes.xhr.responseJSON.validation_messages;\n    }\n    else {\n        this.message = attributes.title;\n    }\n}\n\nApiError.prototype = Object.create(Error.prototype);\nApiError.prototype.constructor = ApiError;\n\nApiError.prototype.getValidationErrors = function() {\n    var errors = {};\n    _.each(this.validationMessages, function(messages, key) {\n        errors[key] = _.isArray(messages) ? messages[0] : messages;\n    });\n    return errors;\n};\n\nmodule.exports = ApiError;\n\n\n},{\"underscore\":\"underscore\"}],154:[function(require,module,exports){\n/*global document:false*/\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\n\nmodule.exports = _.extend({\n\n    start: function() {\n        $(document).on(\"ajaxError\", this.onError);\n    },\n\n    stop: function() {\n        $(document).off(\"ajaxError\", this.onError);\n    },\n\n    onError: function(event, jqxhr, settings, thrownError) {\n        // Don't display alerts for 4XX errors\n        if (/^4[0-9]{2}$/.test(jqxhr.status)) {\n            return;\n        }\n\n        console.error(jqxhr.status, \": \", jqxhr.statusText, \" - threw error: \", thrownError);\n        AppDispatcher.dispatch({\n            action: {\n                type: \"show-alert\"\n            },\n            alert: {\n                type: \"danger\",\n                message: \"An error occured while sending a server request. Please refresh and try again\",\n                sticky: true\n            }\n        });\n    }\n\n}, Backbone.Events);\n\n\n},{\"backbone\":\"backbone\",\"dispatcher/AppDispatcher\":152,\"underscore\":\"underscore\"}],155:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\n\nvar BomEvent = function(options) {\n\t_.extend(this, options);\n};\n\nBomEvent.EVENT_CREATE  = \"bom:create\";\nBomEvent.EVENT_DELETE  = \"bom:delete\";\nBomEvent.EVENT_EXPORT  = \"bom:export\";\nBomEvent.EVENT_IMPORT  = \"bom:import\";\n\nmodule.exports = BomEvent;\n\n},{\"underscore\":\"underscore\"}],156:[function(require,module,exports){\n\"use strict\";\n\nvar EventManager = function() {\n\tthis.ajax = require(\"events/Ajax\");\n\tthis.intercom = require(\"events/Intercom\");\n};\n\nEventManager.prototype.start = function() {\n\tthis.ajax.start();\n\tthis.intercom.start();\n};\n\nEventManager.prototype.stop = function() {\n\tthis.ajax.stop();\n\tthis.intercom.stop();\n};\n\nmodule.exports = EventManager;\n\n},{\"events/Ajax\":154,\"events/Intercom\":157}],157:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\nvar UserEvent = require(\"events/UserEvent\");\nvar BomEvent = require(\"events/BomEvent\");\nvar config = require(\"config\");\n\nvar appId = config.intercomToken;\n\nmodule.exports = _.extend({\n\tstart: function() {\n\t\tthis.listenTo(Backbone, UserEvent.EVENT_LOG_IN,  this.onLogin);\n\t\tthis.listenTo(Backbone, UserEvent.EVENT_LOG_OUT, this.onLogout);\n\t\tthis.listenTo(Backbone, UserEvent.EVENT_CHANGE,  this.onUserChanged);\n\n\t\tthis.listenTo(Backbone, BomEvent.EVENT_EXPORT, this.onBomExport);\n\t\tthis.listenTo(Backbone, BomEvent.EVENT_IMPORT, this.onBomImport);\n\t\tthis.listenTo(Backbone, BomEvent.EVENT_CREATE, this.onBomCreate);\n\t\tthis.listenTo(Backbone, BomEvent.EVENT_DELETE, this.onBomDelete);\n\t},\n\n\tstop: function() {\n\t\tthis.stopListening();\n\t},\n\n\tonBomCreate: function() {\n\t\twindow.Intercom(\"trackEvent\", \"bom-create\");\n\t},\n\n\tonBomDelete: function() {\n\t\twindow.Intercom(\"trackEvent\", \"bom-delete\");\n\t},\n\n\tonBomExport: function() {\n       \twindow.Intercom(\"trackEvent\", \"bom-export\");\n\t},\n\n\tonBomImport: function() {\n       \twindow.Intercom(\"trackEvent\", \"bom-import\");\n\t},\n\n\tonLogin: function(event) {\n\t\tthis.validateUserEvent(event);\n\n\t\tvar options = this.buildOptions(event, { app_id: appId });\n\n       \twindow.Intercom(\"boot\", options);\n\t},\n\n\tonLogout: function() {\n\t\twindow.Intercom(\"shutdown\");\n\t},\n\n\tonUserChanged: function(event) {\n\t\tthis.validateUserEvent(event);\n\n\t\tvar options = this.buildOptions(event);\n\n\t\tif(_.isEmpty(options)){\n\t\t\t// Nothing to update\n\t\t\treturn;\n\t\t}\n\n\t\twindow.Intercom(\"update\", options);\n\t},\n\n\tbuildOptions: function(event, options) {\n\t\toptions = options || {};\n\n\t\tif(event.fullName){\n\t\t\t_.extend(options, {\n\t\t\t\tname: event.fullName\n\t\t\t});\n\t\t}\n\n\t\tif(event.email){\n\t\t\t_.extend(options, {\n\t\t\t\temail: event.email\n\t\t\t});\n\t\t}\n\n\t\tif(event.companyId && event.companyName){\n\t\t\t_.extend(options, {\n\t\t\t\tcompany: {\n\t\t\t\t\tname: event.companyName,\n\t\t\t\t\tid: event.companyId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn options;\n\t},\n\n\tvalidateUserEvent: function(event) {\n\t\tif(!(event instanceof UserEvent)) {\n\t\t\tthrow new TypeError(\"Event is not a UserEvent\");\n\t\t}\n\t}\n\n}, Backbone.Events);\n\n\n},{\"backbone\":\"backbone\",\"config\":143,\"events/BomEvent\":155,\"events/UserEvent\":158,\"underscore\":\"underscore\"}],158:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\n\nvar UserEvent = function(options) {\n\t_.extend(this, options);\n};\n\nUserEvent.EVENT_LOG_IN    = \"user:log_in\";\nUserEvent.EVENT_LOAD_DATA = \"user:load_data\";\nUserEvent.EVENT_LOG_OUT   = \"user:log_out\";\nUserEvent.EVENT_CHANGE    = \"user:change\";\n\nmodule.exports = UserEvent;\n\n\n},{\"underscore\":\"underscore\"}],159:[function(require,module,exports){\n\"use strict\";\n\nvar ApiError = require(\"errors/ApiError\");\nvar Backbone = require(\"backbone\");\n\nvar ExtendedModel = Backbone.Model.extend({\n\n    sync: function(method, model, options) {\n        return new Promise(function(resolve, reject) {\n            var success;\n            var error;\n\n            success = options.success;\n            options.success = function(response) {\n                if (success) {\n                    success(response);\n                }\n                resolve(model);\n            };\n\n            error = options.error;\n            options.error = function(xhr, textStatus, errorThrown) {\n                if (error) {\n                    error.apply(this, arguments);\n                }\n                reject(new ApiError({\n                  xhr: xhr,\n                  textStatus: textStatus,\n                  errorThrown: errorThrown\n                }));\n            };\n\n            Backbone.sync(method, model, options);\n        });\n    },\n\n    fetch: function fetch() {\n        var xhr = Backbone.Model.prototype.fetch.apply(this, arguments);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Invalid model attributes.\"));\n    },\n\n    save: function save() {\n        var xhr = Backbone.Model.prototype.save.apply(this, arguments);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Invalid model attributes.\"));\n    },\n\n    destroy: function destroy(options) {\n        options = options ? options : {};\n\n        var xhr = Backbone.Model.prototype.destroy.apply(this, [options]);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Can't destroy new model\"));\n    }\n\n});\n\nmodule.exports = ExtendedModel;\n\n\n},{\"backbone\":\"backbone\",\"errors/ApiError\":153}],160:[function(require,module,exports){\n\"use strict\";\n\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar BomAttributeModel = ExtendedModel.extend({\n    companyId: undefined,\n    bomId: undefined,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom/\" + this.getBom() + \"/attribute\";\n    },\n\n    setCompany: function(companyId) { this.companyId = companyId; },\n    getCompany: function() { return this.companyId; },\n\n    setBom: function(bomId) { this.bomId = bomId; },\n    getBom: function() { return this.bomId; },\n\n    parse: function(resp) {\n        if (!resp) { return resp; }\n\n        if (resp.field) {\n\n            // Fold fieldId if passed as Field object\n            if (!resp.fieldId) {\n                resp.fieldId = resp.field.id;\n            }\n\n            // TODO clone resp, threat argument as immutable\n            delete resp.field;\n        }\n\n        return resp;\n    },\n\n    // Position\n\n    decrease: function(change) {\n        change = change || 1;\n        this.set(\"position\", this.get(\"position\") - change);\n    },\n\n    increase: function(change) {\n        change = change || 1;\n        this.set(\"position\", this.get(\"position\") + change);\n    }\n});\n\nmodule.exports = BomAttributeModel;\n\n\n},{\"constants/ApiConstants\":145,\"utils/ExtendedModel\":202}],161:[function(require,module,exports){\n\"use strict\";\n\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar BomExportModel = ExtendedModel.extend({\n    companyId: undefined,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/export/bom\";\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n});\n\nmodule.exports = BomExportModel;\n\n\n},{\"constants/ApiConstants\":145,\"utils/ExtendedModel\":202}],162:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\nvar BomItemValueCollection = require(\"collections/BomItemValueCollection\");\nvar CommentCollection = require(\"collections/CommentCollection\");\n\nvar BomItemModel = ExtendedModel.extend({\n    companyId: undefined,\n    bomId: undefined,\n    validationErrors: undefined,\n    _loadingChanges: false,\n    _hasLoadedChanges: false,\n    _loadedAllChanges: false,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom/\" + this.getBom() + \"/item\";\n    },\n\n    constructor: function() {\n        this.validationErrors = {};\n        this.setAssociation(\"values\", new BomItemValueCollection());\n\n        var comments = new CommentCollection();\n        comments.setParent(this);\n        this.setAssociation(\"comments\", comments);\n\n        ExtendedModel.apply(this, arguments);\n    },\n\n    initialize: function() {\n        ExtendedModel.prototype.initialize.apply(this, arguments);\n\n        this.listenTo(this.getValues(), \"add\", function(model, collection, options) {\n            this.trigger(\"add:values\", model, collection, _.extend(options, { item: this }));\n        });\n\n        this.listenTo(this.getValues(), \"change\", function(collection, options) {\n            this.trigger(\"change:values\", collection, _.extend(options, { item: this }));\n        });\n\n        this.listenTo(this.getValues(), \"remove\", function(model, collection, options) {\n            this.trigger(\"remove:values\", model, collection, _.extend(options, { item: this }));\n        });\n\n        this.listenTo(this.getValues(), \"reset\", function(collection, options) {\n            this.trigger(\"reset:values\", collection, _.extend(options, { item: this }));\n        });\n\n        this.listenTo(this.getValues(), \"sync\", function(collection, resp, options) {\n            this.trigger(\"sync:values\", collection, resp, _.extend(options, { item: this }));\n        });\n\n        this.listenTo(this.getComments(), \"add\", function(model, collection, options) { this.trigger(\"add:comments\", model, collection, options); });\n        this.listenTo(this.getComments(), \"change\", function(collection, options) { this.trigger(\"change:comments\", collection, options); });\n        this.listenTo(this.getComments(), \"remove\", function(model, collection, options) { this.trigger(\"remove:comments\", model, collection, options); });\n        this.listenTo(this.getComments(), \"reset\", function(collection, options) { this.trigger(\"reset:comments\", collection, options); });\n        this.listenTo(this.getComments(), \"sync\", function(collection, resp, options) { this.trigger(\"sync:comments\", collection, resp, options); });\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n        this.getValues().setCompany(companyId);\n        this.getComments().setCompany(companyId);\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n\n    setBom: function(bomId) {\n        this.bomId = bomId;\n        this.getValues().setBom(bomId);\n    },\n\n    getBom: function() {\n        return this.bomId;\n    },\n\n    // Changes\n\n    isLoadingChanges: function() {\n        return this._loadingChanges;\n    },\n\n    setLoadingChanges: function(loading) {\n        this._loadingChanges = loading;\n        if (loading) {\n            this._hasLoadedChanges = true;\n        }\n        this.trigger(\"update\");\n    },\n\n    hasLoadedChanges: function() {\n        return this._hasLoadedChanges;\n    },\n\n    loadedAllChanges: function() {\n        return this._loadedAllChanges;\n    },\n\n    setLoadedAllChanges: function(loaded) {\n        this._loadedAllChanges = loaded;\n        this.trigger(\"update\");\n    },\n\n    parse: function(resp) {\n        if (!resp) { return resp; }\n\n        if (resp.bomItemFields) {\n            if (!resp.values) {\n                resp.values = resp.bomItemFields;\n            }\n\n            // TODO clone resp, treat argument as immutable\n            delete resp.bomItemFields;\n        }\n\n        return resp;\n    },\n\n    set: function(key, val, options) {\n        var attr, attrs, method, model, wasNew, associations;\n\n        if (!key) { return this; }\n\n        if (typeof key === \"object\") {\n            attrs = key;\n            options = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n\n        options = options || {};\n        method = options.reset ? \"reset\" : \"set\";\n\n        associations = {};\n\n        for (attr in attrs) {\n            if (!attrs.hasOwnProperty(attr)) {\n                continue;\n            }\n            val = attrs[attr];\n\n            switch(attr) {\n                case \"values\":\n                    this.getValues()[method](val, _.extend({}, options, { silent: true }));\n                    delete attrs[attr];\n                    break;\n\n                case \"totalComments\":\n                    this.getComments().setTotalServerCount(val);\n                    delete attrs[attr];\n                    break;\n            }\n        }\n\n        wasNew = this.isNew();\n        model = ExtendedModel.prototype.set.apply(this, [attrs, options]);\n\n        // If the model is newly created, set the association's bom id\n        if (model && wasNew !== model.isNew()) {\n            model.getValues().setItem( model.id );\n        }\n\n        return model;\n    },\n\n    // Position\n\n    decrease: function(change) {\n        change = change || 1;\n        this.set(\"position\", this.get(\"position\") - change);\n    },\n\n    increase: function(change) {\n        change = change || 1;\n        this.set(\"position\", this.get(\"position\") + change);\n    },\n\n    // Item Values\n\n    getValue: function(valueId) {\n        return this.getValues().get(valueId);\n    },\n\n    getValues: function() {\n        return this.getAssociation(\"values\");\n    },\n\n    addValue: function(attributes, options) {\n        return this.getValues().add(attributes, options);\n    },\n\n    setValue: function(attributes, options) {\n        var value = this.getValue(attributes.id || attributes.cid);\n        if (!value) { return; }\n\n        return value.set(attributes, options);\n    },\n\n    removeValue: function(valueId) {\n        return this.getValues().remove(valueId);\n    },\n\n    getValueForAttribute: function(attributeId) {\n        return this.getValues().findWhere({\n            bomFieldId: attributeId\n        });\n    },\n\n    isValid: function() {\n        return _.isEmpty(this.validationErrors);\n    },\n\n    validate: function(ruleId) {\n        if (ruleId) {\n            delete this.validationErrors[ruleId];\n\n            this.getValues().each(function(value) {\n                value.validate(ruleId);\n            });\n        }\n        else {\n            this.validationErrors = {};\n\n            this.getValues().each(function(value) {\n                value.validate();\n            });\n        }\n\n        this.trigger(\"update\");\n    },\n\n    invalidate: function(ruleId, message) {\n        this.validationErrors[ruleId] = message;\n        this.trigger(\"update\");\n    },\n\n    getValidationErrorMessages: function() {\n        return _.values(this.validationErrors);\n    },\n\n    /* Comments */\n\n    getComments: function() {\n        return this.getAssociation(\"comments\");\n    }\n});\n\nmodule.exports = BomItemModel;\n\n\n},{\"collections/BomItemValueCollection\":90,\"collections/CommentCollection\":93,\"constants/ApiConstants\":145,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],163:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar BomItemValueModel = ExtendedModel.extend({\n    companyId: undefined,\n    bomId: undefined,\n    itemId: undefined,\n    validationErrors: undefined,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom/\" + this.getBom() + \"/item/\" + this.getItem() + \"/value\";\n    },\n\n    constructor: function() {\n        this.validationErrors = {};\n        ExtendedModel.apply(this, arguments);\n    },\n\n    setCompany: function(companyId) { this.companyId = companyId; },\n    getCompany: function() { return this.companyId; },\n\n    setBom: function(bomId) { this.bomId = bomId; },\n    getBom: function() { return this.bomId; },\n\n    setItem: function(itemId) { this.itemId = itemId; },\n    getItem: function() { return this.itemId; },\n\n    getAttributeId: function() { return this.get(\"bomFieldId\"); },\n\n    parse: function(resp) {\n        if (!resp) { return resp; }\n\n        if (resp.bomField) {\n            if (!resp.bomFieldId) {\n                resp.bomFieldId = resp.bomField.id;\n            }\n\n            // TODO clone resp, threat argument as immutable\n            delete resp.bomField;\n        }\n\n        return resp;\n    },\n\n    isValid: function() {\n        return _.isEmpty(this.validationErrors);\n    },\n\n    validate: function(ruleId) {\n        if (ruleId) {\n            delete this.validationErrors[ruleId];\n        }\n        else {\n            this.validationErrors = {};\n        }\n        this.trigger(\"update\");\n    },\n\n    invalidate: function(ruleId, message) {\n        this.validationErrors[ruleId] = message;\n        this.trigger(\"update\");\n    }\n});\n\nmodule.exports = BomItemValueModel;\n\n\n},{\"constants/ApiConstants\":145,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],164:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar FieldConstants = require(\"constants/FieldConstants\");\nvar TypeConstants = require(\"constants/TypeConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\nvar BomItemCollection = require(\"collections/BomItemCollection\");\nvar BomAttributeCollection = require(\"collections/BomAttributeCollection\");\nvar CommentCollection = require(\"collections/CommentCollection\");\nvar FieldStore = require(\"stores/FieldStore\");\n\nvar BomModel = ExtendedModel.extend({\n    companyId: undefined,\n    _loading: false,    // used only for items for now\n    _loaded: false,     // used only for items for now\n    _totalItems: undefined,\n    _loadingChanges: false,\n    _hasLoadedChanges: false,\n    _loadedAllChanges: false,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/bom\";\n    },\n\n    defaults: function() {\n        return {\n            bomIds: [],\n            validate: true\n        };\n    },\n\n    constructor: function() {\n        var comments = new CommentCollection();\n        comments.setParent(this);\n        this.setAssociation(\"comments\", comments);\n\n        this.setAssociation(\"items\", new BomItemCollection());\n        this.setAssociation(\"attributes\", new BomAttributeCollection());\n\n        ExtendedModel.apply(this, arguments);\n    },\n\n    initialize: function() {\n        ExtendedModel.prototype.initialize.apply(this, arguments);\n        this.initializeAttributes();\n        this.initializeItems();\n        this.initializeValues();\n        this.initializeComments();\n    },\n\n    initializeAttributes: function() {\n        this.listenTo(this.getAttributes(), \"add\", function(model, collection, options) {\n            this.trigger(\"add:attributes\", model, collection, options);\n        });\n\n        this.listenTo(this.getAttributes(), \"change\", function(model, options) {\n            this.trigger(\"change:attributes\", model, options);\n        });\n\n        this.listenTo(this.getAttributes(), \"remove\", function(model, collection, options) {\n            this.trigger(\"remove:attributes\", model, collection, options);\n        });\n\n        this.listenTo(this.getAttributes(), \"reset\", function(collection, options) {\n            this.trigger(\"reset:attributes\", collection, options);\n        });\n\n        this.listenTo(this.getAttributes(), \"sync\", function(collection, resp, options) {\n            this.trigger(\"sync:attributes\", collection, resp, options);\n            this.validate();\n        });\n    },\n\n    initializeItems: function() {\n        this.listenTo(this.getItems(), \"add\", function(model) {\n            this.validateItem(model);\n        });\n\n        this.listenTo(this.getItems(), \"change\", function(model) {\n            this.validateItem(model);\n        });\n\n        this.listenTo(this.getItems(), \"remove\", function(model) {\n            this.validateItem(model);\n        });\n\n        this.listenTo(this.getItems(), \"all\", function() {\n            this.trigger(\"update\");\n        });\n    },\n\n    initializeValues: function() {\n        this.listenTo(this.getItems(), \"add:values\", function(model, collection, options) {\n            this.validateItem(options.item);\n        });\n\n        this.listenTo(this.getItems(), \"change:values\", function(model, options) {\n            this.validateItem(options.item);\n        });\n\n        this.listenTo(this.getItems(), \"remove:values\", function(model, collection, options) {\n            this.validateItem(options.item);\n        });\n    },\n\n    initializeComments: function() {\n        this.listenTo(this.getComments(), \"add\", function(model, collection, options) { this.trigger(\"add:comments\", model, collection, options); });\n        this.listenTo(this.getComments(), \"change\", function(collection, options) { this.trigger(\"change:comments\", collection, options); });\n        this.listenTo(this.getComments(), \"remove\", function(model, collection, options) { this.trigger(\"remove:comments\", model, collection, options); });\n        this.listenTo(this.getComments(), \"reset\", function(collection, options) { this.trigger(\"reset:comments\", collection, options); });\n        this.listenTo(this.getComments(), \"sync\", function(collection, resp, options) { this.trigger(\"sync:comments\", collection, resp, options); });\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n        this.getItems().setCompany(companyId);\n        this.getAttributes().setCompany(companyId);\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n\n\n    // Loading Associations\n\n    setLoading: function(loading) {\n        this._loading = loading;\n    },\n\n    setLoaded: function(loaded) {\n        if (loaded) {\n            this._loading = false;\n        }\n        this._loaded = loaded;\n        this._totalItems = undefined;\n    },\n\n    isLoading: function() {\n        return this._loading;\n    },\n\n    isLoaded: function() {\n        return this._loaded;\n    },\n\n    // Changes\n\n    isLoadingChanges: function() {\n        return this._loadingChanges;\n    },\n\n    setLoadingChanges: function(loading) {\n        this._loadingChanges = loading;\n        if (loading) {\n            this._hasLoadedChanges = true;\n        }\n        this.trigger(\"update\");\n    },\n\n    hasLoadedChanges: function() {\n        return this._hasLoadedChanges;\n    },\n\n    loadedAllChanges: function() {\n        return this._loadedAllChanges;\n    },\n\n    setLoadedAllChanges: function(loaded) {\n        this._loadedAllChanges = loaded;\n        this.trigger(\"update\");\n    },\n\n    parse: function(resp) {\n        //TODO this should (deep) clone any array or object\n\n        //if bom objects, then pluck their ids\n        if (!resp.bomIds && resp.children) {\n            resp.bomIds = _.pluck(resp.children, \"id\");\n            delete resp.children;\n        }\n\n        if (!resp.attributes && resp.bomFields) {\n            resp.attributes = resp.bomFields;\n            delete resp.bomFields;\n        }\n\n        if (!resp.items && resp.bomItems) {\n            resp.items = resp.bomItems;\n            delete resp.bomItems;\n        }\n\n        //remove attributes starting with underscore (e.g. links)\n        resp = _.omit(resp, function(value, key) {\n            return _.isString(key) && key.slice(0,1) === \"_\";\n        });\n\n        return resp;\n    },\n\n    set: function(key, val, options) {\n        var attr, attrs, method, model, wasNew;\n\n        if (!key) { return this; }\n\n        if (typeof key === \"object\") {\n            attrs = key;\n            options = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n\n        options = options || {};\n        method = options.reset ? \"reset\" : \"set\";\n\n        for (attr in attrs) {\n            if (!attrs.hasOwnProperty(attr)) {\n                continue;\n            }\n            val = attrs[attr];\n\n            switch(attr) {\n                case \"items\":\n                    this.getItems()[method](val, _.extend({}, options, { silent: true, shouldUpdate: false }));\n                    delete attrs[attr];\n                    break;\n\n                case \"totalItems\":\n                    this._totalItems = val;\n                    delete attrs[attr];\n                    break;\n\n                case \"totalComments\":\n                    this.getComments().setTotalServerCount(val);\n                    delete attrs[attr];\n                    break;\n\n                case \"attributes\":\n                    this.getAttributes()[method](val, _.extend({}, options, { silent: true, shouldUpdate: false }));\n                    delete attrs[attr];\n                    break;\n            }\n        }\n\n        wasNew = this.isNew();\n        model = ExtendedModel.prototype.set.apply(this, [attrs, options]);\n\n        // If the model is newly created, set the association's bom id\n        if (model) {\n            if (wasNew !== model.isNew()) {\n                model.getItems().setBom( model.id );\n                model.getAttributes().setBom( model.id );\n            }\n\n            if (model.isValidating()) {\n                model.validate();\n            }\n        }\n\n        return model;\n    },\n\n    // Validation\n\n    isValidating: function() {\n        return this.get(\"validate\");\n    },\n\n    validate: function() {\n        if (!this.isValidating()) { return; }\n\n        this.getItems().each(function(item) {\n            this.validateItem(item);\n        }, this);\n\n        this._validateUniqueMPN();\n    },\n\n    validateItem: function(item) {\n        if (!this.isValidating()) { return; }\n\n        item.validate();\n\n        this._validateDesignators(item);\n        this._validateUniqueMPN();\n        this._validateNumericValues(item);\n    },\n\n    _validateDesignators: function(item) {\n        var ruleId = \"match_qty_designators\";\n        var ruleMessage = \"Your number of Designators does not match Quantity.\";\n\n        var qty;\n        var qtyContent;\n        var desig;\n        var desigContent;\n\n        qty = this.getItemValueForField(item.id || item.cid, FieldConstants.QUANTITY);\n        if (!qty || !qty.has(\"content\")) {\n            return;\n        }\n\n        desig = this.getItemValueForField(item.id || item.cid, FieldConstants.DESIGNATORS);\n        if (!desig || !desig.has(\"content\")) {\n            return;\n        }\n\n        qtyContent = qty.get(\"content\");\n        desigContent = desig.get(\"content\").split(\",\");\n\n        if (parseInt(qtyContent, 10) !== desigContent.length) {\n            item.invalidate(ruleId, ruleMessage);\n            qty.invalidate(ruleId, ruleMessage);\n            desig.invalidate(ruleId, ruleMessage);\n        }\n    },\n\n    _validateUniqueMPN: function() {\n        var ruleId = \"unique_mpn\";\n        var ruleMessage = \"Manufacturer Part # (MPN) should be unique.\";\n        var lastValid = true;\n\n        // Get the list of items with an MPN value\n        var items = this.getItems().filter(function(item) {\n            return !!this.getItemValueForField(item, FieldConstants.MPN);\n        }, this);\n\n        // Sort by MPN\n        items = _.sortBy(items, function(item) {\n            return this.getItemValueForField(item, FieldConstants.MPN).get(\"content\");\n        }, this);\n\n        // Invalidate all matching values\n        _.each(items, function(item, index, list) {\n            var mpn1 = this.getItemValueForField(item, FieldConstants.MPN);\n            var mpn2;\n\n            // If we reached the\n            if (index < list.length-1) {\n                mpn2 = this.getItemValueForField(list[index+1], FieldConstants.MPN);\n            }\n\n            if (mpn2 && mpn1.get(\"content\") === mpn2.get(\"content\")) {\n                item.invalidate(ruleId, ruleMessage);\n                mpn1.invalidate(ruleId, ruleMessage);\n\n                list[index+1].invalidate(ruleId, ruleMessage);\n                mpn2.invalidate(ruleId, ruleMessage);\n\n                lastValid = false;\n            }\n            else if (lastValid) {\n                item.validate(ruleId);\n                mpn1.validate(ruleId);\n                lastValid = true;\n            }\n\n        }, this);\n    },\n\n    _validateNumericValues: function(item) {\n        var ruleId = \"numeric_value\";\n\n        // Invalidate all matching values\n        item.getValues().each(function(value) {\n            var attribute;\n            var field;\n\n            attribute = this.getAttribute( value.getAttributeId() );\n            if (!attribute) { return; }\n\n            field = FieldStore.get( attribute.get(\"fieldId\"));\n            if (!field) { return; }\n\n            if (field.get(\"typeId\") === TypeConstants.NUMBER) {\n                if (isNaN(+value.get(\"content\"))) {\n                    item.invalidate(ruleId, attribute.get(\"name\") + \" must be a numerical value\");\n                    value.invalidate(ruleId, attribute.get(\"name\") + \" must be a numerical value\");\n                    return;\n                }\n            }\n        }, this);\n    },\n\n    // Attributes\n\n    getAttribute: function(attributeId) {\n        return this.getAttributes().get(attributeId);\n    },\n\n    getAttributes: function() {\n        return this.getAssociation(\"attributes\");\n    },\n\n    getVisibleAttributes: function() {\n        return this.getAttributes().where({\n            visible: true\n        });\n    },\n\n    hasVisibleAttributes: function() {\n        return !!this.getAttributes().findWhere({\n            visible: true\n        });\n    },\n\n    getAttributeForField: function(fieldId) {\n        return this.getAttributes().findWhere({\n            fieldId: fieldId\n        });\n    },\n\n    addAttribute: function(attributes, options) {\n        var numVisible;\n\n        if (!attributes) {\n            return;\n        }\n        attributes = _.clone(attributes);\n\n        //make sure the position attribute is within range\n        if (attributes.visible) {\n            numVisible = this.getVisibleAttributes().length;\n\n            //if position is not set or too big, set to be last\n            if (attributes.position === undefined ||\n                attributes.position === -1 ||\n                attributes.position > numVisible) {\n                attributes.position = numVisible;\n            }\n        } else if (attributes.position > 0) {\n            attributes.position = -1;\n        }\n\n        // If the new attribute is visible, adjust position of others above it\n        if (attributes.visible) {\n            this.getAttributes().each(function(result) {\n                if (result.get(\"position\") >= attributes.position) {\n                    result.increase();\n                }\n            });\n        }\n\n        return this.getAttributes().add(attributes, options);\n    },\n\n    setAttribute: function(attributes, options) {\n        // TODO override BomAttributeCollection to keep positions in line\n        var numVisible;\n        var attribute;\n        var oldVisible;\n        var oldPosition;\n\n        if (!attributes) {\n            return;\n        }\n        attributes = _.clone(attributes);\n\n        //make sure the position attribute is within range\n        if (attributes.visible) {\n            numVisible = this.getVisibleAttributes().length;\n\n            //if position is not set or too big, set to be last\n            if (attributes.position === undefined ||\n                attributes.position === -1 ||\n                attributes.position > numVisible) {\n                attributes.position = numVisible;\n            }\n        } else if (attributes.position > 0) {\n            attributes.position = -1;\n        }\n\n        attribute = this.getAttribute(attributes.id || attributes.cid);\n        oldVisible = attribute.get(\"visible\");\n        oldPosition = attribute.get(\"position\");\n\n        attribute.set(attributes, options);\n\n        // If the attribute became visible, increase the position of attributes above it\n        if (attributes.visible && !oldVisible) {\n\n            this.getAttributes().each(function(result) {\n                if (!result.is(attribute) &&\n                    result.get(\"position\") >= attributes.position) {\n                    result.increase();\n                }\n            });\n        }\n        // If the attribute was already visible, but it's position changed\n        else if (attributes.visible && attributes.position !== oldPosition) {\n\n            if (attributes.position > oldPosition) {\n                this.getAttributes().each(function(result) {\n                    if (!result.is(attribute) &&\n                        result.get(\"position\") > oldPosition &&\n                        result.get(\"position\") <= attributes.position) {\n                        result.decrease();\n                    }\n                });\n            }\n            else {\n                this.getAttributes().each(function(result) {\n                    if (!result.is(attribute) &&\n                        result.get(\"position\") >= attributes.position &&\n                        result.get(\"position\") < oldPosition) {\n                        result.increase();\n                    }\n                });\n            }\n\n        }\n        // If attribute became not visible\n        else if (!attributes.visible && attributes.visible) {\n            this.getAttributes().each(function(result) {\n                if (!result.is(attribute) &&\n                    result.get(\"position\") >= oldPosition) {\n                    result.decrease();\n                }\n            });\n        }\n\n        return attribute;\n    },\n\n    setVisibleAttributes: function(visibleAttributes) {\n        // Parse visibleAttributes in case we have new or changed attributes\n        // TODO maybe do this in a separate method instead of just calling this one\n        visibleAttributes = visibleAttributes.map(function(result) {\n            var oldAttribute;\n            var newAttribute;\n\n            if (_.isObject(result)) {\n                oldAttribute = this.getAttribute(result.id || result.cid);\n\n                if (oldAttribute) {\n\n                    //if field ids don't match, look for an existing match\n                    //TODO need to prevent this from happening\n                    if (oldAttribute.get(\"fieldId\") !== result.fieldId) {\n                        newAttribute = this.getAttributeForField(result.fieldId);\n                        if (!newAttribute) {\n                            newAttribute = this.addAttribute({\n                                fieldId: result.fieldId,\n                                name: result.name\n                            });\n                        }\n                    }\n                    //if the field ids match, then update the column\n                    else {\n                        newAttribute = this.setAttribute(result);\n                    }\n\n                    return newAttribute.id || newAttribute.cid;\n\n                } else if (result.fieldId) {\n\n                    newAttribute = this.getAttributeForField(result.fieldId);\n                    if (!newAttribute) {\n                        newAttribute = this.addAttribute({\n                            fieldId: result.fieldId,\n                            name: result.name\n                        });\n                    }\n\n                    return newAttribute.id || newAttribute.cid;\n\n                } else {\n                    return;\n                }\n            } else {\n                return result;\n            }\n        }, this);\n\n        this.getAttributes().each(function(result) {\n            var position = _.indexOf(visibleAttributes, result.id || result.cid);\n            result.set({\n                position: position,\n                visible: position !== -1\n            });\n        });\n\n        this.trigger(\"change\");\n    },\n\n    hideAttribute: function(attributeId) {\n        //return this.getAttributes().hide(attributeId);\n\n        var attribute = this.getAttribute(attributeId);\n        var position;\n\n        if (!attribute) { return ; }\n        if (!attribute.get(\"visible\")) { return; }\n\n        position = attribute.get(\"position\");\n\n        // Hide the attribute\n        attribute.set({\n            visible: false,\n            position: -1\n        });\n\n        // Adjust the position of the other attributes\n        this.getAttributes().each(function(result) {\n            if (result.get(\"position\") >= position) {\n                result.decrease();\n            }\n        });\n\n        return attribute;\n    },\n\n    removeColumn: function(attributeId) {\n        var attribute = this.getAttribute(attributeId);\n        if (!attribute) { return ; }\n\n        // Remove all item values for this attribute\n        this.getItems().removeValuesForAttribute(attributeId);\n\n        // Remove the attribute\n        this.getAttributes().remove(attributeId);\n\n        // Adjust the position of the other attributes\n        this.getAttributes().each(function(result) {\n            if (result.get(\"position\") >= attribute.get(\"position\")) {\n                result.decrease();\n            }\n        });\n\n        return attribute;\n    },\n\n    // Children BoMs\n\n    getBoms: function() {\n      return this.get(\"bomIds\");\n    },\n\n    setBoms: function(bomIds) {\n        this.set({\n            \"bomIds\": bomIds\n        });\n    },\n\n    attachBom: function(id) {\n        var bomIds;\n\n        if (!id) { return; }\n\n        bomIds = _.clone(this.getBoms());\n        bomIds.push(id);\n        this.setBoms(bomIds);\n    },\n\n    detachBom: function(id) {\n        var bomIds = this.getBoms();\n\n        bomIds = bomIds.filter(function(result) {\n            return result !== id;\n        });\n\n        this.setBoms(bomIds);\n    },\n\n    fixChildBomId: function(bom) {\n        if (bom.isNew()) {\n            return;\n        }\n\n        var childIds = this.getBoms().map(function(result) {\n            return result === bom.cid ? bom.id : result;\n        });\n\n        this.set({\n            \"bomIds\": childIds\n        });\n    },\n\n    // BoM Items\n\n    getItem: function(id) {\n        return this.getItems().get(id);\n    },\n\n    getItems: function() {\n        return this.getAssociation(\"items\");\n    },\n\n    getItemCount: function() {\n        return this._totalItems !== undefined ? this._totalItems : this.getItems().length;\n    },\n\n    addItem: function(attributes, options) {\n        var item;\n\n        attributes = attributes || {};\n\n        if (attributes.position === undefined) {\n            attributes.position = this.getItems().length;\n        }\n\n        item = this.getItems().add(attributes, options);\n        if (!item) { return; }\n\n        // If the new attribute is visible, adjust position of others above it\n        this.getItems().each(function(result) {\n            if (!result.is(item) && result.get(\"position\") >= attributes.position) {\n                result.increase();\n            }\n        });\n\n        return item;\n    },\n\n    setItem: function(attributes, options) {\n        var item;\n        var oldPosition;\n\n        attributes = attributes || {};\n\n        item = this.getItem(attributes.id || attributes.cid);\n        if (!item) { return; }\n\n        oldPosition = item.get(\"position\");\n\n        item = item.set(attributes, options);\n        if (!item) { return; }\n\n        // If the attribute was already visible, but it's position changed\n        if (attributes.position !== oldPosition) {\n\n            if (attributes.position > oldPosition) {\n                this.getAttributes().each(function(result) {\n                    if (!result.is(item) &&\n                        result.get(\"position\") > oldPosition &&\n                        result.get(\"position\") <= attributes.position) {\n                        result.decrease();\n                    }\n                });\n            }\n            else {\n                this.getAttributes().each(function(result) {\n                    if (!result.is(item) &&\n                        result.get(\"position\") >= attributes.position &&\n                        result.get(\"position\") < oldPosition) {\n                        result.increase();\n                    }\n                });\n            }\n\n        }\n\n        return item;\n    },\n\n    removeItem: function(itemId) {\n        var item = this.getItem(itemId);\n        if (!item) { return ; }\n\n        item = this.getItems().remove(itemId);\n\n        // Adjust the position of the other attributes\n        this.getItems().each(function(result) {\n            if (result.get(\"position\") >= item.get(\"position\")) {\n                result.decrease();\n            }\n        });\n\n        return item;\n    },\n\n    removeItems: function(ids) {\n        return ids.map(function(id) {\n            return this.removeItem(id);\n        }, this);\n    },\n\n    // BoM Item Values\n\n    getItemValueForField: function(itemId, fieldId) {\n        var item;\n        var attribute;\n\n        item = this.getItem(itemId);\n        if (!item) {\n            return;\n        }\n\n        attribute = this.getAttributes().findWhere({\n            fieldId: fieldId\n        });\n        if (!attribute) {\n            return;\n        }\n\n        return item.getValueForAttribute(attribute.id || attribute.cid);\n    },\n\n    getItemValueContentForField: function(itemId, fieldId) {\n        var value = this.getItemValueForField(itemId, fieldId);\n        if (!value) {\n            return;\n        }\n\n        return value.get(\"content\");\n    },\n\n    // Comments\n\n    getComments: function() {\n        return this.getAssociation(\"comments\");\n    }\n});\n\nmodule.exports = BomModel;\n\n\n},{\"collections/BomAttributeCollection\":85,\"collections/BomItemCollection\":89,\"collections/CommentCollection\":93,\"constants/ApiConstants\":145,\"constants/FieldConstants\":148,\"constants/TypeConstants\":150,\"stores/FieldStore\":193,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],165:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar BomViewModel = ExtendedModel.extend({\n    companyId: undefined,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/view\";\n    },\n\n    parse: function(resp) {\n        // Parse the company if not a default field\n        if (resp.company) {\n            if (!resp.companyId) {\n                resp.companyId = resp.company.id;\n            }\n\n            delete resp.company;\n        }\n\n        // Remove attributes that start with underscore\n        resp = _.omit(resp, function(value, key) {\n            return _.isString(key) && key.slice(0, 1) === \"_\";\n        });\n        return resp;\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    }\n});\n\nmodule.exports = BomViewModel;\n\n\n},{\"constants/ApiConstants\":145,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],166:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar ChangeModel = ExtendedModel.extend({\n    _saving: false,\n    _saved: false,\n    _retries: 0,\n\n    defaults: function() {\n        return {\n            visible: true\n        };\n    },\n\n    parse: function(resp) {\n        // Parse the product\n        if (resp.product) {\n            if (!resp.productId) {\n                resp.productId = resp.product.id;\n            }\n\n            delete resp.product;\n        }\n\n        // Parse the bom\n        if (resp.bom) {\n            if (!resp.bomId) {\n                resp.bomId = resp.bom.id;\n            }\n\n            delete resp.bom;\n        }\n\n        // Parse the item\n        if (resp.item) {\n            if (!resp.itemId) {\n                resp.itemId = resp.item.id;\n            }\n\n            delete resp.item;\n        }\n\n        // Parse the value\n        if (resp.value) {\n            if (!resp.valueId) {\n                resp.valueId = resp.value.id;\n            }\n\n            delete resp.value;\n        }\n\n        // Parse the user\n        if (resp.user) {\n            if (!resp.userId) {\n                resp.userId = resp.user.id;\n            }\n\n            delete resp.user;\n        }\n\n        // Parse the createdAt date\n        if (_.isObject(resp.createdAt)) {\n            resp.createdAt = resp.createdAt.date;\n        }\n\n        // Remove attributes that start with underscore\n        resp = _.omit(resp, function(value, key) {\n            return _.isString(key) && key.slice(0, 1) === \"_\";\n        });\n\n        return resp;\n    },\n\n    setSaving: function(saving) {\n        this._saving = saving;\n        if (saving) {\n            this._saved = false;\n            this._retries++;\n        }\n        this.trigger(\"change\");\n    },\n\n    setSaved: function(saved) {\n        this._saved = saved;\n        this._saving = false;\n        this.trigger(\"change\");\n    },\n\n    isSaving: function() { return this._saving; },\n    isSaved: function() { return this._saved || !this.isNew(); },\n    triedSaving: function() { return !!this._retries; }\n});\n\nmodule.exports = ChangeModel;\n\n\n},{\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],167:[function(require,module,exports){\n\"use strict\";\n\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar CommentModel = ExtendedModel.extend({\n    companyId: undefined,\n    parent: undefined,\n\n    urlRoot: function() {\n        return this.parent.url() + \"/comment\";\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n\n    setParent: function(parent) {\n        this.parent = parent;\n    },\n\n    getParent: function() {\n        return this.parent;\n    }\n\n});\n\nmodule.exports = CommentModel;\n\n\n},{\"utils/ExtendedModel\":202}],168:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar FieldModel = ExtendedModel.extend({\n    companyId: undefined,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/field\";\n    },\n\n    parse: function(resp) {\n        // Parse the company if not a default field\n        if (resp.company) {\n            if (!resp.companyId) {\n                resp.companyId = resp.company.id;\n            }\n\n            delete resp.company;\n        }\n\n        // Parse the type\n        if (resp.type) {\n            if (!resp.typeId) {\n                resp.typeId = resp.type.id;\n            }\n\n            delete resp.type;\n        }\n\n        // Remove attributes that start with underscore\n        resp = _.omit(resp, function(value, key) {\n            return _.isString(key) && key.slice(0, 1) === \"_\";\n        });\n        return resp;\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n\n    match: function(name) {\n        var regex = this.get(\"regex\");\n        if (!regex) { return false; }\n\n        regex = new RegExp(regex, \"i\");\n        return regex.test(name);\n    }\n});\n\nmodule.exports = FieldModel;\n\n\n},{\"constants/ApiConstants\":145,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],169:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\n\nvar FieldTypeModel = ExtendedModel.extend({\n    urlRoot: ApiConstants.PATH_PREFIX + \"/fieldtype\",\n\n    parse: function(resp) {\n        resp = _.omit(resp, function(value, key) {\n            return _.isString(key) && key.slice(0, 1) === \"_\";\n        });\n        return resp;\n    }\n});\n\nmodule.exports = FieldTypeModel;\n\n\n},{\"constants/ApiConstants\":145,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],170:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\n\nvar validation = require(\"backbone-validation\");\n_.extend(Backbone.Model.prototype, validation.mixin);\n\nvar errors = {\n\t400: {\n\t\t\"title\": \"Could not Complete Request\",\n\t\t\"description\": \"A problem occurred while trying to process a request. Please try again.\"\n\t},\n\t401: {\n\t\t\"title\": \"Unauthorized\",\n\t\t\"description\": \"Access to this page is restricted. Please log in and try again.\"\n\t},\n\t403: {\n\t\t\"title\": \"Forbidden\",\n\t\t\"description\": \"Access to this page is restricted.\"\n\t},\n\t404: {\n\t\t\"title\": \"Page not Found\",\n\t\t\"description\": \"Hey! You've stumbled upon a page that doesn't exist.\"\n\t},\n\t500: {\n\t\t\"title\": \"Server Error\",\n\t\t\"description\": \"The server encountered a problem. Please try again later.\"\n\t}\n};\n\nfunction getError(statusCode) {\n\n\tvar match = errors[statusCode];\n\tif(!!match) {\n\t\treturn _.extend(match, {statusCode: statusCode});\n\t}\n\n\t// Try approximate match (4xx or 5xx)\n\tvar code = (statusCode - (statusCode % 100));\n\tmatch = errors[code];\n\tif(!!match) {\n\t\treturn _.extend(match, {statusCode: code});\n\t}\n\n\treturn _.extend(errors[404], {statusCode: 404});\n}\n\nmodule.exports = Backbone.Model.extend({\n\n\tinitialize: function(options) {\n\t\t_.extend(this, getError(options.statusCode || 404));\n\t},\n\n\tgetTitle: function() {\n\t\treturn this.statusCode + \": \" + this.title;\n\t},\n\n    save: function() {\n        throw new Error(\"This model should not be saved\");\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"backbone-validation\":3,\"underscore\":\"underscore\"}],171:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar CommentCollection = require(\"collections/CommentCollection\");\n\nvar ExtendedModel = require(\"utils/ExtendedModel\");\nvar ProductModel = ExtendedModel.extend({\n    companyId: undefined,\n    _loadingChanges: false,\n    _hasLoadedChanges: false,\n\n    urlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/product\";\n    },\n\n    defaults: function() {\n        return {\n            bomIds: []\n        };\n    },\n\n    constructor: function() {\n        var comments = new CommentCollection();\n        comments.setParent(this);\n        this.setAssociation(\"comments\", comments);\n\n        ExtendedModel.apply(this, arguments);\n    },\n\n    initialize: function() {\n        this.listenTo(this.getComments(), \"add\", function(model, collection, options) { this.trigger(\"add:comments\", model, collection, options); });\n        this.listenTo(this.getComments(), \"change\", function(collection, options) { this.trigger(\"change:comments\", collection, options); });\n        this.listenTo(this.getComments(), \"remove\", function(model, collection, options) { this.trigger(\"remove:comments\", model, collection, options); });\n        this.listenTo(this.getComments(), \"reset\", function(collection, options) { this.trigger(\"reset:comments\", collection, options); });\n        this.listenTo(this.getComments(), \"sync\", function(collection, resp, options) { this.trigger(\"sync:comments\", collection, resp, options); });\n    },\n\n    parse: function(resp) {\n        //if bom objects, then pluck their ids\n        if (!resp.bomIds && resp.boms) {\n            resp.bomIds = _.pluck(resp.boms, \"id\");\n            delete resp.boms;\n        }\n\n        delete resp.totalChanges;\n\n        resp = _.omit(resp, function(value, key) {\n            return _.isString(key) && key.slice(0,1) === \"_\";\n        });\n\n        return resp;\n    },\n\n    set: function(key, val, options) {\n        var attr, attrs, method;\n\n        if (key === null) {\n            return this;\n        }\n\n        if (typeof key === \"object\") {\n            attrs = key;\n            options = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n\n        options = options || {};\n        method = options.reset ? \"reset\" : \"set\";\n\n        for (attr in attrs) {\n            if (!attrs.hasOwnProperty(attr)) {\n                continue;\n            }\n            val = attrs[attr];\n\n            switch(attr) {\n                case \"totalComments\":\n                    this.getComments().setTotalServerCount(val);\n                    delete attrs[attr];\n                    break;\n            }\n        }\n\n        return ExtendedModel.prototype.set.apply(this, [attrs, options]);\n    },\n\n    // Company\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n        this.getComments().setCompany(companyId);\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n\n    // Changes\n\n    isLoadingChanges: function() {\n        return this._loadingChanges;\n    },\n\n    setLoadingChanges: function(loading) {\n        this._loadingChanges = loading;\n        if (loading) {\n            this._hasLoadedChanges = true;\n        }\n        this.trigger(\"update\");\n    },\n\n    hasLoadedChanges: function() {\n        return this._hasLoadedChanges;\n    },\n\n    // decUnloadedChangeCount: function(count) {\n    //     this._unloadedChanges -= count;\n    //     this.trigger(\"change\");\n    // },\n\n    // getUnloadedChangeCount: function() {\n    //     return this._unloadedChanges;\n    // },\n\n    // Children BoMs\n\n    getBoms: function() {\n      return this.get(\"bomIds\");\n    },\n\n    setBoms: function(bomIds) {\n        this.set({\n            \"bomIds\": bomIds\n        });\n    },\n\n    isParentOfBom: function(bomId) {\n        return _.contains(this.getBoms(), bomId);\n    },\n\n    attachBom: function(id) {\n        var bomIds;\n\n        if (!id) { return; }\n\n        bomIds = _.clone(this.getBoms());\n        bomIds.push(id);\n        this.setBoms(bomIds);\n    },\n\n    detachBom: function(id) {\n        var bomIds = this.getBoms();\n\n        bomIds = bomIds.filter(function(result) {\n            return result !== id;\n        });\n\n        this.setBoms(bomIds);\n    },\n\n    fixChildBomId: function(bom) {\n        if (bom.isNew()) { return; }\n\n        var childIds = this.getBoms().map(function(result) {\n            return result === bom.cid ? bom.id : result;\n        });\n\n        this.set({\n            \"bomIds\": childIds\n        });\n    },\n\n    // Comments\n\n    getComments: function() {\n        return this.getAssociation(\"comments\");\n    }\n});\n\nmodule.exports = ProductModel;\n\n\n},{\"collections/CommentCollection\":93,\"constants/ApiConstants\":145,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],172:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar Backbone = require(\"backbone\");\nvar CompanyMixin = require(\"utils/CompanyMixin\");\nvar validation = require(\"backbone-validation\");\nvar BaseModel = require(\"models/BaseModel\");\n\nvar DEFAULT_STATE = \"idle\";\n\nmodule.exports = BaseModel.extend({\n\tmixins: [\n\t\tCompanyMixin,\n\t\tvalidation.mixin\n\t],\n\n\tSTATE_IDLE: \"idle\",\n\tSTATE_SENDING: \"sending\",\n\tSTATE_ERROR: \"error\",\n\tSTATE_SUCCESS: \"success\",\n\n\tINVITE_STATUS_PENDING: \"pending\",\n\tINVITE_STATUS_ACCEPTED: \"accepted\",\n\n\tvalidation: {\n\t    firstName: {\n\t      \trequired: true,\n\t      \tminLength: 1,\n\t      \tmsg: \"Please enter a valid first name\"\n\t    },\n\t    lastName: {\n\t      \trequired: true,\n\t      \tminLength: 1,\n\t      \tmsg: \"Please enter a valid last name\"\n\t    },\n\t    email: {\n\t    \tpattern: \"email\",\n\t    \trequired: true,\n\t      \tminLength: 1,\n\t      \tmsg: \"Please enter a valid email\"\n\t    }\n\t},\n\n\tdefaults: {\n\t    email: null,\n\t    firstName: null,\n\t    lastName: null,\n\t    state: DEFAULT_STATE\n\t},\n\n\turlRoot: function() {\n        return ApiConstants.PATH_PREFIX + \"/\" + this.getCompany() + \"/invite\";\n    },\n\n\tinitialize: function() {\n\t\tthis.on(\"request\",this.onStartSending,this);\n\t\tthis.on(\"sync\",this.onSyncSuccess,this);\n\t\tthis.on(\"error\",this.onSyncError,this);\n\t\tthis.on(\"change:email\",this.onChange,this);\n\t\tthis.on(\"change:firstName\",this.onChange,this);\n\t\tthis.on(\"change:lastName\",this.onChange,this);\n\t},\n\n\tonChange: function() {\n\t\tthis.set(\"state\", this.STATE_IDLE);\n\t},\n\n\tonStartSending: function() {\n\t\tthis.set(\"state\", this.STATE_SENDING);\n\t},\n\n\tonSyncSuccess: function() {\n\t\tthis.set(\"state\", this.STATE_SUCCESS);\n\t},\n\n\tonSyncError: function() {\n\t\tthis.set(\"state\", this.STATE_ERROR);\n\t},\n\n    save: function(attrs, options) {\n        options = options || {};\n\n        attrs = attrs || _.clone(this.attributes);\n\n        // Filter the data to send to the server\n        delete attrs.state;\n        delete attrs.error;\n\n        // Proxy the call to the original save function\n        return Backbone.Model.prototype.save.call(this, attrs, options);\n    },\n\n    fetchByToken: function(token) {\n        var options = {\n            url: _.result(this, \"urlRoot\") + \"/\" + token\n        };\n\n        return this.fetch(options);\n    }\n});\n\n\n},{\"backbone\":\"backbone\",\"backbone-validation\":3,\"constants/ApiConstants\":145,\"models/BaseModel\":159,\"underscore\":\"underscore\",\"utils/CompanyMixin\":200}],173:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar validation = require(\"backbone-validation\");\n\nvar ApiConstants = require(\"constants/ApiConstants\");\nvar Backbone = require(\"backbone\");\nvar ExtendedModel = require(\"utils/ExtendedModel\");\nvar UserEvent = require(\"events/UserEvent\");\n\nvar DEFAULT_STATE = \"idle\";\n\nvar UserModel = ExtendedModel.extend({\n    mixins: [\n        validation.mixin\n    ],\n\n    urlRoot: ApiConstants.PATH_PREFIX + \"/account\",\n\n    STATE_IDLE: \"idle\",\n    STATE_SENDING: \"sending\",\n    STATE_ERROR: \"error\",\n    STATE_SUCCESS: \"success\",\n\n    validation: {\n        firstName: {\n            required: false,\n            maxLength: 255,\n            msg: \"Please make first name less than 255 characters\"\n        },\n        lastName: {\n            required: false,\n            maxLength: 255,\n            msg: \"Please make last name less than 255 characters\"\n        },\n        companyName: {\n            required: false,\n            maxLength: 255,\n            msg: \"Please make company name less than 255 characters\"\n        },\n        displayName: {\n            required: false,\n            maxLength: 50,\n            msg: \"Please make display name less than 50 characters\"\n        },\n        email: {\n            pattern: \"email\",\n            required: true,\n            msg: \"Please enter a valid email\"\n        },\n        password: {\n            required: false,\n            minLength: 8,\n            msg: \"Please enter a password with at least 8 characters\"\n        }\n    },\n\n    defaults: {\n        email: null,\n        firstName: null,\n        lastName: null,\n        displayName: null,\n        state: DEFAULT_STATE\n    },\n\n    initialize: function() {\n        ExtendedModel.prototype.initialize.apply(this);\n\n        this.on(\"request\",this.onStartSending,this);\n        this.on(\"sync\",this.onSyncSuccess,this);\n        this.on(\"error\",this.onSyncError,this);\n        this.on(\"change:email\",this.onChange,this);\n        this.on(\"change:firstName\",this.onChange,this);\n        this.on(\"change:lastName\",this.onChange,this);\n        this.on(\"change:password\",this.onChange,this);\n\n        this.on(\"change\", this.triggerUserChangeEvent);\n    },\n\n    onChange: function() {\n        this.set(\"state\", this.STATE_IDLE);\n    },\n\n    onStartSending: function() {\n        this.set(\"state\", this.STATE_SENDING);\n    },\n\n    onSyncSuccess: function() {\n        this.set(\"state\", this.STATE_SUCCESS);\n    },\n\n    onSyncError: function() {\n        this.set(\"state\", this.STATE_ERROR);\n    },\n\n    save: function(attrs, options) {\n        options = options || {};\n\n        attrs = attrs || _.clone(this.attributes);\n\n        // Filter the data to send to the server\n        delete attrs.state;\n        delete attrs.error;\n\n        options.attrs = options.attrs || _.clone(attrs);\n\n        delete attrs.password;\n        delete attrs.companyToken;\n        delete attrs.inviteToken;\n        delete attrs.signin;\n\n        // Proxy the call to the original save function\n        return ExtendedModel.prototype.save.call(this, attrs, options);\n    },\n\n    saveProfile: function(attrs, options) {\n        options = options || {};\n\n        attrs = attrs || _.clone(this.attributes);\n        attrs = _.pick(attrs, \"firstName\", \"lastName\", \"companyName\", \"displayName\");\n\n        options.attrs = _.clone(attrs);\n        options.patch = true;\n        options.url = ApiConstants.PATH_PREFIX + \"/me\";\n        options.wait = true;\n\n        delete attrs.companyName;\n\n        return this.save(attrs, options);\n    },\n\n    saveEmail: function(attrs, options) {\n        options = options || {};\n\n        attrs = attrs || _.clone(this.attributes);\n        attrs = _.pick(attrs, \"email\", \"currentPassword\");\n\n        options.attrs = _.clone(attrs);\n        options.patch = true;\n        options.url = ApiConstants.PATH_PREFIX + \"/me\";\n        options.wait = true;\n\n        delete attrs.currentPassword;\n\n        return this.save(attrs, options);\n    },\n\n    savePassword: function(attrs, options) {\n        options = options || {};\n\n        attrs = attrs || _.clone(this.attributes);\n        attrs = _.pick(attrs, \"password\", \"currentPassword\");\n\n        options.attrs = attrs;\n        options.patch = true;\n        options.url = ApiConstants.PATH_PREFIX + \"/me\";\n\n        return this.save(undefined, options);\n    },\n\n    init: function() {\n        var options = {\n            data: { init: true },\n            url: ApiConstants.PATH_PREFIX + \"/me\"\n        };\n\n        return this.fetch(options).then(function(user) {\n\n            var company = user.getCurrentCompany();\n            if (!company) {\n                return Promise.reject(new Error(\"User is not linked to a company\"));\n            }\n\n            var userEvent = new UserEvent({\n                company: company\n            });\n\n            Backbone.trigger(UserEvent.EVENT_LOAD_DATA, userEvent);\n\n            delete company.data;\n\n            return user;\n        });\n    },\n\n    getFullName: function() {\n        if(!(this.get(\"firstName\")) && !(this.get(\"lastName\"))) {\n            return this.get(\"email\");\n        }\n\n        return ((this.get(\"firstName\") || \"\") + \" \" + (this.get(\"lastName\") || \"\")).trim();\n    },\n\n    getDisplayName: function() {\n        if (this.get(\"displayName\")) {\n            return this.get(\"displayName\");\n        }\n        else if (this.get(\"firstName\")) {\n            return this.get(\"firstName\");\n        }\n\n        return this.get(\"email\").substring(0, this.get(\"email\").indexOf(\"@\"));\n    },\n\n    getCurrentCompany: function() {\n        var companies = this.get(\"companies\");\n        if(!companies || !companies.length) {\n            return;\n        }\n\n        return companies[0];\n    },\n\n    login: function() {\n        var company = this.getCurrentCompany();\n        var userEvent = new UserEvent({\n            fullName: this.getFullName(),\n            email: this.get(\"email\"),\n            companyName: company ? company.name : null,\n            companyId: company ? company.token : null\n        });\n\n        Backbone.trigger(UserEvent.EVENT_LOG_IN, userEvent);\n    },\n\n    logout: function() {\n        Backbone.trigger(UserEvent.EVENT_LOG_OUT);\n        window.location.href = \"/user/signout\";\n    },\n\n    triggerUserChangeEvent: function() {\n        var company = this.getCurrentCompany();\n\n        Backbone.trigger(UserEvent.EVENT_CHANGE, new UserEvent({\n            fullName: this.getFullName(),\n            email: this.get(\"email\"),\n            company: company ? company.name : null,\n            companyId: company ? company.token : null\n        }));\n    }\n});\n\nmodule.exports = UserModel;\n\n\n},{\"backbone\":\"backbone\",\"backbone-validation\":3,\"constants/ApiConstants\":145,\"events/UserEvent\":158,\"underscore\":\"underscore\",\"utils/ExtendedModel\":202}],174:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Router = require(\"react-router\");\nvar Route = Router.Route;\nvar DefaultRoute = Router.DefaultRoute;\nvar NotFoundRoute = Router.NotFoundRoute;\nvar RouteHandler = Router.RouteHandler;\n\nvar BomManager = require(\"screens/BomManager.jsx\");\nvar Dashboard = require(\"screens/Dashboard.jsx\");\nvar Product = require(\"screens/Product.jsx\");\nvar ProductHistory = require(\"screens/ProductHistory.jsx\");\nvar Bom = require(\"screens/Bom.jsx\");\nvar UserAccount = require(\"screens/UserAccount.jsx\");\nvar BomHistory = require(\"screens/BomHistory.jsx\");\nvar BomComments = require(\"screens/BomComments.jsx\");\nvar BomImport = require(\"screens/BomImport.jsx\");\nvar BomImportMatch = require(\"screens/BomImportMatch.jsx\");\nvar Welcome = require(\"screens/Welcome.jsx\");\nvar InviteUser = require(\"screens/InviteUser.jsx\");\nvar NavigationError = require(\"screens/NavigationError.jsx\");\nvar App = React.createClass({displayName: \"App\",\n    render: function() {\n        return (\n            React.createElement(RouteHandler, null)\n        );\n    }\n});\n\nvar routes = (\n    React.createElement(Route, {name: \"app\", path: \"/\", handler: App}, \n\n        React.createElement(Route, {handler: BomManager}, \n            React.createElement(DefaultRoute, {name: \"dashboard\", handler: Dashboard}), \n\n            React.createElement(Route, {name: \"bom\", path: \"product/:productId/bom/:bomId\", handler: Bom}), \n            React.createElement(Route, {name: \"bomComments\", path: \"product/:productId/bom/:bomId/comments\", handler: BomComments}), \n            React.createElement(Route, {name: \"bomHistory\", path: \"product/:productId/bom/:bomId/history\", handler: BomHistory}), \n            React.createElement(Route, {name: \"bomImport\", path: \"product/:productId/bom/:bomId/import\", handler: BomImport}), \n            React.createElement(Route, {name: \"bomImportMatch\", path: \"product/:productId/bom/:bomId/import/match\", handler: BomImportMatch}), \n            React.createElement(Route, {name: \"newProductImport\", path: \"product/import\", handler: BomImport}), \n            React.createElement(Route, {name: \"newProductImportMatch\", path: \"product/import/match\", handler: BomImportMatch}), \n            React.createElement(Route, {name: \"product\", path: \"product/:productId\", handler: Product}), \n            React.createElement(Route, {name: \"productHistory\", path: \"product/:productId/history\", handler: ProductHistory}), \n            React.createElement(Route, {name: \"productImport\", path: \"product/:productId/import\", handler: BomImport}), \n            React.createElement(Route, {name: \"productImportMatch\", path: \"product/:productId/import/match\", handler: BomImportMatch}), \n            React.createElement(Route, {name: \"userAccount\", path: \"account\", handler: UserAccount}), \n            React.createElement(Route, {name: \"welcome\", path: \"welcome\", handler: Welcome}), \n            React.createElement(Route, {name: \"inviteUser\", path: \"/company/invite\", handler: InviteUser})\n        ), \n\n        React.createElement(NotFoundRoute, {handler: NavigationError})\n  )\n);\n\nvar BomRouter = Router.create({\n  routes: routes,\n});\n\nmodule.exports = BomRouter;\n\n\n},{\"react\":\"react\",\"react-router\":\"react-router\",\"screens/Bom.jsx\":175,\"screens/BomComments.jsx\":176,\"screens/BomHistory.jsx\":177,\"screens/BomImport.jsx\":178,\"screens/BomImportMatch.jsx\":179,\"screens/BomManager.jsx\":180,\"screens/Dashboard.jsx\":181,\"screens/InviteUser.jsx\":182,\"screens/NavigationError.jsx\":183,\"screens/Product.jsx\":184,\"screens/ProductHistory.jsx\":185,\"screens/UserAccount.jsx\":186,\"screens/Welcome.jsx\":187}],175:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar Link = require(\"react-router\").Link;\n\nvar Table = require(\"react-bootstrap\").Table;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar SplitButton = require(\"react-bootstrap\").SplitButton;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\n\nvar BomSection = require(\"components/BomSection.jsx\");\nvar BomField = require(\"components/BomField.jsx\");\nvar TextInput = require(\"components/TextInput.jsx\");\nvar AddColumnModal = require(\"components/AddColumnModal.jsx\");\nvar EditColumnModal = require(\"components/EditColumnModal.jsx\");\nvar BomExportModal = require(\"components/BomExportModal.jsx\");\nvar SaveViewModal = require(\"components/SaveViewModal.jsx\");\n\nvar BomActions = require(\"actions/BomActions\");\nvar BomViewActions = require(\"actions/BomViewActions\");\nvar ProductActions = require(\"actions/ProductActions\");\nvar BomAttributeModel = require(\"models/BomAttributeModel\");\nvar FieldConstants = require(\"constants/FieldConstants\");\n\nvar cx = require(\"react/lib/cx\");\n\nvar Bom = React.createClass({displayName: \"Bom\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired,\n        allSelectedBomItems: React.PropTypes.object.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        allTypes: React.PropTypes.object.isRequired,\n        allViews: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        var bom;\n        var fieldSetId;\n\n        bom = this._getBom(this.props);\n\n        fieldSetId = bom && bom.hasVisibleAttributes()\n            ? FieldConstants.CUSTOM_FIELDSET : FieldConstants.FULL_FIELDSET;\n\n        return {\n            isAddColumnModalOpen: false,\n            isEditColumnModalOpen: false,\n            isExportModalOpen: false,\n            isSaveViewModalOpen: false,\n            fieldSetId: fieldSetId,\n        };\n    },\n\n    componentWillMount: function() {\n        this._validateBom(this.props);\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n        this._init();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        if (!this._validateBom(nextProps)) { return; }\n        if (!this._validateView(nextProps)) { return; }\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n\n        this._init();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _validateBom: function(props) {\n        var bom = this._getBom( props );\n        var product = this._getProduct( props );\n\n        //TODO check this because of update order\n        //if ( !bom || props.product.isAncestorOfBom(bom.id || bom.cid)) {\n        if ( !product ) {\n            this.replaceWith(\"dashboard\");\n            return false;\n        }\n        // If the bom does not exists, try to redirect to the product\n        else if ( !bom ) {\n            this.replaceWith(\"product\", {productId: product.id || product.cid});\n            return false;\n        }\n        // Redirect if bomId is present as parameter but doesn't match\n        // This is used to redirect a client id to its permanent id\n        else if ( bom.id && bom.id !== +props.params.bomId ) {\n            this.replaceWith(\"bom\", {\n                productId: product.id || product.cid,\n                bomId: bom.id});\n            return false;\n        }\n\n        return true;\n    },\n\n    _validateView: function(props) {\n        var bom = this._getBom(props);\n\n        // If we are showing custom view, make sure the BoM has visible columns\n        if (this.state.fieldSetId === FieldConstants.CUSTOM_FIELDSET && !bom.hasVisibleAttributes()) {\n            this.setState({\n                fieldSetId: FieldConstants.FULL_FIELDSET\n            });\n        }\n    },\n\n    _getProduct: function(props) {\n        var productId;\n        props = props ? props : this.props;\n        productId = props.params ? props.params.productId : undefined;\n        return props.allProducts.get( productId );\n    },\n\n    _getBom: function(props) {\n        var product;\n        props = props ? props : this.props;\n        if (props.params && props.params.bomId) {\n            return props.allBoms.get( props.params.bomId );\n        }\n        else if ((product = this._getProduct(props))) {\n            return props.allBoms.get( product.get(\"bomId\") );\n        }\n    },\n\n    _isReadOnly: function() {\n        var bom = this._getBom();\n        return !!bom && (bom.isDirty() || bom.isNew() || bom.isSyncing());\n    },\n\n    _init: function() {\n        // Fetch items from server if never initialized\n        var bom = this._getBom();\n        if (!!bom && !bom.isLoading() && !bom.isLoaded()) {\n            BomActions.fetch(bom.id);\n        }\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var product = this._getProduct();\n        if (!product) { return null; }\n\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        //var allComponents = this.props.allComponents;\n        var allFields = this.props.allFields;\n        var allTypes = this.props.allTypes;\n        var allViews = this.props.allViews;\n        var headers = this._getHeaders();\n        var childBoms;\n        var boms;\n        var breadcrumbs;\n        var modal;\n        var fieldsForAdd;\n        var spinner;\n\n        //get the BoMs to display\n        boms = [];\n        boms.push(bom);\n        boms = boms.concat(this.props.allBoms.getDescendantBomsOfBom( bom.id || bom.cid ));\n\n        //generate the breadcrumbs\n        //TODO show parent product and parent boms\n        breadcrumbs = bom.get(\"name\");\n\n        // Show spinner if the value is read only but not because of parent\n        if (this._isReadOnly()) {\n            spinner = (\n                React.createElement(Glyphicon, {\n                    className: cx({\n                        \"glyphicon-spin\" : bom.isSyncing()\n                    }), \n                    bsSize: \"small\", \n                    bsStyle: \"default\", \n                    glyph: \"repeat\"}));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"component-list content\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"component-list-header clearfix\"}, \n                        React.createElement(ButtonToolbar, {className: \"pull-left\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(\"h1\", null, breadcrumbs)\n                            ), \n                            React.createElement(\"div\", {className: \"btn-group btn-group-actions\"}, \n                                React.createElement(Button, {\n                                    title: \"Delete Items\", \n                                    bsStyle: \"primary\", \n                                    onClick: this._onRemoveItems, \n                                    disabled: this._isReadOnly() || !this.props.allSelectedBomItems.length}, \n                                    React.createElement(Glyphicon, {glyph: \"trash\"})\n                                ), \n                                React.createElement(Button, {\n                                    title: \"Export\", \n                                    bsStyle: \"primary\", \n                                    onClick: this._onExport, \n                                    disabled: this._isReadOnly()}, \n                                    React.createElement(Glyphicon, {glyph: \"download\"})\n                                ), \n                                React.createElement(Button, {\n                                    title: \"View History\", \n                                    bsStyle: \"primary\", \n                                    onClick: this._onShowHistory}, \n                                    React.createElement(Glyphicon, {glyph: \"list\"})\n                                ), \n                                React.createElement(Button, {\n                                    title: \"View Comments\", \n                                    bsStyle: \"primary\", \n                                    onClick: this._onShowComments}, \n                                    React.createElement(Glyphicon, {glyph: \"comment\"})\n                                )\n                            ), \n                            this._renderViewSelector(bom)\n                        )\n                    ), \n                    React.createElement(\"div\", null, \n                        React.createElement(Table, {striped: true, bordered: true, condensed: true, hover: true}, \n                            React.createElement(\"thead\", null, \n                                React.createElement(\"tr\", null, \n                                    React.createElement(\"th\", {className: cx({\n                                            \"icon\" : true,\n                                            \"text-center\": true,\n                                            \"readonly\": this._isReadOnly()\n                                        })}, \n                                        spinner\n                                    ), \n                                    headers.map(function(result, index) {\n                                        return React.createElement(BomField, {\n                                            key: result.fieldId, \n                                            index: index, \n                                            header: result, \n                                            field: this.props.allFields.get(result.fieldId), \n                                            onAddColumn: this._onClickAddColumn, \n                                            onEditColumn: this._onClickEditColumn, \n                                            readonly: this._isReadOnly()});\n                                    }, this)\n                                )\n                            ), \n                            boms.map(function(result) {\n                                return React.createElement(BomSection, {\n                                    key: result.id || result.cid, \n                                    bom: result, \n                                    headers: headers, \n                                    allFields: allFields, \n                                    selectedItemIds: this.props.allSelectedBomItems.getItemIdsForBom(result.id || result.cid), \n                                    readonly: this._isReadOnly()});\n                            }, this)\n                        ), \n                        React.createElement(Button, {\n                            bsStyle: \"primary\", \n                            onClick: this._onAddItem, \n                            disabled: this._isReadOnly()}, \n                            React.createElement(Glyphicon, {glyph: \"plus\"})\n                        )\n                    ), \n                    this._renderModal(bom, headers)\n                )\n            )\n        );\n    },\n\n    _renderViewSelector: function(bom) {\n        var allViews = this.props.allViews;\n        var view;\n        var title;\n        var saveViewBtn;\n        var options;\n        var savedViews;\n\n        if (this._isCustomViewActive()) {\n            title = \"Custom\";\n            saveViewBtn = (\n                React.createElement(Button, {\n                    bsStyle: \"primary\", \n                    onClick: this._onClickSaveView.bind(this, undefined)}, \n                    \"Save\"\n                ));\n        }\n        else {\n            view = allViews.get(this.state.fieldSetId);\n            title = view.get(\"name\");\n\n            if (!view.get(\"default\")) {\n                saveViewBtn = (\n                    React.createElement(Button, {\n                        bsStyle: \"primary\", \n                        onClick: this._onClickSaveView.bind(this, view.id || view.cid)}, \n                        \"Edit\"\n                    ));\n            }\n        }\n\n        // Generate default views options\n        options = allViews.getDefaults().map(function(view) {\n            return (\n                React.createElement(MenuItem, {\n                    key: view.id || view.cid, \n                    eventKey: view.id || view.cid}, view.get(\"name\")));\n        });\n\n        // Add the saved custom views (if any)\n        savedViews = allViews.getSaved();\n        if (savedViews.length) {\n            options.push(React.createElement(MenuItem, {key: \"saved-divider\", divider: true}));\n            options = options.concat( savedViews.map(function(view) {\n                return React.createElement(MenuItem, {key: view.id || view.cid, eventKey: view.id || view.cid}, view.get(\"name\"))\n            }));\n        }\n\n        // If the top bom has visible columns, then add custom view option\n        if (bom.hasVisibleAttributes()) {\n            options.push(React.createElement(MenuItem, {key: \"custom-divider\", divider: true}));\n            options.push(React.createElement(MenuItem, {\n                key: FieldConstants.CUSTOM_FIELDSET, \n                eventKey: FieldConstants.CUSTOM_FIELDSET}, \"Custom\"));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"btn-toolbar-section\"}, \n                React.createElement(\"div\", {className: \"btn-group\"}, \n                    React.createElement(\"label\", null, \"View:\")\n                ), \n                React.createElement(SplitButton, {\n                    bsStyle: \"default\", \n                    title: title, \n                    onSelect: this._onSelectView}, \n                    options\n                ), \n                React.createElement(\"div\", {className: \"btn-group\"}, \n                    saveViewBtn\n                )\n            ));\n    },\n\n    _renderModal: function(bom, headers) {\n        // add column modal\n        if (this.state.isAddColumnModalOpen) {\n            return this._getAddColumnModal(bom, headers);\n        }\n        // edit column modal\n        else if (this.state.isEditColumnModalOpen) {\n            return this._getEditColumnModal(bom, headers);\n        }\n        // bom export modal\n        else if (this.state.isExportModalOpen) {\n            return this._getExportModal();\n        }\n        // save view modal\n        else if (this.state.isSaveViewModalOpen) {\n            return this._getSaveViewModal(headers);\n        }\n    },\n\n    // Columns\n\n    _onClickAddColumn: function(index) {\n        this.setState({\n            isAddColumnModalOpen: true,\n            addColumnIndex: index\n        });\n    },\n\n    _onSaveAddColumn: function(fieldId, typeId, name, index) {\n        var bom = this._getBom();\n        var headers;\n        var attributes;\n        var newAttribute;\n\n        this.setState({\n            isAddColumnModalOpen: false\n        });\n\n        //create the attribute\n        if (fieldId) {\n            newAttribute = {\n                fieldId: fieldId,\n                name: name\n            };\n        }\n        else {\n            newAttribute = {\n                typeId: typeId,\n                name: name\n            };\n        }\n\n        //if we're updating an existing attribute, check if we're only changing its name\n        if (this.state.fieldSetId === FieldConstants.CUSTOM_FIELDSET) {\n\n            newAttribute.visible = true;\n            newAttribute.position = index;\n\n            BomActions.addAttribute(bom.id || bom.cid, newAttribute);\n\n        } else {\n            //get the headers\n            headers = this._getHeaders();\n\n            //pluck ids for the columns that have them, keep the object if not\n            attributes = headers.map(function(result) {\n                //return result.id ? result.id : result;\n                return result.attribute ? result.attribute.id || result.attribute.cid : result;\n            });\n\n            //replace the attribute\n            attributes.splice(index, 0, newAttribute);\n\n            BomActions.setVisibleAttributes(bom.id || bom.cid, attributes);\n\n            this.setState({\n                fieldSetId: FieldConstants.CUSTOM_FIELDSET\n            });\n        }\n    },\n\n    _onCancelAddColumn: function() {\n        this.setState({\n            isAddColumnModalOpen: false\n        });\n    },\n\n    _onClickEditColumn: function(index) {\n        this.setState({\n            isEditColumnModalOpen: true,\n            editColumnIndex: index\n        });\n    },\n\n    _onSaveEditColumn: function(fieldId, typeId, name, index, attributeId) {\n        var bom = this._getBom();\n        var attribute = bom.getAttribute(attributeId);\n        var headers;\n        var attributes;\n        var prevHeader;\n\n        this.setState({\n            isEditColumnModalOpen: false\n        });\n\n        //if we're updating an existing attribute, check if we're only changing its name\n        if (attribute && attribute.get(\"fieldId\") === fieldId) {\n\n            if (attribute.get(\"name\") === name) { return; }\n\n            BomActions.setAttribute(bom.id || bom.cid, {\n                id: attributeId,\n                name: name\n            });\n        }\n        //else we are hiding the existing and creating/updating the new attribute\n        else {\n            //get attribute ids for the current view\n            headers = this._getHeaders();\n\n            prevHeader = headers[index];\n\n            //pluck ids for the attributes that have then, keep the object if not\n            attributes = headers.map(function(result) {\n                //return result.id ? result.id : result;\n                return result.attribute ? result.attribute.id || result.attribute.cid : result;\n            });\n\n            //replace the column\n            if (fieldId) {\n                attributes[index] = {\n                    fieldId: fieldId,\n                    name: name\n                };\n            }\n            else {\n                attributes[index] = {\n                    typeId: typeId,\n                    name: name\n                };\n            }\n\n            BomActions.setVisibleAttributes(bom.id || bom.cid, attributes);\n\n            if (prevHeader.fieldId != fieldId) {\n                this.setState({\n                    fieldSetId: FieldConstants.CUSTOM_FIELDSET\n                });\n            }\n        }\n    },\n\n    _onCancelEditColumn: function() {\n        this.setState({\n            isEditColumnModalOpen: false\n        });\n    },\n\n    _onHideColumn: function(index) {\n        var bom = this._getBom();\n        var attributes;\n        var headers\n\n        this.setState({\n            isEditColumnModalOpen: false,\n        });\n\n        //get column ids for the current view\n        headers = this._getHeaders();\n\n        //if current view is custom, only need to remove the column\n        if (this.state.fieldSetId === FieldConstants.CUSTOM_FIELDSET) {\n            BomActions.hideColumn(bom.id || bom.cid, headers[index].id);\n        }\n        //but if another view, then we need to set and update the custom view\n        else {\n            //remove the column\n            headers.splice(index, 1);\n\n            //pluck the ids of the columns that don't change, leave objects for the rest\n            attributes = headers.map(function(result) {\n                //return result.id ? result.id : result;\n                return result.attribute ? result.attribute.id || result.attribute.cid : result;\n            });\n\n            BomActions.setVisibleAttributes(bom.id || bom.cid, attributes);\n\n            this.setState({\n                fieldSetId: FieldConstants.CUSTOM_FIELDSET\n            });\n        }\n    },\n\n    _isCustomViewActive: function() {\n        return this.state.fieldSetId === FieldConstants.CUSTOM_FIELDSET;\n    },\n\n    _isFullViewActive: function() {\n        return this.state.fieldSetId === FieldConstants.FULL_FIELDSET;\n    },\n\n    _onSelectView: function(id) {\n        this.setState({ fieldSetId: id });\n    },\n\n    _getSaveViewModal: function(headers) {\n        var view = this.state.saveViewModalView ?\n            this.props.allViews.get( this.state.saveViewModalView ) : undefined;\n\n        return (\n            React.createElement(SaveViewModal, {\n                onCancel: this._onCancelSaveView, \n                onSave: this._onSaveView, \n                onDelete: this._onDeleteView, \n                columns: headers, \n                view: view, \n                allViews: this.props.allViews}\n            ));\n    },\n\n    _onClickSaveView: function(id) {\n        this.setState({\n            isSaveViewModalOpen: true,\n            saveViewModalView: id\n        });\n    },\n\n    _onCancelSaveView: function(id) {\n        this.setState({\n            isSaveViewModalOpen: false,\n            saveViewModalView: undefined\n        });\n    },\n\n    _onSaveView: function(name, fieldIds, viewId) {\n        if (viewId) {\n            BomViewActions.update(viewId, name, fieldIds).then(function(view) {\n                this.setState({\n                    fieldSetId: view.id || view.cid,\n                    isSaveViewModalOpen: false\n                });\n            }.bind(this), function(error) {\n                // TODO user feedback\n                this.setState({\n                    isSaveViewModalOpen: false\n                });\n            }.bind(this));\n        }\n        else {\n            BomViewActions.create(name, fieldIds).then(function(view) {\n                this.setState({\n                    fieldSetId: view.id || view.cid,\n                    isSaveViewModalOpen: false\n                });\n            }.bind(this), function(error) {\n                // TODO user feedback\n                this.setState({\n                    isSaveViewModalOpen: false\n                });\n            }.bind(this));\n        }\n    },\n\n    _onDeleteView: function(id) {\n        var bom = this._getBom(this.props);\n        var fieldSetId = bom && bom.hasVisibleAttributes()\n            ? FieldConstants.CUSTOM_FIELDSET : FieldConstants.FULL_FIELDSET;\n\n        this.setState({\n            fieldSetId: fieldSetId,\n            isSaveViewModalOpen: false\n        });\n\n        BomViewActions.destroy(id).then(undefined, function(error) {\n            // TODO user feedback\n            console.log(error);\n            this.setState({\n                fieldSetId: id\n            });\n        }.bind(this));\n    },\n\n    _getAddColumnModal: function(bom, headers) {\n        var fieldOptions = this.props.allFields.map(function(field) {\n            var attribute = bom.getAttributeForField(field.id || field.cid);\n\n            var disabled = !!_.find(headers, function(result) {\n                return result.fieldId === field.id || result.fieldId === field.cid;\n            });\n\n            return {\n                id: field.id || field.cid,\n                name: attribute ? attribute.get(\"name\") : field.get(\"name\"),\n                typeId: field.get(\"typeId\"),\n                disabled: disabled\n            };\n        }, this);\n\n        // TMP\n        //  disable the ID field for now\n        fieldOptions = _.filter(fieldOptions, function(field) {\n            return field.id !== FieldConstants.ID;\n        });\n\n        return (\n            React.createElement(AddColumnModal, {\n                index: this.state.addColumnIndex, \n                onCancel: this._onCancelAddColumn, \n                onSave: this._onSaveAddColumn, \n                fields: fieldOptions, \n                allTypes: this.props.allTypes}));\n    },\n\n    _getEditColumnModal: function(bom, headers) {\n        var editColumn = headers[ this.state.editColumnIndex ];\n        var editField = this.props.allFields.get( editColumn.fieldId );\n\n        var fieldOptions = this.props.allFields.map(function(field) {\n            var attribute = bom.getAttributes().find(function(result) {\n                return result.fieldId === field.id || result.fieldId === field.cid;\n            });\n\n            //TODO enable attribute we are editing\n            var disabled = !!_.find(headers, function(result) {\n                return result.fieldId === field.id || result.fieldId === field.cid;\n            });\n\n            return {\n                id: field.id || field.cid,\n                name: attribute ? attribute.get(\"name\") : field.get(\"name\"),\n                typeId: field.get(\"typeId\"),\n                disabled: disabled\n            };\n        }, this);\n\n        // TMP\n        //  disable the ID field for now\n        fieldOptions = _.filter(fieldOptions, function(field) {\n            return field.id !== FieldConstants.ID;\n        });\n\n        return (\n            React.createElement(EditColumnModal, {\n                index: this.state.editColumnIndex, \n                column: editColumn, \n                typeId: editField.get(\"typeId\"), \n                onCancel: this._onCancelEditColumn, \n                onSave: this._onSaveEditColumn, \n                onHide: this._onHideColumn, \n                fields: fieldOptions, \n                allTypes: this.props.allTypes}));\n    },\n\n    //TODO move this to the BomStore...\n    _getHeaders: function() {\n        var bom = this._getBom();\n        var headers;\n        var view;\n\n        if (this._isCustomViewActive()) {\n            headers = bom.getVisibleAttributes().map(function(attribute) {\n                return {\n                    id: attribute.id || attribute.cid,\n                    fieldId: attribute.get(\"fieldId\"),\n                    name: attribute.get(\"name\"),\n                    attribute: attribute\n                };\n            });\n        }\n        else {\n            headers = [];\n            view = this.props.allViews.get( this.state.fieldSetId );\n            if (!view) { return headers; }\n\n            _.each( view.get(\"fieldIds\"), function(result) {\n                var attribute = bom.getAttributeForField( result );\n                var header;\n                var field;\n\n                if (!attribute) {\n                    field = this.props.allFields.get( result );\n                    if (field) {\n                        header = {\n                            fieldId: result,\n                            name: field.get(\"name\")\n                        };\n                    }\n                }\n                else {\n                    header = {\n                        id: attribute.id || attribute.cid,\n                        fieldId: attribute.get(\"fieldId\"),\n                        name: attribute.get(\"name\"),\n                        attribute: attribute\n                    };\n                }\n\n                if (header) {\n                    headers.push(header);\n                }\n            }, this);\n\n            //for the full view, add custom fields at the end\n            if (this._isFullViewActive()) {\n                bom.getAttributes().each(function(attribute) {\n                    if (!_.contains(view.get(\"fieldIds\"), attribute.get(\"fieldId\"))) {\n                        headers.push({\n                            id: attribute.id || attribute.cid,\n                            fieldId: attribute.get(\"fieldId\"),\n                            name: attribute.get(\"name\"),\n                            attribute: attribute\n                        });\n                    }\n                });\n            }\n        }\n\n        return headers;\n    },\n\n    _onAddItem: function(event) {\n        var bom = this._getBom();\n        if (!bom) { return; }\n\n        //TODO\n        //if one or more items are selected, insert after last selected item (lowest one)\n\n        BomActions.addItem(bom.id || bom.cid);\n    },\n\n    _onRemoveItems: function(event) {\n        var bom = this._getBom();\n        if (!bom) { return; }\n\n        BomActions.removeItems(\n            bom.id || bom.cid,\n            this.props.allSelectedBomItems.getItemIdsForBom(bom.id || bom.cid)\n        );\n    },\n\n    _onExport: function(event) {\n        var headers;\n        var itemIds;\n        var boms;\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        //Get the headers to export\n        headers = this._getHeaders();\n\n        //Get the items to export\n        boms = [];\n        boms.push(bom);\n        boms = boms.concat(this.props.allBoms.getDescendantBomsOfBom( bom.id || bom.cid ));\n\n        itemIds = [];\n        _.each(boms, function(result) {\n            result.getItems().each(function(item) {\n                itemIds.push(item.id || item.cid);\n            });\n        });\n\n        // Export!\n        BomActions.exportItems(headers, itemIds);\n\n        // Show export modal\n        this.setState({\n          isExportModalOpen: true\n        });\n    },\n\n    _onCancelExport: function() {\n        // Show export modal\n        this.setState({\n          isExportModalOpen: false\n        });\n    },\n\n    _onDownloadExport: function() {\n        // Show export modal\n        this.setState({\n          isExportModalOpen: false\n        });\n    },\n\n    _getExportModal: function() {\n        return (\n          React.createElement(BomExportModal, {\n            onCancel: this._onCancelExport, \n            onDownload: this._onDownloadExport}));\n    },\n\n    _onShowHistory: function() {\n        var product = this._getProduct();\n        if (!product) { return null; }\n\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        this.transitionTo(\"bomHistory\", {\n            productId: product.id || product.cid,\n            bomId: bom.id || bom.cid\n        });\n    },\n\n    _onShowComments: function() {\n        var product = this._getProduct();\n        if (!product) { return null; }\n\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        this.transitionTo(\"bomComments\", {\n            productId: product.id || product.cid,\n            bomId: bom.id || bom.cid\n        });\n    }\n});\n\nmodule.exports = Bom;\n\n\n},{\"actions/BomActions\":79,\"actions/BomViewActions\":80,\"actions/ProductActions\":83,\"components/AddColumnModal.jsx\":100,\"components/BomExportModal.jsx\":103,\"components/BomField.jsx\":104,\"components/BomSection.jsx\":118,\"components/EditColumnModal.jsx\":123,\"components/SaveViewModal.jsx\":135,\"components/TextInput.jsx\":139,\"constants/FieldConstants\":148,\"models/BomAttributeModel\":160,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"react/lib/cx\":9,\"underscore\":\"underscore\"}],176:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\n\nvar Table = require(\"react-bootstrap\").Table;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Button = require(\"react-bootstrap\").Button;\n\nvar CommentItem = require(\"components/CommentItem.jsx\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\nvar BomActions = require(\"actions/BomActions\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar BomComments = React.createClass({displayName: \"BomComments\",\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            isAdding: false\n        };\n    },\n\n    componentWillMount: function() {\n        this._validateBom(this.props);\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n        this._init();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n\n        this._init();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _validateBom: function(props) {\n        var bom = this._getBom( props );\n        var product = this._getProduct( props );\n\n        //TODO check this because of update order\n        //if ( !bom || props.product.isAncestorOfBom(bom.id || bom.cid)) {\n        if ( !product ) {\n            this.replaceWith(\"dashboard\");\n            return false;\n        }\n        // If the bom does not exists, try to redirect to the product\n        else if ( !bom ) {\n            this.replaceWith(\"product\", {productId: product.id || product.cid});\n            return false;\n        }\n        // Redirect if bomId is present as parameter but doesn't match\n        // This is used to redirect a client id to its permanent id\n        else if ( bom.id && bom.id !== +props.params.bomId ) {\n            this.replaceWith(\"bom\", {\n                productId: product.id || product.cid,\n                bomId: bom.id});\n            return false;\n        }\n\n        return true;\n    },\n\n    _getProduct: function(props) {\n        var productId;\n        props = props ? props : this.props;\n        productId = props.params ? props.params.productId : undefined;\n        return props.allProducts.get( productId );\n    },\n\n    _getBom: function(props) {\n        var product;\n        props = props ? props : this.props;\n\n        if (props.params && props.params.bomId) {\n            return props.allBoms.get( props.params.bomId );\n        }\n        else if ((product = this._getProduct(props))) {\n            return props.allBoms.get( product.get(\"bomId\") );\n        }\n    },\n\n    _init: function() {\n        var bom = this._getBom();\n\n        if (bom.getComments().hasFetched() ||\n            bom.getComments().isLoaded()) {\n            return;\n        }\n\n        BomActions.fetchComments(bom.id, 10);\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var product = this._getProduct();\n        if (!product) { return null; }\n\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        var newComment;\n        var spinner;\n        var more;\n\n        // Create the new BoM item if + was clicked\n        if (this.state.isAdding) {\n            newComment = (React.createElement(\"tr\", null, \n                    React.createElement(\"td\", null, \n                        React.createElement(TextInput, {\n                            type: \"textarea\", \n                            className: \"edit\", \n                            onSave: this._onSaveNew, \n                            onCancel: this._onCancelNew, \n                            value: \"\", \n                            placeholder: \"Enter your comment\"})\n                    ), \n                    React.createElement(\"td\", {className: \"compact\"}, \n                        React.createElement(Button, {\n                            className: \"btn-nobg\", \n                            bsStyle: \"danger\", \n                            bsSize: \"small\", \n                            onClick: this._onCancelNew}, \n                            React.createElement(Glyphicon, {glyph: \"remove\"})\n                        )\n                    )\n                ));\n        }\n        else {\n            newComment = (React.createElement(\"tr\", null, \n                    React.createElement(\"td\", {colSpan: \"2\", onClick: this._onAdd}, \n                        React.createElement(ButtonToolbar, {className: \"pull-right btn-toolbar-right\"}, \n                            React.createElement(Button, {\n                                className: \"btn-nobg\", \n                                bsStyle: \"default\", \n                                bsSize: \"small\", \n                                onClick: this._onAdd}, \n                                React.createElement(Glyphicon, {glyph: \"plus\"})\n                            )\n                        )\n                    )\n                ));\n        }\n\n        if (bom.getComments().isFetching()) {\n            spinner = (\n                React.createElement(\"tr\", {key: \"spinner\"}, \n                    React.createElement(\"td\", {colSpan: \"2\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n        }\n        else if (!bom.getComments().isLoaded()) {\n            more = (\n                React.createElement(\"tr\", {key: \"more\"}, \n                    React.createElement(\"td\", {colSpan: \"2\", className: \"text-center\"}, \n                        React.createElement(Button, {bsStyle: \"link\", onClick: this._loadPrevious}, \"load previous\")\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"bom-comments content scrollable\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"bom-comments-header clearfix\"}, \n                        React.createElement(ButtonToolbar, {className: \"pull-left\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(\"h1\", null, React.createElement(Link, {to: \"bom\", params: {productId: product.id || product.cid, bomId: bom.id || bom.cid}}, bom.get(\"name\")), \" \", React.createElement(Glyphicon, {bsSize: \"small\", bsStyle: \"default\", glyph: \"menu-right\"}), \" Comments\")\n                            )\n                        ), \n                        React.createElement(ButtonToolbar, {className: \"pull-right\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(Link, {to: \"bom\", params: {productId: product.id || product.cid, bomId: bom.id || bom.cid}}, \"Back to BoM\")\n                            )\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"row col-xs-12 col-sm-12 col-md-6 col-lg-6\"}, \n                        React.createElement(Table, {className: \"comment-table\", striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                            React.createElement(\"tbody\", null, \n                                newComment, \n                                bom.getComments().map(function(comment, index) {\n                                    return (React.createElement(CommentItem, {\n                                        key: comment.id || comment.cid, \n                                        comment: comment, \n                                        onSave: this._onSaveEdit, \n                                        onRemove: this._onRemove}));\n                                }, this), \n                                spinner, \n                                more\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _onAdd: function(event) {\n        this.setState({\n            isAdding: true\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n    },\n\n    _onCancelNew: function(event) {\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSaveNew: function(body) {\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        body = body || \"\";\n        body = body.trim();\n\n        if (body) {\n            BomActions.createComment(bom.id || bom.cid, body);\n        }\n\n        this.setState({\n            isAdding: false,\n        });\n    },\n\n    _onSaveEdit: function(commentId, body) {\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        BomActions.updateComment(bom.id || bom.cid, commentId, body);\n    },\n\n    _onRemove: function(commentId) {\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        BomActions.destroyComment(bom.id || bom.cid, commentId);\n    },\n\n    _loadPrevious: function() {\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        BomActions.fetchComments(bom.id, 10);\n    }\n});\n\nmodule.exports = BomComments;\n\n\n},{\"actions/BomActions\":79,\"components/CommentItem.jsx\":120,\"components/TextInput.jsx\":139,\"constants/ChangeConstants\":147,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\"}],177:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\n\nvar Table = require(\"react-bootstrap\").Table;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Button = require(\"react-bootstrap\").Button;\n\nvar HistoryItem = require(\"components/HistoryItem.jsx\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\nvar ChangeActions = require(\"actions/ChangeActions\");\n\nvar BomHistory = React.createClass({displayName: \"BomHistory\",\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired,\n        allBoms: React.PropTypes.object.isRequired,\n        allChanges: React.PropTypes.object.isRequired\n    },\n\n    componentWillMount: function() {\n        this._validateBom(this.props);\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n        this._init();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n\n        this._init();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _validateBom: function(props) {\n        var bom = this._getBom( props );\n        var product = this._getProduct( props );\n\n        //TODO check this because of update order\n        //if ( !bom || props.product.isAncestorOfBom(bom.id || bom.cid)) {\n        if ( !product ) {\n            this.replaceWith(\"dashboard\");\n            return false;\n        }\n        // If the bom does not exists, try to redirect to the product\n        else if ( !bom ) {\n            this.replaceWith(\"product\", {productId: product.id || product.cid});\n            return false;\n        }\n        // Redirect if bomId is present as parameter but doesn't match\n        // This is used to redirect a client id to its permanent id\n        else if ( bom.id && bom.id !== +props.params.bomId ) {\n            this.replaceWith(\"bom\", {\n                productId: product.id || product.cid,\n                bomId: bom.id});\n            return false;\n        }\n\n        return true;\n    },\n\n    _getProduct: function(props) {\n        var productId;\n        props = props ? props : this.props;\n        productId = props.params ? props.params.productId : undefined;\n        return props.allProducts.get( productId );\n    },\n\n    _getBom: function(props) {\n        var product;\n        props = props ? props : this.props;\n\n        if (props.params && props.params.bomId) {\n            return props.allBoms.get( props.params.bomId );\n        }\n        else if ((product = this._getProduct(props))) {\n            return props.allBoms.get( product.get(\"bomId\") );\n        }\n    },\n\n    _init: function() {\n        var bom = this._getBom();\n        var allChanges = this.props.allChanges;\n\n        if (bom.hasLoadedChanges() || bom.isNew()) { return; }\n\n        // load changes older than the new ones\n        var changes = allChanges.getVisibleForBom(bom.id || bom.cid);\n        changes = _.filter(changes, function(change) {\n            return change.isNew();\n        });\n\n        changes = _.sortBy(changes, function(change) {\n            return change.get(\"number\");\n        });\n\n        ChangeActions.fetchForBom(bom.id, undefined, changes.length ? changes[0].get(\"number\") : undefined)\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var allChanges = this.props.allChanges;\n        var changes;\n        var columns = this._getColumns();\n        var spinner;\n\n        var product = this._getProduct();\n        if (!product) { return null; }\n\n        var bom = this._getBom();\n        if (!bom) { return null; }\n\n        if (bom.isLoadingChanges()) {\n            spinner = (\n                React.createElement(\"tr\", {key: \"spinner\"}, \n                    React.createElement(\"td\", {colSpan: \"6\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n        }\n        else {\n            changes = allChanges.getVisibleForBom(bom.id || bom.cid);\n            changes = _.sortBy(changes, function(change) {\n                return -change.get(\"number\");\n            });\n\n            changes = changes.map(function(change) {\n                var item = change.has(\"itemId\") ? bom.getItem(change.get(\"itemId\")) : undefined;\n\n                return (\n                    React.createElement(HistoryItem, {\n                        key: change.id || change.cid, \n                        change: change, \n                        bom: bom, \n                        item: item, \n                        columns: columns}));\n            }, this);\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"bom-history content scrollable\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"bom-history-header clearfix\"}, \n                        React.createElement(ButtonToolbar, {className: \"pull-left\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(\"h1\", null, React.createElement(Link, {to: \"bom\", params: {productId: product.id || product.cid, bomId: bom.id || bom.cid}}, bom.get(\"name\")), \" \", React.createElement(Glyphicon, {bsSize: \"small\", bsStyle: \"default\", glyph: \"menu-right\"}), \" History\")\n                            )\n                        ), \n                        React.createElement(ButtonToolbar, {className: \"pull-right\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(Link, {to: \"bom\", params: {productId: product.id || product.cid, bomId: bom.id || bom.cid}}, \"Back to BoM\")\n                            )\n                        )\n                    ), \n                    React.createElement(Table, {striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                        React.createElement(\"thead\", null, \n                            React.createElement(\"tr\", null, \n                                columns.map(function(columnId) {\n                                    return this._getHeader(columnId);\n                                }, this)\n                            )\n                        ), \n                        React.createElement(\"tbody\", null, \n                            changes, \n                            spinner\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _getColumns: function() {\n        return [\n            ChangeConstants.NUMBER,\n            // Disable item id for now, as it does not really work. Will readd later when fixed.\n            //ChangeConstants.ITEM_ID,\n            ChangeConstants.ITEM_SKU,\n            ChangeConstants.DETAILS,\n            ChangeConstants.DATE,\n            ChangeConstants.STATUS\n        ];\n    },\n\n    // TODO move the history table into a component\n    _getHeader: function(columnId) {\n        switch(columnId) {\n            case ChangeConstants.NUMBER:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Change #\"));\n                break;\n            case ChangeConstants.BOM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM ID\"));\n                break;\n            case ChangeConstants.BOM_NAME:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM Name\"));\n                break;\n            case ChangeConstants.ITEM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item ID\"));\n                break;\n            case ChangeConstants.ITEM_SKU:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item SKU\"));\n                break;\n            case ChangeConstants.DETAILS:\n                return (React.createElement(\"th\", {key: columnId}, \"Details\"));\n                break;\n            case ChangeConstants.DATE:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Date\"));\n                break;\n            case ChangeConstants.STATUS:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Saved\"));\n                break;\n        }\n    },\n\n    _loadPrevious: function() {\n        var before;\n        var bom = this._getBom();\n        var changes = this.props.allChanges.getVisibleForBom(bom.id || bom.cid);\n\n        changes = _.sortBy(changes, function(change) {\n            return -change.get(\"number\");\n        });\n\n        before = changes.length ? _.last(changes).get(\"number\") : undefined;\n\n        // Fetch changes from server if never initialized\n        ChangeActions.fetchForBom(bom.id, 10, before);\n    }\n});\n\nmodule.exports = BomHistory;\n\n\n},{\"actions/ChangeActions\":81,\"components/HistoryItem.jsx\":126,\"constants/ChangeConstants\":147,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\"}],178:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar State = require(\"react-router\").State;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar DropdownButton = require(\"react-bootstrap\").DropdownButton;\nvar MenuItem = require(\"react-bootstrap\").MenuItem;\nvar Alert = require(\"react-bootstrap\").Alert;\nvar Input = require(\"react-bootstrap\").Input;\nvar Panel = require(\"react-bootstrap\").Panel;\n\nvar InputConstants = require('constants/InputConstants');\nvar BomActions = require(\"actions/BomActions\");\nvar BomImporter = require(\"utils/BomImporter\");\nvar BomUtils = require(\"utils/BomUtils\");\n\nvar BomImport = React.createClass({displayName: \"BomImport\",\n    mixins: [Navigation, State],\n\n    propTypes: {},\n\n    getInitialState: function() {\n        return {\n            alert: undefined,\n            file: undefined\n        };\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var browseButton;\n        var importAlert;\n        var importOptions;\n\n        // Create browse button\n        browseButton = (\n            React.createElement(Button, {\n                bsStyle: \"primary\", \n                bsSize: \"large\", \n                onClick: this._onBrowse}, \n                \"Browse\"\n            )\n            );\n\n        // Create alert component if needed\n        if (this.state.alert) {\n            importAlert = (\n                React.createElement(Alert, {bsStyle: \"danger\"}, this.state.alert));\n        }\n\n        if (this.state.options) {\n            importOptions = (React.createElement(\"div\", {className: \"bom-import-options clearfix\"}, \n                    React.createElement(\"form\", {className: \"form-inline col-md-12\"}, \n                        React.createElement(\"div\", {className: \"form-group\"}, \n                            React.createElement(\"label\", {className: \"col-md-7 text-right\", htmlFor: \"header\"}, \"Your file includes column names\"), \n                            React.createElement(DropdownButton, {onSelect: this._onSelectHeaders, id: \"header\", bsStyle: \"default\", title: this.state.options.header?\"Yes\":\"No\"}, \n                                this.state.options.header ? (React.createElement(MenuItem, {eventKey: \"no\"}, \"No\")) : (React.createElement(MenuItem, {eventKey: \"yes\"}, \"Yes\"))\n                            )\n                        ), \n                        React.createElement(\"div\", {className: \"form-group\"}, \n                            React.createElement(\"label\", {className: \"col-md-7 text-right\", htmlFor: \"delimiter\"}, \"Your values are separated by\"), \n                            React.createElement(\"input\", {\n                                id: \"delimiter\", \n                                type: \"text\", \n                                className: \"form-control\", \n                                value: this.state.options.delimiter, \n                                onChange: this._onChangeDelimiter, \n                                onKeyDown: this._onKeyDownDelimiter})\n                        ), \n                        React.createElement(\"div\", {className: \"form-group\"}, \n                            React.createElement(\"label\", {className: \"col-md-7 text-right\", htmlFor: \"encoding\"}, \"Your file is encoded as\"), \n                            React.createElement(DropdownButton, {onSelect: this._onSelectEncoding, id: \"encoding\", bsStyle: \"default\", title: this._getEncodingFromLabel(this.state.options.encoding)}, \n                                React.createElement(MenuItem, {eventKey: \"utf-8\"}, this._getEncodingFromLabel(\"utf-8\")), \n                                React.createElement(MenuItem, {eventKey: \"ascii\"}, this._getEncodingFromLabel(\"ascii\")), \n                                React.createElement(MenuItem, {eventKey: \"macintosh\"}, this._getEncodingFromLabel(\"macintosh\"))\n                            )\n                        )\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(\"div\", {id: \"bom-import\", className: \"scrollable content\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"col-lg-6 col-md-8 col-sm-12\"}, \n                        React.createElement(Panel, {header: \"How We Handle Imports\", bsStyle: \"info\"}, \n                            React.createElement(\"p\", null, \"For manufacturing purposes, BoMs work best when they don't have any surprises in them, and conventions help keep things clear for both creators and manufacturers. For that reason, we'll suggest names for the columns in your BoM, which you can select from a drop-down menu. Or, you can keep the names you've got, it's totally up to you.\"), \n                            React.createElement(\"p\", null, \"We don't change ANY of your existing component information without your approval.\")\n                        ), \n\n                        React.createElement(\"h1\", null, \"Import from CSV File\"), \n                        React.createElement(Input, {\n                            type: \"text\", \n                            value: this.state.file ? this.state.file.name : \"\", \n                            bsSize: \"large\", \n                            buttonAfter: browseButton, \n                            onClick: this._onBrowse, \n                            readOnly: true}), \n                        React.createElement(Input, {\n                            type: \"file\", \n                            id: \"importFileInput\", \n                            className: \"invisible\", \n                            groupClassName: \"hidden\", \n                            label: \"CSV file\", \n                            labelClassName: \"sr-only\", \n                            onChange: this._onChangeImportFile}), \n\n                        importOptions, \n\n                        React.createElement(\"div\", {className: \"pull-right\"}, \n                            importAlert, \n                            React.createElement(ButtonToolbar, null, \n                                React.createElement(Button, {\n                                    bsStyle: \"link\", \n                                    bsSize: \"large\", \n                                    onClick: this.goBack}, \n                                    \"Cancel\"\n                                ), \n                                React.createElement(Button, {\n                                    bsStyle: \"primary\", \n                                    bsSize: \"large\", \n                                    onClick: this._onImport, \n                                    disabled: !this._canImport()}, \n                                    \"Import\"\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _getEncodingFromLabel: function(label) {\n        switch (label) {\n            case \"utf-8\":\n                return \"Unicode (UTF-8)\";\n                break;\n\n            case \"ascii\":\n                return \"Windows (ANSI)\";\n                break;\n\n            case \"macintosh\":\n                return \"Macintosh\";\n                break;\n\n            default:\n                return \"Unicode (UTF-8)\";\n                break;\n        }\n    },\n\n    _canImport: function() {\n        if (!this.state.options ||\n            this.state.options.header === undefined ||\n            !this.state.options.delimiter) { return false; }\n        return true;\n    },\n\n    _onBrowse: function() {\n        //TODO use findDOMNode when updating react\n        //React.findDOMNode( this.refs.importFileInput ).trigger(\"click\");\n\n        $(this.getDOMNode()).find(\"input#importFileInput\").trigger(\"click\");\n    },\n\n    _onChangeImportFile: function(event) {\n        if (!BomUtils.isFileAPIEnabled()) {\n            this.setState({\n                alert: \"Sorry, we don't support import in your browser, but we are working on it. Feel free to email us your BoM at bom@fabule.com.\"\n            });\n            return;\n        }\n\n        this.setState({\n            alert: undefined,\n            file: event.target.files[0]\n        });\n\n        // Auto-detect the CSV parameters\n        BomImporter.detectCSVFromFile(event.target.files[0]).then(function(options) {\n            this.setState({\n                options: options\n            });\n        }.bind(this), function(error) {\n            this.setState({\n                alert: error.message\n            });\n        }.bind(this));\n    },\n\n    _onSelectHeaders: function(key) {\n        this.setState({\n            options: _.extend({}, this.state.options, { header: key === \"yes\"})\n        })\n    },\n\n    _onSelectEncoding: function(key) {\n        this.setState({\n            options: _.extend({}, this.state.options, { encoding: key})\n        })\n    },\n\n    _onChangeDelimiter: function(event) {\n        this.setState({\n            options: _.extend({}, this.state.options, { delimiter: event.target.value})\n        })\n    },\n\n    _onKeyDownDelimiter: function(event) {\n        if (event.keyCode === InputConstants.ENTER) {\n            event.preventDefault();\n        }\n    },\n\n    _onImport: function(event) {\n\n        var productId;\n        var bomId;\n\n        if (this.props.params) {\n            productId = this.props.params.productId;\n            bomId = this.props.params.bomId;\n        }\n\n        BomActions.importFile(this.state.file, this.state.options).then(function(result) {\n\n            this.transitionTo(this.getPath() + \"/match\");\n\n        }.bind(this), function(error) {\n\n            this.setState({\n                alert: error.message\n            });\n\n        }.bind(this));\n    }\n});\n\nmodule.exports = BomImport;\n\n\n},{\"actions/BomActions\":79,\"constants/InputConstants\":149,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\",\"utils/BomImporter\":198,\"utils/BomUtils\":199}],179:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar Table = require(\"react-bootstrap\").Table;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Button = require(\"react-bootstrap\").Button;\n\nvar BomImportAttribute = require(\"components/BomImportAttribute.jsx\");\nvar BomImportItem = require(\"components/BomImportItem.jsx\");\nvar BomActions = require(\"actions/BomActions\");\nvar FieldConstants = require(\"constants/FieldConstants\");\n\nvar BomImportMatch = React.createClass({displayName: \"BomImportMatch\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allImportBoms: React.PropTypes.object.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        allTypes: React.PropTypes.object.isRequired,\n        allProducts: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        if (!this._validateBom(this.props)) { return {}; }\n\n        var bom = this.props.allImportBoms.last();\n        var attributes = bom.getAttributes().map(function(attribute) {\n            return _.extend(attribute.toJSON(), { id: attribute.id || attribute.cid});\n        });\n\n        // Set the first attribute as active\n        attributes[0].status = \"active\";\n\n        // Add the readonly ID attribute\n        // attributes.unshift({\n        //     id: \"id\",\n        //     fieldId: \"id\",\n        //     name: \"ID\",\n        //     status: \"readonly\"\n        // });\n\n        return {\n            attributes: attributes\n        };\n    },\n\n    componentWillMount: function() {\n        this._validateBom(this.props);\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _validateBom: function(props) {\n        var productId;\n        var bomId;\n\n        if (props.allImportBoms.last()) { return true; }\n\n        if (props.params) {\n            productId = props.params.productId;\n            bomId = props.params.bomId;\n        }\n\n        if (bomId) {\n            this.transitionTo(\"bomImport\", {productId: productId, bomId: bomId});\n        }\n        else if (productId) {\n            this.transitionTo(\"productImport\", {productId: productId, bomId: bomId});\n        }\n        else {\n            this.transitionTo(\"newProductImport\", {productId: productId, bomId: bomId});\n        }\n\n        return false;\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var bom = this.props.allImportBoms.last();\n        if (!bom) { return null; }\n\n        var attributes = this.state.attributes.map(_.clone);\n        var numPreviewItems = 5;\n        var fields;\n        var headers;\n        var attributeIds;\n        var items;\n        var canImport;\n\n        // Generate available fields (prevent repeat fields)\n        fields = this.props.allFields.map(function(field) {\n\n            // Disable if field is already assigned to an attribute\n            var disabled = !!_.find(attributes, function(attribute) {\n                return attribute.fieldId &&\n                    (attribute.fieldId === field.id || attribute.fieldId === field.cid) &&\n                    attribute.status !== \"skipped\";\n            });\n\n            return {\n                id: field.id || field.cid,\n                name: field.get(\"name\"),\n                typeId: field.get(\"typeId\"),\n                disabled: disabled\n            };\n        }, this);\n\n        fields = _.filter(fields, function(field) {\n            return field.id !== FieldConstants.ID;\n        });\n\n        headers = attributes.map(function(result, index) {\n            return React.createElement(BomImportAttribute, {\n                key: result.id || result.cid, \n                attribute: _.clone(result), \n                index: index, \n                onSave: this._onSaveColumn, \n                onChange: this._onChangeColumn, \n                onEdit: this._onEditColumn, \n                onSkip: this._onSkipColumn, \n                fields: fields, \n                allTypes: this.props.allTypes});\n        }, this);\n\n        items = bom.getItems().first(numPreviewItems).map(function(result) {\n            return React.createElement(BomImportItem, {\n                key: result.id || result.cid, \n                item: result, \n                attributes: attributes});\n        });\n\n        canImport = !!_.find(attributes, function(result) {\n            return result.status !== \"saved\" && result.status !== \"skipped\" && result.status !== \"readonly\";\n        });\n\n        return (\n            React.createElement(\"div\", {id: \"bom-import-match\", className: \"scrollable content\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"h1\", null, \"Import BoM\"), \n                    React.createElement(\"p\", null, \"Now we'll match the columns in your CSV file with your BoM Squad Bill of Materials.\"), \n                    React.createElement(Table, {striped: true}, \n                        React.createElement(\"thead\", null, \n                            React.createElement(\"tr\", null, \n                                headers\n                            )\n                        ), \n                        React.createElement(\"tbody\", null, \n                            items\n                        )\n                    ), \n                    React.createElement(ButtonToolbar, {className: \"btn-toolbar-import\"}, \n                        React.createElement(Button, {\n                            bsStyle: \"primary\", \n                            bsSize: \"large\", \n                            onClick: this._onImport, \n                            disabled: canImport}, \n                            \"Import\"\n                        ), \n                        React.createElement(Button, {\n                            bsStyle: \"link\", \n                            bsSize: \"large\", \n                            onClick: this.goBack}, \n                            \"Cancel\"\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _onImport: function(event) {\n        var importedBom = this.props.allImportBoms.last();\n        var productId;\n        var bomId;\n        var product;\n\n        if (this.props.params) {\n            productId = this.props.params.productId;\n            bomId = this.props.params.bomId;\n        }\n\n        if (bomId) {\n            // this.transitionTo(\"bom\", {productId: productId, bomId: bomId});\n\n            // BomActions.importUpdateBom(\n            //     importedBom.id || importedBom.cid,\n            //     this._getAttributesForImport(),\n            //     bomId\n            // );\n        }\n        else if (productId) {\n            BomActions.importNewBom(\n                importedBom.id || importedBom.cid,\n                this._getAttributesForImport(),\n                productId\n            ).then(function(bom) {\n                this.transitionTo(\"bom\", {productId: productId, bomId: bom.id || bom.cid});\n            }.bind(this), function(error) {\n                //TODO show warning\n                console.log(error);\n            });\n        }\n        else {\n            BomActions.importNewProduct(\n                importedBom.id || importedBom.cid,\n                this._getAttributesForImport()\n            ).then(function(product) {\n                this.transitionTo(\"product\", { productId: product.id || product.cid });\n            }.bind(this), function(error) {\n                //TODO show warning\n                console.log(error);\n            });\n        }\n    },\n\n    _getAttributesForImport: function() {\n        var attributes = this.state.attributes.map(_.clone);\n\n        attributes = _.filter(attributes, function(result) {\n            return result.status !== \"skipped\";\n        });\n\n        _.each(attributes, function(result) {\n            if (result.savedName) {\n                result.name = result.savedName;\n                delete result.savedName;\n            }\n        });\n\n        return attributes;\n    },\n\n    _onSaveColumn: function(index, name, fieldId) {\n        var attributes = this.state.attributes.map(_.clone);\n        var nextActive;\n\n        if (!attributes[index]) { return; }\n\n        attributes[index].status = \"saved\",\n        attributes[index].savedName = name,\n        attributes[index].fieldId = fieldId\n\n        // Find the next to activate\n        this._updateActiveColumn(attributes);\n\n        this.setState({\n            attributes: attributes\n        });\n    },\n\n    _onChangeColumn: function(index, fieldId) {\n        var attributes = this.state.attributes.map(_.clone);\n        if (!attributes[index]) { return; }\n\n        attributes[index].fieldId = fieldId;\n\n        this.setState({\n            attributes: attributes\n        });\n    },\n\n    _onEditColumn: function(index) {\n        var attributes = this.state.attributes.map(_.clone);\n        if (!attributes[index]) { return; }\n\n        attributes[index].status = undefined;\n\n        // Find the next to activate\n        this._updateActiveColumn(attributes);\n\n        this.setState({\n            attributes: attributes\n        });\n    },\n\n    _onSkipColumn: function(index, skip) {\n        var attributes = this.state.attributes.map(_.clone);\n\n        if (!attributes[index]) { return; }\n\n        // Set as skipped\n        attributes[index].status = skip ? \"skipped\" : undefined;\n\n        if(!skip && !!_.findWhere(attributes, {fieldId: attributes[index].fieldId, status: 'active'})) {\n            attributes[index].fieldId = FieldConstants.CUSTOM_FIELD.id;\n        }\n\n        // Find the next to activate\n        this._updateActiveColumn(attributes);\n\n        this.setState({\n            attributes: attributes\n        });\n    },\n\n    _updateActiveColumn: function(attributes) {\n        var found;\n        // var hs;\n\n        _.each(attributes, function(result, index) {\n            if (found === undefined) {\n                if (result.status === \"active\" || !result.status) {\n                    result.status = \"active\";\n                    found = index;\n                }\n            }\n            else if (result.status === \"active\") {\n                result.status = undefined;\n            }\n        });\n\n        // if (found !== undefined) {\n        //     found = $(this.getDOMNode()).find(\"thead>tr>th:nth-child(\"+found+\")\");\n        //     if (found) {\n        //         console.log(found);\n        //         console.log(found.position());\n        //         hs = $(this.getDOMNode()).getNiceScroll(0);\n        //         console.log(hs.scroll.x + found.position().left);\n        //         hs.doScrollLeft(hs.scroll.x + found.position().left, 1000);\n        //     }\n        // }\n    }\n\n});\n\nmodule.exports = BomImportMatch;\n\n\n},{\"actions/BomActions\":79,\"components/BomImportAttribute.jsx\":106,\"components/BomImportItem.jsx\":107,\"constants/FieldConstants\":148,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\"}],180:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar RouteHandler = require(\"react-router\").RouteHandler;\nvar LocalStorage = require(\"utils/LocalStorage\");\n\nvar Alerts = require(\"components/Alerts.jsx\");\nvar Header = require(\"components/Header.jsx\");\nvar LeftPanel = require(\"components/LeftPanel.jsx\");\nvar BottomPanel = require(\"components/BottomPanel.jsx\");\nvar Modal = require(\"components/Modal.jsx\");\nvar SessionTimeoutModal = require(\"components/SessionTimeoutModal.jsx\");\n\nvar ProductStore = require(\"stores/ProductStore\");\nvar BomStore = require(\"stores/BomStore\");\nvar BomImportStore = require(\"stores/BomImportStore\");\nvar SelectedBomItemStore = require(\"stores/SelectedBomItemStore\");\nvar UserStore = require(\"stores/UserStore\");\nvar ChangeStore = require(\"stores/ChangeStore\");\nvar FieldStore = require(\"stores/FieldStore\");\nvar FieldTypeStore = require(\"stores/FieldTypeStore\");\nvar BomViewStore = require(\"stores/BomViewStore\");\n\nvar ProductActions = require(\"actions/ProductActions\");\nvar BomActions = require(\"actions/BomActions\");\nvar FieldActions = require(\"actions/FieldActions\");\nvar TypeActions = require(\"actions/TypeActions\");\nvar ChangeActions = require(\"actions/ChangeActions\");\nvar BomViewActions = require(\"actions/BomViewActions\");\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\n\nvar cx = require(\"react/lib/cx\");\n\nvar BOTTOM_PANEL_STORAGE_KEY = \"settings:ui:is_bottom_panel_open\";\nvar SIDE_PANEL_STORAGE_KEY = \"settings:ui:is_side_panel_open\";\n\nfunction getState() {\n    return {\n        user: UserStore,\n        allProducts: ProductStore,\n        allBoms: BomStore,\n        allSelectedBomItems: SelectedBomItemStore,\n        allChanges: ChangeStore,\n        allFields: FieldStore,\n        allTypes: FieldTypeStore,\n        allImportBoms: BomImportStore,\n        allViews: BomViewStore\n    };\n}\n\nvar BomManager = React.createClass({displayName: \"BomManager\",\n\n    getInitialState: function() {\n        return _.extend(getState(), {\n            initialized: false,\n            modal: null,\n            sidePanelOpen: LocalStorage.get(SIDE_PANEL_STORAGE_KEY, {defaultValue: true}),\n            bottomPanelOpen: LocalStorage.get(BOTTOM_PANEL_STORAGE_KEY, {defaultValue: true})\n        });\n    },\n\n    componentDidMount: function() {\n        UserStore.init().then(function(user) {\n\n            //Hacked to simulate a login action.\n            user.login();\n\n        }).then(function() {\n\n            //success\n            ProductStore.on(\"add add:comments\", this._onAdd);\n            ProductStore.on(\"change change:comments\", this._onChange);\n            ProductStore.on(\"remove remove:comments\", this._onRemove);\n            ProductStore.on(\"reset reset:comments\", this._onReset);\n            ProductStore.on(\"request request:comments\", this._onRequest);\n            ProductStore.on(\"sync sync:comments\", this._onSync);\n            ProductStore.on(\"update\", this._onUpdate);\n\n            BomStore.on(\"add add:items add:attributes add:values add:comments\", this._onAdd);\n            BomStore.on(\"change change:items change:attributes change:values change:comments\", this._onChange);\n            BomStore.on(\"remove remove:items remove:attributes remove:values remove:comments\", this._onRemove);\n            BomStore.on(\"reset reset:items reset:attributes reset:values reset:comments\", this._onReset);\n            BomStore.on(\"request request:items request:attributes request:values request:comments\", this._onRequest);\n            BomStore.on(\"sync sync:items sync:attributes sync:values sync:comments\", this._onSync);\n            BomStore.on(\"update update:items\", this._onUpdate);\n\n            SelectedBomItemStore.on(\"add\", this._onAdd);\n            SelectedBomItemStore.on(\"change\", this._onChange);\n            SelectedBomItemStore.on(\"remove\", this._onRemove);\n            SelectedBomItemStore.on(\"reset\", this._onReset);\n            SelectedBomItemStore.on(\"request\", this._onRequest);\n            SelectedBomItemStore.on(\"sync\", this._onSync);\n\n            UserStore.on(\"add\", this._onAdd);\n            UserStore.on(\"change\", this._onChange);\n            UserStore.on(\"remove\", this._onRemove);\n            UserStore.on(\"reset\", this._onReset);\n            UserStore.on(\"request\", this._onRequest);\n            UserStore.on(\"sync\", this._onSync);\n            UserStore.on(\"validate\", this._onValidate);\n\n            ChangeStore.on(\"add\", this._onAdd);\n            ChangeStore.on(\"change\", this._onChange);\n            ChangeStore.on(\"remove\", this._onRemove);\n            ChangeStore.on(\"reset\", this._onReset);\n\n            FieldStore.on(\"add\", this._onAdd);\n            FieldStore.on(\"change\", this._onChange);\n            FieldStore.on(\"remove\", this._onRemove);\n            FieldStore.on(\"reset\", this._onReset);\n\n            FieldTypeStore.on(\"add\", this._onAdd);\n            FieldTypeStore.on(\"change\", this._onChange);\n            FieldTypeStore.on(\"remove\", this._onRemove);\n            FieldTypeStore.on(\"reset\", this._onReset);\n\n            BomImportStore.on(\"add\", this._onAdd);\n            BomImportStore.on(\"change\", this._onChange);\n            BomImportStore.on(\"remove\", this._onRemove);\n            BomImportStore.on(\"reset\", this._onReset);\n\n            BomViewStore.on(\"add\", this._onAdd);\n            BomViewStore.on(\"change\", this._onChange);\n            BomViewStore.on(\"remove\", this._onRemove);\n            BomViewStore.on(\"reset\", this._onReset);\n            BomViewStore.on(\"sync\", this._onSync);\n\n            $(window).on(\"beforeunload\", function(){\n                if (ChangeStore.getQueueLength()) {\n                    return \"You have unsaved changes that will be lost if you leave now. Are you sure you want to leave?\";\n                }\n            });\n\n            AppDispatcher.register((function(payload) {\n                if(!payload || !payload.action || !payload.action.type){\n                    return;\n                }\n\n                if(payload.action.type === \"show-modal\"){\n                    this.setState({\n                        modal: payload.modal\n                    });\n                }\n            }).bind(this));\n\n            $(window).on(\"resize\", function(){\n                this.forceUpdate();\n            }.bind(this));\n\n            this.setState({\n                initialized: true\n            });\n\n        }.bind(this)).then(undefined, function(error) {\n\n            UserStore.logout();\n\n        }.bind(this));\n    },\n\n    componentDidUpdate: function(prevProps, prevState){\n        if(this.state.modal && !prevState.modal) {\n            $(\"#modal\").on(\"hidden.bs.modal\", (function (e) {\n                this.setState({\n                    modal: null\n                });\n            }).bind(this));\n\n            $(\"#modal\").on(\"shown.bs.modal\", function () {\n              $(\"#modalConfirm\").focus();\n            });\n\n            $(\"#modal\").modal(\"show\");\n        }\n    },\n\n    componentWillUnmount: function() {\n        $(\"#modal\").off();\n\n        ProductStore.off(\"add add:comments\", this._onAdd);\n        ProductStore.off(\"change change:comments\", this._onChange);\n        ProductStore.off(\"remove remove:comments\", this._onRemove);\n        ProductStore.off(\"reset reset:comments\", this._onReset);\n        ProductStore.off(\"request request:comments\", this._onRequest);\n        ProductStore.off(\"sync sync:comments\", this._onSync);\n        ProductStore.off(\"update\", this._onUpdate);\n\n        BomStore.off(\"add add:items add:attributes add:values add:comments\", this._onAdd);\n        BomStore.off(\"change change:items change:attributes change:values change:comments\", this._onChange);\n        BomStore.off(\"remove remove:items remove:attributes remove:values remove:comments\", this._onRemove);\n        BomStore.off(\"reset reset:items reset:attributes reset:values reset:comments\", this._onReset);\n        BomStore.off(\"request request:items request:attributes request:values request:comments\", this._onRequest);\n        BomStore.off(\"sync sync:items sync:attributes sync:values sync:comments\", this._onSync);\n        BomStore.off(\"update update:items\", this._onUpdate);\n\n        SelectedBomItemStore.off(\"add\", this._onAdd);\n        SelectedBomItemStore.off(\"change\", this._onChange);\n        SelectedBomItemStore.off(\"remove\", this._onRemove);\n        SelectedBomItemStore.off(\"reset\", this._onReset);\n        SelectedBomItemStore.off(\"request\", this._onRequest);\n        SelectedBomItemStore.off(\"sync\", this._onSync);\n\n        UserStore.off(\"add\", this._onAdd);\n        UserStore.off(\"change\", this._onChange);\n        UserStore.off(\"remove\", this._onRemove);\n        UserStore.off(\"reset\", this._onReset);\n        UserStore.off(\"request\", this._onRequest);\n        UserStore.off(\"sync\", this._onSync);\n        UserStore.off(\"validate\", this._onValidate);\n\n        ChangeStore.off(\"add\", this._onAdd);\n        ChangeStore.off(\"change\", this._onChange);\n        ChangeStore.off(\"remove\", this._onRemove);\n        ChangeStore.off(\"reset\", this._onReset);\n\n        FieldStore.off(\"add\", this._onAdd);\n        FieldStore.off(\"change\", this._onChange);\n        FieldStore.off(\"remove\", this._onRemove);\n        FieldStore.off(\"reset\", this._onReset);\n\n        FieldTypeStore.off(\"add\", this._onAdd);\n        FieldTypeStore.off(\"change\", this._onChange);\n        FieldTypeStore.off(\"remove\", this._onRemove);\n        FieldTypeStore.off(\"reset\", this._onReset);\n\n        BomImportStore.off(\"add\", this._onAdd);\n        BomImportStore.off(\"change\", this._onChange);\n        BomImportStore.off(\"remove\", this._onRemove);\n        BomImportStore.off(\"reset\", this._onReset);\n\n        BomViewStore.off(\"add\", this._onAdd);\n        BomViewStore.off(\"change\", this._onChange);\n        BomViewStore.off(\"remove\", this._onRemove);\n        BomViewStore.off(\"reset\", this._onReset);\n        BomViewStore.off(\"sync\", this._onSync);\n    },\n\n    render: function() {\n        var isConnected = this.state.allChanges.isConnected();\n\n        if (!this.state.initialized) {\n            return (React.createElement(\"div\", {className: \"container-fluid bom-manager\"}, \n                    React.createElement(Header, null), \n                    React.createElement(\"div\", {className: \"center-panel col-md-12\"}, \n                        React.createElement(\"div\", {className: \"loader\"}, \n                            React.createElement(\"div\", null, \"Loading... \", React.createElement(\"span\", {className: \"glyphicon glyphicon-refresh glyphicon-spin\", \"aria-hidden\": \"true\"}))\n                        )\n                    ), \n                    this.state.modal\n                ));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"container-fluid bom-manager\"}, \n                React.createElement(Alerts, null), \n                React.createElement(Header, {\n                    user: this.state.user, \n                    allChanges: this.state.allChanges}), \n                React.createElement(LeftPanel, {\n                    open: this.state.sidePanelOpen, \n                    onOpen: this._onOpenSidePanel, \n                    onClose: this._onCloseSidePanel, \n                    allProducts: this.state.allProducts, \n                    allBoms: this.state.allBoms, \n                    allChanges: this.state.allChanges, \n                    currentProductId: this.props.params.productId, \n                    currentBomId: this.props.params.bomId}), \n                React.createElement(\"div\", {className: cx({\n                    \"center-panel\": true,\n                    \"center-panel-sidebar-offset\": this.state.sidePanelOpen\n                })}, \n                    React.createElement(\"div\", {id: \"content-area\", \n                        className: cx({\n                            \"content-area-narrow\": this.state.sidePanelOpen,\n                            \"content-area-wide\": !this.state.sidePanelOpen,\n                            \"content-area-short\": this.state.bottomPanelOpen,\n                            \"content-area-tall\": !this.state.bottomPanelOpen\n                        })}, \n                        React.createElement(RouteHandler, {\n                            params: this.props.params, \n                            user: this.state.user, \n                            allProducts: this.state.allProducts, \n                            allBoms: this.state.allBoms, \n                            allSelectedBomItems: this.state.allSelectedBomItems, \n                            allFields: this.state.allFields, \n                            allTypes: this.state.allTypes, \n                            allImportBoms: this.state.allImportBoms, \n                            allChanges: this.state.allChanges, \n                            allViews: this.state.allViews})\n                    ), \n                    React.createElement(BottomPanel, {\n                        open: this.state.bottomPanelOpen, \n                        onOpen: this._onOpenBottomPanel, \n                        onClose: this._onCloseBottomPanel, \n                        allBoms: this.state.allBoms, \n                        allSelectedBomItems: this.state.allSelectedBomItems, \n                        allFields: this.state.allFields, \n                        allTypes: this.state.allTypes, \n                        allChanges: this.state.allChanges})\n                ), \n                this.state.modal\n            ));\n    },\n\n    _onOpenSidePanel: function() {\n        LocalStorage.set(SIDE_PANEL_STORAGE_KEY, true);\n        this.setState({\n            sidePanelOpen: true\n        });\n    },\n\n    _onCloseSidePanel: function() {\n        LocalStorage.set(SIDE_PANEL_STORAGE_KEY, false);\n        this.setState({\n            sidePanelOpen: false\n        });\n    },\n\n    _onOpenBottomPanel: function() {\n        LocalStorage.set(BOTTOM_PANEL_STORAGE_KEY, true);\n        this.setState({\n            bottomPanelOpen: true\n        });\n    },\n\n    _onCloseBottomPanel: function() {\n        LocalStorage.set(BOTTOM_PANEL_STORAGE_KEY, false);\n        this.setState({\n            bottomPanelOpen: false\n        });\n    },\n\n    /**\n     * Event handler for events coming from the stores\n     */\n    _onAdd: function(model, collection, options) {\n        options = options || {};\n        if (options.shouldUpdate === false) { return; }\n\n        this.setState(getState());\n    },\n\n    _onRemove: function(model, collection, options) {\n        options = options || {};\n        if (options.shouldUpdate === false) { return; }\n\n        this.setState(getState());\n    },\n\n    _onChange: function(collection, options) {\n        options = options || {};\n        if (options.shouldUpdate === false) { return; }\n\n        this.setState(getState());\n    },\n\n    _onReset: function(collection, options) {\n        options = options || {};\n        if (options.shouldUpdate === false) { return; }\n\n        this.setState(getState());\n    },\n\n    _onRequest: function(collection, xhr, options) {\n        options = options || {};\n        if (options.shouldUpdate === false) { return; }\n\n        this.setState(getState());\n    },\n\n    _onSync: function(collection, resp, options) {\n        options = options || {};\n        if (options.shouldUpdate === false) { return; }\n\n        this.setState(getState());\n    },\n\n    _onValidate: function() {\n        this.setState(getState());\n    },\n\n    _onUpdate: function() {\n        this.setState(getState());\n    },\n});\n\nmodule.exports = BomManager;\n\n\n},{\"actions/BomActions\":79,\"actions/BomViewActions\":80,\"actions/ChangeActions\":81,\"actions/FieldActions\":82,\"actions/ProductActions\":83,\"actions/TypeActions\":84,\"components/Alerts.jsx\":102,\"components/BottomPanel.jsx\":119,\"components/Header.jsx\":125,\"components/LeftPanel.jsx\":128,\"components/Modal.jsx\":130,\"components/SessionTimeoutModal.jsx\":136,\"dispatcher/AppDispatcher\":152,\"react\":\"react\",\"react-router\":\"react-router\",\"react/lib/cx\":9,\"stores/BomImportStore\":189,\"stores/BomStore\":190,\"stores/BomViewStore\":191,\"stores/ChangeStore\":192,\"stores/FieldStore\":193,\"stores/FieldTypeStore\":194,\"stores/ProductStore\":195,\"stores/SelectedBomItemStore\":196,\"stores/UserStore\":197,\"underscore\":\"underscore\",\"utils/LocalStorage\":203}],181:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\n\nvar Dashboard = React.createClass({displayName: \"Dashboard\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired\n    },\n\n    componentWillMount: function() {\n        var product;\n\n        if (!this.props.allProducts.length) {\n            this.replaceWith(\"welcome\");\n        }\n        else {\n            product = this.props.allProducts.last();\n            this.replaceWith(\"product\", {productId: product.id || product.cid});\n        }\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: \"content col-md-8\"}, \n                    React.createElement(\"div\", {className: \"wrapper\"}\n                    )\n                )\n            )\n        );\n    }\n\n});\n\nmodule.exports = Dashboard;\n\n\n},{\"react\":\"react\",\"react-router\":\"react-router\"}],182:[function(require,module,exports){\n\"use strict\";\n\nvar AcceptedInvite = require(\"components/AcceptedInvite.jsx\");\nvar EmailInviteForm = require(\"components/forms/EmailInviteForm.jsx\");\nvar List = require(\"components/List.jsx\");\nvar Panel = require(\"components/Panel.jsx\");\nvar PendingInvite = require(\"components/PendingInvite.jsx\");\nvar React = require(\"react\");\nvar UserInviteCollection = require(\"collections/UserInviteCollection\");\nvar ZeroClipboard = require(\"zeroclipboard\");\nZeroClipboard.config( { swfPath: \"assets/flash/ZeroClipboard.swf\" } );\nrequire(\"bootstrap\");\n\nvar InviteUser = React.createClass({displayName: \"InviteUser\",\n    mixins: [require(\"react-router\").Navigation],\n\n    propTypes: {\n        user: React.PropTypes.object.isRequired\n    },\n\n    clipboard: null,\n\n    getInitialState: function() {\n        return {\n            collection: null\n        };\n    },\n\n    componentWillMount: function() {\n        var company = this.props.user.getCurrentCompany();\n        if (!company) { return; }\n\n        var userInvites = new UserInviteCollection();\n\n        userInvites.setCompany(company.id);\n        userInvites.fetch();\n\n        this.setState({\n            collection: userInvites\n        });\n    },\n\n    componentDidMount: function() {\n        this.clipboard = new ZeroClipboard($(\"#clipboardButton\"));\n    },\n\n    getUrl: function(token) {\n        return window.location.protocol + \"//\" + window.location.hostname + \"/invite/#/\" + token;\n    },\n\n    render: function() {\n        var company = this.props.user.getCurrentCompany();\n        if (!company) {\n            return this.renderError();\n        }\n\n        var token = company.token;\n        if (!token) {\n            return this.renderError();\n        }\n\n        return this.renderPage(this.getUrl(token));\n    },\n\n    renderError: function(){\n        return (\n            React.createElement(\"div\", {className: \"alert alert-danger\", role: \"alert\"}, \n                \"A problem occurred while attempting to generate the invite URL. Please try again.\"\n            ));\n    },\n\n    renderPage: function(url){\n        return (\n            React.createElement(\"div\", {id: \"inviteUser\", className: \"content\"}, \n                React.createElement(\"div\", {className: \"col-md-10 col-md-offset-1 col-lg-7 col-lg-offset-2\"}, \n                    React.createElement(\"div\", {className: \"panel bom-panel\"}, \n                        React.createElement(\"div\", {className: \"panel-body\"}, \n                            React.createElement(\"div\", {className: \"row\"}, \n                                React.createElement(\"div\", {className: \"col-md-10 col-md-offset-1\"}, \n                                    React.createElement(\"h1\", {className: \"bom-title\"}, \"Invite New Team Members\")\n                                )\n                            ), \n\n                            React.createElement(\"div\", {className: \"row\"}, \n                                this.buildInviteLinkSection(url)\n                            ), \n                            React.createElement(\"div\", {className: \"row\"}, \n                                this.buildEmailSection(url)\n                            ), \n                            React.createElement(\"div\", {className: \"row\"}, \n                                this.buildPendingSection()\n                            ), \n                            React.createElement(\"div\", {className: \"row\"}, \n                                this.buildCreatedSection()\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    buildInviteLinkSection: function(url) {\n        var link = (\n            React.createElement(\"div\", {className: \"row\"}, \n                React.createElement(\"div\", {className: \"col-md-10\"}, \n                    React.createElement(\"div\", {className: \"input-group\"}, \n                        React.createElement(\"span\", {className: \"input-group-addon\"}, \n                            React.createElement(\"span\", {className: \"fa fa-link\", \"aria-hidden\": \"true\"})\n                        ), \n                        React.createElement(\"input\", {type: \"text\", className: \"form-control\", value: url, onChange: function() {}})\n                    )\n                ), \n                React.createElement(\"div\", {className: \"col-md-2\"}, \n                    React.createElement(\"button\", {\n                        className: \"btn btn-default\", \n                        type: \"button\", \n                        id: \"clipboardButton\", \n                        \"data-clipboard-text\": url, \n                        \"data-toggle\": \"popover\", \n                        \"data-placement\": \"top\", \n                        \"data-content\": \"Link copied to clipboard\", \n                        \"data-trigger\": \"manual\", \n                        onClick: this.onClick}, \n                        \"Copy\"\n                    )\n                )\n            ));\n\n        return (\n            React.createElement(Panel, {title: \"Share an Invite Link\", description: \"Invite multiple users at once with a url\"}, \n                link\n            ));\n    },\n\n    buildEmailSection: function() {\n        return (\n            React.createElement(Panel, {title: \"Invite a New Member\", description: \"Invite a single user via email\"}, \n                React.createElement(EmailInviteForm, {model: this.state.collection.getNewInvite(), isEmailInvited: this.isEmailInvited})\n            ));\n    },\n\n    buildPendingSection: function() {\n        var filter = function(item) {\n            return item.get(\"status\") === item.INVITE_STATUS_PENDING;\n        };\n        var content = (\n            React.createElement(List, {\n                collection: this.state.collection, \n                emptyText: \"There are no pending invitations\", \n                filter: filter, \n                item: PendingInvite}\n            ));\n        return (\n            React.createElement(Panel, {title: \"Pending Invitations\"}, \n                content\n            ));\n    },\n\n    buildCreatedSection: function() {\n        var filter = function(item) {\n            return item.get(\"status\") === item.INVITE_STATUS_ACCEPTED;\n        };\n        var content = (\n            React.createElement(List, {\n                collection: this.state.collection, \n                emptyText: \"There are no accepted invitations\", \n                filter: filter, \n                item: AcceptedInvite}\n            ));\n        return (\n            React.createElement(Panel, {title: \"Accepted Invitations\"}, \n                content\n            ));\n    },\n\n    isEmailInvited: function(email) {\n        return this.state.collection.findWhere({email: email});\n    },\n\n    disablePopover: function() {\n        return setTimeout(function (){\n                $(\"#clipboardButton\").popover(\"hide\");\n                this.setState({\n                    timeout: null\n                });\n        }.bind(this), 1000);\n    },\n\n    onClick: function() {\n        if(!!this.state.timeout) {\n            clearTimeout(this.state.timeout);\n        } else {\n            $(\"#clipboardButton\").popover(\"show\");\n        }\n\n        this.setState({\n            timeout: this.disablePopover()\n        });\n    }\n\n});\n\nmodule.exports = InviteUser;\n\n\n},{\"bootstrap\":\"bootstrap\",\"collections/UserInviteCollection\":98,\"components/AcceptedInvite.jsx\":99,\"components/List.jsx\":129,\"components/Panel.jsx\":131,\"components/PendingInvite.jsx\":132,\"components/forms/EmailInviteForm.jsx\":140,\"react\":\"react\",\"react-router\":\"react-router\",\"zeroclipboard\":\"zeroclipboard\"}],183:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar State = require(\"react-router\").State;\n\nvar SimplePage = require(\"components/SimplePage.jsx\");\n\nvar NavigationErrorModel = require(\"models/NavigationErrorModel\");\n\nmodule.exports = React.createClass({displayName: \"exports\",\n    mixins: [State],\n\n    propTypes: {\n        statusCode: React.PropTypes.string\n    },\n\n    render: function() {\n        var match = /\\/error\\/(\\d+)/.exec(this.getPath());\n        var statusCode = match && match.length > 1 ? match[1] : 404;\n        var model = new NavigationErrorModel({statusCode: statusCode});\n\n        return (\n            React.createElement(SimplePage, null, \n                React.createElement(\"div\", {className: \"panel panel-default\"}, \n                    React.createElement(\"div\", {className: \"panel-body text-center\"}, \n                        React.createElement(\"h1\", null, model.getTitle()), \n                        React.createElement(\"div\", null, \n                            React.createElement(\"span\", {className: \"fa fa-exclamation-triangle font-12x text-warning\", \"aria-hidden\": \"true\"})\n                        ), \n                        React.createElement(\"h4\", null, \n                            model.description\n                        ), \n                        React.createElement(\"h5\", null, \n                            React.createElement(\"a\", {href: \"/\"}, \"Go back to main page\")\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n});\n\n\n},{\"components/SimplePage.jsx\":138,\"models/NavigationErrorModel\":170,\"react\":\"react\",\"react-router\":\"react-router\"}],184:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar Navigation = require(\"react-router\").Navigation;\nvar Button = require(\"react-bootstrap\").Button;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\n\nvar BomPanel = require(\"components/BomPanel.jsx\");\nvar CommentPanel = require(\"components/CommentPanel.jsx\");\nvar HistoryPanel = require(\"components/HistoryPanel.jsx\");\nvar ProductActions = require(\"actions/ProductActions\");\nvar TextInput = require(\"components/TextInput.jsx\");\n\nvar AppDispatcher = require(\"dispatcher/AppDispatcher\");\nvar Modal = require(\"components/Modal.jsx\");\n\nvar Product = React.createClass({displayName: \"Product\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allBoms: React.PropTypes.object.isRequired,\n        allSelectedBomItems: React.PropTypes.object.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        allTypes: React.PropTypes.object.isRequired,\n        allChanges: React.PropTypes.object.isRequired,\n    },\n\n    getInitialState: function() {\n        return {\n            isEditing: false\n        };\n    },\n\n    componentWillMount: function() {\n        this._validateProduct( this.props );\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        this._validateProduct( nextProps );\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        var product = this.props.allProducts.get( this.props.params.productId );\n        var nameElement;\n        var changes;\n\n        if (!product) { return null; }\n\n        if (this.state.isEditing) {\n            nameElement = (React.createElement(\"div\", null, \n                React.createElement(TextInput, {\n                    className: \"edit\", \n                    onSave: this._onSaveProductName, \n                    onCancel: this._onCancelProductName, \n                    value: product.get(\"name\")})\n            ));\n        }\n        else {\n            nameElement = (React.createElement(\"div\", null, \n                    React.createElement(\"h1\", null, product.get(\"name\")), \n                    React.createElement(Button, {\n                        className: \"btn-nobg\", \n                        bsStyle: \"default\", \n                        bsSize: \"small\", \n                        onClick: this._onEditProductName}, \n                        React.createElement(Glyphicon, {\n                            bsSize: \"small\", \n                            glyph: \"pencil\"})\n                    )\n                ));\n        }\n\n        changes = this.props.allChanges.getVisibleForProduct(product.id || product.cid);\n\n        return (\n            React.createElement(\"div\", {id: \"product\", className: \"content\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"product-header clearfix row\"}, \n                        React.createElement(\"div\", {className: \"col-xs-12 col-sm-12 col-md-6 col-lg-6\"}, \n                            nameElement\n                        )\n                    ), \n                    React.createElement(\"div\", {className: \"product-content row\"}, \n                        React.createElement(\"div\", {className: \"col-xs-12 col-sm-12 col-md-6 col-lg-6\"}, \n                            React.createElement(BomPanel, {\n                                product: product, \n                                allBoms: this.props.allBoms})\n                        ), \n                        React.createElement(\"div\", {className: \"col-xs-12 col-sm-12 col-md-6 col-lg-6\"}, \n                            React.createElement(CommentPanel, {\n                                product: product})\n                        ), \n                        React.createElement(\"div\", {className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}, \n                            React.createElement(HistoryPanel, {\n                                product: product, \n                                changes: changes, \n                                allBoms: this.props.allBoms})\n                        ), \n                        React.createElement(\"div\", {className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}, \n                            React.createElement(Button, {\n                                className: \"pull-right\", \n                                bsStyle: \"danger\", \n                                onClick: this._onDeleteProduct}, \n                                \"DELETE THIS PRODUCT\"\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _validateProduct: function(props) {\n        var product = this._getProduct(props);\n\n        if ( !product ) {\n            this.replaceWith(\"dashboard\");\n        }\n        // Redirect if productId is present as parameter but doesn't match\n        // This is used to redirect a client id to its permanent id\n        else if ( product.id && product.id !== +props.params.productId ) {\n            this.replaceWith(\"product\", {productId: product.id} );\n        }\n    },\n\n    _getProduct: function(props) {\n        var productId;\n        props = props ? props : this.props;\n        productId = props.params ? props.params.productId : undefined;\n        return props.allProducts.get( productId );\n    },\n\n    _onEditProductName: function(event) {\n        this.setState({\n            isEditing: true\n        });\n    },\n\n    _onCancelProductName: function() {\n        this.setState({ isEditing: false });\n    },\n\n    _onSaveProductName: function(name) {\n        var product = this._getProduct();\n\n        name = name || \"\";\n        name = name.trim();\n\n        if (name && product.get(\"name\") !== name) {\n            ProductActions.updateName(product.id || product.cid, name);\n        }\n\n        this.setState({ isEditing: false });\n    },\n\n    _onDeleteProduct: function(event) {\n        AppDispatcher.dispatch({\n            action: {\n                type: \"show-modal\"\n            },\n            modal: (\n                React.createElement(Modal, {\n                    title: \"Delete Product\", \n                    saveLabel: \"Confirm\", \n                    dismissLabel: \"Cancel\", \n                    onConfirm: this.onConfirmProductDelete}, \n                    \"Are you sure you want to permanently delete this product?\"\n                ))\n        });\n   },\n\n   onConfirmProductDelete: function() {\n        var product = this._getProduct();\n        if (!product) {\n            return;\n        }\n        ProductActions.destroy(product.id || product.cid);\n   }\n});\n\nmodule.exports = Product;\n\n\n},{\"actions/ProductActions\":83,\"components/BomPanel.jsx\":116,\"components/CommentPanel.jsx\":121,\"components/HistoryPanel.jsx\":127,\"components/Modal.jsx\":130,\"components/TextInput.jsx\":139,\"dispatcher/AppDispatcher\":152,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\"}],185:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\nvar Link = require(\"react-router\").Link;\nvar Navigation = require(\"react-router\").Navigation;\n\nvar Table = require(\"react-bootstrap\").Table;\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Glyphicon = require(\"react-bootstrap\").Glyphicon;\nvar Button = require(\"react-bootstrap\").Button;\n\nvar HistoryItem = require(\"components/HistoryItem.jsx\");\nvar ChangeConstants = require(\"constants/ChangeConstants\");\nvar ChangeActions = require(\"actions/ChangeActions\");\n\nvar ProductHistory = React.createClass({displayName: \"ProductHistory\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allProducts: React.PropTypes.object.isRequired,\n        allChanges: React.PropTypes.object.isRequired\n    },\n\n    componentWillMount: function() {\n        this._validateProduct(this.props);\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n        this._init();\n    },\n\n    componentWillUnmount: function() {\n        this._removeScroll();\n    },\n\n    componentDidUpdate: function(nextProps) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n\n        this._init();\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    _validateProduct: function(props) {\n        var product = this._getProduct(props);\n\n        if ( !product ) {\n            this.replaceWith(\"dashboard\");\n        }\n        // Redirect if productId is present as parameter but doesn't match\n        // This is used to redirect a client id to its permanent id\n        else if ( product.id && product.id !== +props.params.productId ) {\n            this.replaceWith(\"product\", {productId: product.id} );\n        }\n    },\n\n    _getProduct: function(props) {\n        var productId;\n        props = props ? props : this.props;\n        productId = props.params ? props.params.productId : undefined;\n        return props.allProducts.get( productId );\n    },\n\n    _init: function() {\n        var product = this._getProduct();\n        var changes = this.props.allChanges.getVisibleForProduct(product.id || product.cid);\n\n        changes = _.sortBy(changes, function(change) {\n            return change.get(\"number\");\n        });\n\n        if (product.isLoadingChanges() ||\n            product.isNew() ||\n            (changes.length && changes[0].get(\"number\") === 1) ||\n            changes.length >= 10) { return; }\n\n        // load changes older than the new ones\n        changes = _.filter(changes, function(change) {\n            return change.isNew();\n        });\n\n        ChangeActions.fetchForProduct(product.id, 10, changes.length ? changes[0].get(\"number\") : undefined);\n    },\n\n    /**\n    * @return {object}\n    */\n    render: function() {\n        var changes;\n        var allBoms = this.props.allBoms;\n        var columns = this._getColumns();\n        var more;\n        var spinner;\n        var last;\n\n        var product = this._getProduct();\n        if (!product) { return null; }\n\n        changes = this.props.allChanges.getVisibleForProduct(product.id || product.cid);\n        changes = _.sortBy(changes, function(change) {\n            return -change.get(\"number\");\n        });\n\n        last = this.props.allChanges.getLastConsecutiveForProduct(product.id || product.cid);\n\n        if (last) {\n            changes = _.filter(changes, function(change) {\n                return change.get(\"number\") >= last.get(\"number\");\n            });\n        }\n\n        if (product.isLoadingChanges()) {\n            spinner = (\n                React.createElement(\"tr\", {key: \"spinner\"}, \n                    React.createElement(\"td\", {colSpan: \"8\", className: \"text-center\"}, \n                        React.createElement(Glyphicon, {\n                            className: \"glyphicon-spin\", \n                            bsSize: \"small\", \n                            bsStyle: \"default\", \n                            glyph: \"repeat\"})\n                    )\n                ));\n        }\n        else if (!last || last.get(\"number\") !== 1) {\n            more = (\n                React.createElement(\"tr\", {key: \"more\"}, \n                    React.createElement(\"td\", {colSpan: \"8\", className: \"text-center\"}, \n                        React.createElement(Button, {bsStyle: \"link\", onClick: this._loadPrevious}, \"load previous\")\n                    )\n                ));\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"bom-history content\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"bom-history-header clearfix\"}, \n                        React.createElement(ButtonToolbar, {className: \"pull-left\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(\"h1\", null, React.createElement(Link, {to: \"product\", params: {productId: product.id || product.cid}}, product.get(\"name\")), \" \", React.createElement(Glyphicon, {bsSize: \"small\", bsStyle: \"default\", glyph: \"menu-right\"}), \" History\")\n                            )\n                        ), \n                        React.createElement(ButtonToolbar, {className: \"pull-right\"}, \n                            React.createElement(\"div\", {className: \"btn-group\"}, \n                                React.createElement(Link, {to: \"product\", params: {productId: product.id || product.cid}}, \"Back to Product Dashboard\")\n                            )\n                        )\n                    ), \n                    React.createElement(Table, {striped: true, bordered: true, condensed: true, hover: true, fill: true}, \n                        React.createElement(\"thead\", null, \n                            React.createElement(\"tr\", null, \n                                columns.map(function(columnId) {\n                                    return this._getHeader(columnId);\n                                }, this)\n                            )\n                        ), \n                        React.createElement(\"tbody\", null, \n                            changes.map(function(change) {\n                                var bom = change.has(\"bomId\") ? allBoms.get( change.get(\"bomId\") ) : undefined;\n                                var item = bom && change.has(\"itemId\") ? bom.getItem(change.get(\"itemId\")) : undefined;\n\n                                return (\n                                    React.createElement(HistoryItem, {\n                                        key: change.id || change.cid, \n                                        change: change, \n                                        bom: bom, \n                                        item: item, \n                                        columns: columns}));\n                            }, this), \n                            spinner, \n                            more\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _getColumns: function() {\n        return [\n            ChangeConstants.NUMBER,\n            ChangeConstants.BOM_ID,\n            ChangeConstants.BOM_NAME,\n            // Disable item id for now, as it doesn't work properly.\n            //ChangeConstants.ITEM_ID,\n            ChangeConstants.ITEM_SKU,\n            ChangeConstants.DETAILS,\n            ChangeConstants.DATE,\n            ChangeConstants.STATUS\n        ];\n    },\n\n    // TODO move the history table into a component\n    _getHeader: function(columnId) {\n        switch(columnId) {\n            case ChangeConstants.NUMBER:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Change #\"));\n                break;\n            case ChangeConstants.BOM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM ID\"));\n                break;\n            case ChangeConstants.BOM_NAME:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"BoM Name\"));\n                break;\n            case ChangeConstants.ITEM_ID:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item ID\"));\n                break;\n            case ChangeConstants.ITEM_SKU:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Item SKU\"));\n                break;\n            case ChangeConstants.DETAILS:\n                return (React.createElement(\"th\", {key: columnId}, \"Details\"));\n                break;\n            case ChangeConstants.DATE:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Date\"));\n                break;\n            case ChangeConstants.STATUS:\n                return (React.createElement(\"th\", {className: \"compact\", key: columnId}, \"Saved\"));\n                break;\n        }\n    },\n\n    _loadPrevious: function() {\n        var product = this._getProduct();\n        var last = this.props.allChanges.getLastConsecutiveForProduct(product.id || product.cid);\n        ChangeActions.fetchForProduct(product.id, 10, last ? last.get(\"number\") : undefined);\n    }\n});\n\nmodule.exports = ProductHistory;\n\n\n},{\"actions/ChangeActions\":81,\"components/HistoryItem.jsx\":126,\"constants/ChangeConstants\":147,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\",\"underscore\":\"underscore\"}],186:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar React = require(\"react\");\n\nvar UserAccountForm = require(\"components/forms/UserAccountForm.jsx\");\n\nvar UserAccount = React.createClass({displayName: \"UserAccount\",\n\n    propTypes: {\n        user: React.PropTypes.object.isRequired,\n    },\n\n    getInitialState: function() {\n        return {\n        };\n    },\n\n    componentDidMount: function() {\n        this._addScroll();\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        $(this.getDOMNode()).getNiceScroll().resize();\n\n        // Trigger a fake mouse enter\n        // This solve a bug that seem to fail to update the width\n        // of the horizontal scrollbar when the left panel opens\n        $(this.getDOMNode()).trigger(\"mouseenter\");\n    },\n\n    _addScroll: function() {\n        $(this.getDOMNode()).niceScroll({\n            cursoropacitymax: 0.25,\n            cursorwidth: \"10px\",\n            railpadding: {\n                top: 5,\n                right: 1,\n                left: 1,\n                bottom: 5\n            }\n        });\n    },\n\n    _removeScroll: function() {\n        $(this.getDOMNode()).getNiceScroll().remove();\n    },\n\n    render: function() {\n        var user = this.props.user;\n        var company = this.props.company;\n\n        return (\n            React.createElement(\"div\", {className: \"user-account content\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\"}, \n                        React.createElement(\"div\", {className: \"panel\"}, \n                            React.createElement(\"div\", {className: \"panel-header\"}, \n                                React.createElement(\"h1\", null, \"Account\")\n                            ), \n                            React.createElement(\"div\", {className: \"panel-body\"}, \n                                React.createElement(UserAccountForm, {model: this.props.user, company: this.props.company})\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n});\n\nmodule.exports = UserAccount;\n\n\n},{\"components/forms/UserAccountForm.jsx\":141,\"react\":\"react\",\"underscore\":\"underscore\"}],187:[function(require,module,exports){\n\"use strict\";\n\nvar React = require(\"react\");\nvar ButtonToolbar = require(\"react-bootstrap\").ButtonToolbar;\nvar Button = require(\"react-bootstrap\").Button;\nvar Alert = require(\"react-bootstrap\").Alert;\nvar Input = require(\"react-bootstrap\").Input;\nvar Panel = require(\"react-bootstrap\").Panel;\nvar Navigation = require(\"react-router\").Navigation;\n\nvar ProductActions = require(\"actions/ProductActions\");\nvar AppConstants = require(\"constants/AppConstants\");\n\nvar WelcomeWizard = React.createClass({displayName: \"WelcomeWizard\",\n    mixins: [Navigation],\n\n    propTypes: {\n        allImportBoms: React.PropTypes.object.isRequired,\n        allFields: React.PropTypes.object.isRequired,\n        allTypes: React.PropTypes.object.isRequired,\n        allProducts: React.PropTypes.object.isRequired\n    },\n\n    /**\n     * @return {object}\n     */\n    render: function() {\n        return (\n            React.createElement(\"div\", {id: \"welcome\", className: \"content scrollable\"}, \n                React.createElement(\"div\", {className: \"wrapper\"}, \n                    React.createElement(\"div\", {className: \"row col-lg-6 col-md-8 col-sm-12\"}, \n                        React.createElement(\"h1\", null, \"Welcome to BoM Squad!\"), \n                        React.createElement(\"p\", null, \"To get started, you can create a fresh new Product from the panel on the left, or you can import a Bill of Materials from a CSV file that you already have, and we'll make a Product for it.\"), \n                        React.createElement(\"p\", null, \"A Product can contain more than on BoM, since it might have several parts to it.\"), \n                        React.createElement(\"p\", null, \"If you have any questions, don't hesitate to shoot them our way at \", React.createElement(\"a\", {href: \"mailto:\"+AppConstants.SUPPORT_EMAIL}, AppConstants.SUPPORT_EMAIL), \".\"), \n                        React.createElement(ButtonToolbar, null, \n                            React.createElement(Button, {\n                                bsStyle: \"primary\", \n                                bsSize: \"medium\", \n                                onClick: this._onNewProduct}, \n                                \"CREATE A NEW PRODUCT\"\n                            ), \n                            React.createElement(Button, {\n                                bsStyle: \"primary\", \n                                bsSize: \"medium\", \n                                onClick: this._transitionToImport}, \n                                \"IMPORT BOM FROM CSV FILE\"\n                            )\n                        )\n                    )\n                )\n            )\n        );\n    },\n\n    _onNewProduct: function() {\n        var product;\n\n        ProductActions.create(\"My Product\");\n\n        product = this.props.allProducts.last();\n        if(product) {\n            this.transitionTo(\"product\", { productId: product.id || product.cid });\n        }\n    },\n\n    _transitionToImport: function() {\n        this.transitionTo(\"newProductImport\");\n    }\n});\n\nmodule.exports = WelcomeWizard;\n\n\n},{\"actions/ProductActions\":83,\"constants/AppConstants\":146,\"react\":\"react\",\"react-bootstrap\":\"react-bootstrap\",\"react-router\":\"react-router\"}],188:[function(require,module,exports){\n\"use strict\";\n\nvar BomExportCollection = require(\"collections/BomExportCollection\");\nmodule.exports = new BomExportCollection();\n\n\n},{\"collections/BomExportCollection\":87}],189:[function(require,module,exports){\n\"use strict\";\n\nvar BomImportCollection = require(\"collections/BomImportCollection\");\nmodule.exports = new BomImportCollection();\n\n\n},{\"collections/BomImportCollection\":88}],190:[function(require,module,exports){\n\"use strict\";\n\nvar BomCollection = require(\"collections/BomCollection\");\nmodule.exports = new BomCollection();\n\n\n},{\"collections/BomCollection\":86}],191:[function(require,module,exports){\n\"use strict\";\n\nvar BomViewCollection = require(\"collections/BomViewCollection\");\nmodule.exports = new BomViewCollection();\n\n\n},{\"collections/BomViewCollection\":91}],192:[function(require,module,exports){\n\"use strict\";\n\nvar ChangeCollection = require(\"collections/ChangeCollection\");\nmodule.exports = new ChangeCollection();\n\n\n},{\"collections/ChangeCollection\":92}],193:[function(require,module,exports){\n\"use strict\";\n\nvar FieldCollection = require(\"collections/FieldCollection\");\nmodule.exports = new FieldCollection();\n\n\n},{\"collections/FieldCollection\":94}],194:[function(require,module,exports){\n\"use strict\";\n\nvar FieldTypeCollection = require(\"collections/FieldTypeCollection\");\nmodule.exports = new FieldTypeCollection();\n\n\n},{\"collections/FieldTypeCollection\":95}],195:[function(require,module,exports){\n\"use strict\";\n\nvar ProductCollection = require(\"collections/ProductCollection\");\nmodule.exports = new ProductCollection();\n\n\n},{\"collections/ProductCollection\":96}],196:[function(require,module,exports){\n\"use strict\";\n\nvar SelectedBomItemCollection = require(\"collections/SelectedBomItemCollection\");\nmodule.exports = new SelectedBomItemCollection();\n\n\n},{\"collections/SelectedBomItemCollection\":97}],197:[function(require,module,exports){\n\"use strict\";\n\nvar UserModel = require(\"models/UserModel\");\nmodule.exports = new UserModel();\n\n\n},{\"models/UserModel\":173}],198:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar BomUtils = require(\"utils/BomUtils\");\nvar BabyParse = require(\"babyparse\");\n\nvar BomImporter = {\n    detectCSV: function(content) {\n        var options = {};\n        var preview;\n        var headers;\n\n        // Parse preview to get value of first row\n        preview = BabyParse.parse(content, _.extend({}, options, {preview: 1, header: true}));\n\n        // Clean up fields\n        // Because of bug in parsing library that adds an empty field if last character is delimiter\n        headers = _.clone(preview.meta.fields);\n        if (_.last(headers) === \"\") {\n            headers.pop();\n        }\n\n        // Check that headers are all string and not empty\n        options.header = (headers.length > 0) && _.every(headers, function(result) {\n            return isNaN(result);\n        });\n\n        // Get the autodetected delimiter\n        options.delimiter = preview.meta.delimiter;\n\n        return options;\n    },\n\n    detectCSVFromFile: function(file) {\n        return BomUtils.readFileAsText(file).then(function(result) {\n            return this.detectCSV(result);\n        }.bind(this));\n    },\n\n    importCSV: function(content, options) {\n        options = options || {};\n\n        // Skip empty line by default\n        if (options.skipEmptyLines === undefined) {\n            options.skipEmptyLines = true;\n        }\n\n        return BabyParse.parse(content, options);\n    }\n};\n\nmodule.exports = BomImporter;\n\n\n},{\"babyparse\":\"babyparse\",\"underscore\":\"underscore\",\"utils/BomUtils\":199}],199:[function(require,module,exports){\n\"use strict\";\n\nvar BomUtils = {\n    isFileAPIEnabled: function() {\n        return !!window.FileReader;\n    },\n\n    readFileAsText: function(file, encoding) {\n        encoding = encoding || \"utf-8\";\n\n        if (!BomUtils.isFileAPIEnabled()) {\n            //TODO api call to submit file and wait for response\n            return Promise.reject(new Error(\"File API not found\"));\n        }\n\n        return new Promise(function(resolve, reject) {\n            var reader = new FileReader();\n\n            reader.onload = function(event) {\n                resolve(event.target.result);\n            };\n\n            reader.onerror = function(event) {\n                reject(event.target.error);\n            };\n\n            reader.readAsText(file, encoding);\n        });\n    }\n};\n\nmodule.exports = BomUtils;\n\n\n},{}],200:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\n\nvar CompanyMixin = {\n\n    companyId: null,\n\n    getCompany: function() {\n        if(!this.companyId && _.has(this,\"collection\")) {\n            //Attempt to delegate to collection\n            return this.collection.getCompany();\n        }\n        return this.companyId;\n    },\n\n    setCompany: function(companyId) {\n        this.companyId = companyId;\n    },\n\n    isCompanySet: function(){\n        return !!(this.companyId);\n    },\n\n    setChildrenCompany: function() {\n        this.each(function(child) {\n            if(child && child.setCompany){\n                child.setCompany(this.companyId);\n            }\n        }.bind(this));\n    }\n\n};\n\nmodule.exports = CompanyMixin;\n\n\n},{\"underscore\":\"underscore\"}],201:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\n\n//TODO split this into PromiseCollection and CompanyCollection (maybe)\nvar ExtendedCollection = Backbone.Collection.extend({\n    companyId: undefined,\n    _syncing: false,\n    _fetched: false,\n    _fetching: false,\n\n    initialize: function() {\n        this.listenTo(this, \"request\", this._onRequest);\n        this.listenTo(this, \"sync\", this._onSync);\n        this.listenTo(this, \"error\", this._onError);\n    },\n\n    _onRequest: function() {\n        this._syncing = true;\n    },\n\n    _onSync: function() {\n        this._syncing = false;\n    },\n\n    _onError: function() {\n        this._syncing = false;\n    },\n\n    isSyncing: function() {\n        return this._syncing;\n    },\n\n    isFetching: function() {\n        return this._fetching;\n    },\n\n    hasFetched: function() {\n        return this._fetched;\n    },\n\n    setCompany: function(companyId) {\n        //this.reset([]);\n        this.companyId = companyId;\n\n        this.each(function(model) {\n            if (_.isFunction(model.setCompany)) {\n                model.setCompany( companyId );\n            }\n        });\n    },\n\n    getCompany: function() {\n        return this.companyId;\n    },\n\n    sync: function(method, collection, options) {\n        return new Promise(function(resolve, reject) {\n            var success;\n            var error;\n\n            success = options.success;\n            options.success = function(response) {\n                if (success) {\n                    success(response);\n                }\n                resolve(collection);\n            };\n\n            error = options.error;\n            options.error = function(xhr, textStatus, errorThrown) {\n                if (error) {\n                    error.apply(this, arguments);\n                }\n                //TODO create own error class\n                reject({\n                    xhr: xhr,\n                    textStatus: textStatus,\n                    errorThrown: errorThrown\n                });\n            };\n\n            Backbone.sync(method, collection, options);\n        });\n    },\n\n    fetch: function fetch(options) {\n        var success, error;\n\n        this._fetched = true;\n        this._fetching = true;\n\n        options = options || {};\n\n        success = options.success;\n        options.success = function(response) {\n            if (success) {\n                success(response);\n            }\n            this._fetching = false;\n        }.bind(this);\n\n        error = options.error;\n        options.error = function() {\n            if (error) {\n                error.apply(this, arguments);\n            }\n            this._fetching = false;\n        }.bind(this);\n\n        var xhr = Backbone.Collection.prototype.fetch.apply(this, arguments);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Invalid collection attributes.\"));\n    },\n\n    set: function(models) {\n        models = Backbone.Collection.prototype.set.apply(this, arguments);\n        var singular;\n\n        // If the company is not set, return models as usual\n        if (!this.companyId) {\n            return models;\n        }\n\n        // If company is set, then set on all set models\n        singular = !_.isArray(models);\n\n        if (singular) {\n            if (models && _.isFunction(models.setCompany)) {\n                models.setCompany( this.companyId );\n            }\n        }\n        else {\n            _.each(models, function(model) {\n                if (model && _.isFunction(model.setCompany)) {\n                    model.setCompany( this.companyId );\n                }\n            }, this);\n        }\n\n        return models;\n    },\n\n    validateAction: function(action, attributes, result) {\n        if (!action) { return false; }\n\n        if (attributes && !action.attributes) { return false; }\n        if (result && !action.result) { return false; }\n\n        var index;\n        for(index in attributes) {\n            if (action.attributes[ attributes[index] ] === undefined) {\n                return false;\n            }\n        }\n\n        for(index in result) {\n            if (action.result[ result[index] ] === undefined) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n});\n\nmodule.exports = ExtendedCollection;\n\n\n},{\"backbone\":\"backbone\",\"underscore\":\"underscore\"}],202:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar ApiError = require(\"errors/ApiError\");\nvar Backbone = require(\"backbone\");\n\nvar ExtendedModel = Backbone.Model.extend({\n    _syncing: false,\n    _dirty: false,\n    _associations: undefined,\n\n    is: function(model) {\n        return ((model.id && (this.id === model.id)) ||\n                (model.cid && (this.cid === model.cid)));\n    },\n\n    initialize: function() {\n        this.listenTo(this, \"change\", this._onChange);\n        this.listenTo(this, \"request\", this._onRequest);\n        this.listenTo(this, \"sync\", this._onSync);\n        this.listenTo(this, \"error\", this._onError);\n    },\n\n    _onChange: function() {\n        this._dirty = true;\n    },\n\n    _onRequest: function() {\n        this._syncing = true;\n    },\n\n    _onSync: function() {\n        this._dirty = false;\n        this._syncing = false;\n    },\n\n    _onError: function() {\n        this._syncing = false;\n    },\n\n    isDirty: function() {\n        return this._dirty;\n    },\n\n    isSyncing: function() {\n        return this._syncing;\n    },\n\n    getAssociations: function() {\n        return this._associations;\n    },\n\n    getAssociation: function(association) {\n        return this._associations ? this._associations[association] : undefined;\n    },\n\n    setAssociation: function(key, value) {\n        this._associations = this._associations || {};\n        this._associations[key] = value;\n    },\n\n    sync: function(method, model, options) {\n        return new Promise(function(resolve, reject) {\n            var success;\n            var error;\n\n            success = options.success;\n            options.success = function(response) {\n                if (success) {\n                    success(response);\n                }\n                resolve(model);\n            };\n\n            error = options.error;\n            options.error = function(xhr, textStatus, errorThrown) {\n                if (error) {\n                    error.apply(this, arguments);\n                }\n                reject(new ApiError({\n                  xhr: xhr,\n                  textStatus: textStatus,\n                  errorThrown: errorThrown\n                }));\n            };\n\n            Backbone.sync(method, model, options);\n        });\n    },\n\n    fetch: function fetch() {\n        var xhr = Backbone.Model.prototype.fetch.apply(this, arguments);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Invalid model attributes.\"));\n    },\n\n    save: function save() {\n        var xhr = Backbone.Model.prototype.save.apply(this, arguments);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Invalid model attributes.\"));\n    },\n\n    destroy: function destroy(options) {\n        options = options ? options : {};\n\n        // dirty hack around Backbone setting dataType: \"json\" for every requests\n        if (!options.dataType) {\n            options.dataType = \"html\";\n        }\n\n        var xhr = Backbone.Model.prototype.destroy.apply(this, [options]);\n        return (xhr !== false) ? xhr : Promise.reject(new Error(\"Can't destroy new model\"));\n    },\n\n    toJSON: function(options) {\n        var json;\n\n        options = options || {};\n\n        if (_.isEmpty(options) || !options.json) {\n            return _.clone(this.attributes);\n        }\n\n        options.json.associations = options.json.associations || [];\n\n        json = {};\n\n        // Check if we need to include the client id\n        if (options.json.cid) {\n            json = _.extend(json, { cid: this.cid });\n        }\n\n        if (_.isArray(options.json.attributes)) {\n            _.each(options.json.attributes, function(attribute) {\n                json[attribute] = this.get(attribute);\n            }, this);\n        }\n        else if (options.json.attributes !== false) {\n            json = _.extend(json, _.clone(this.attributes));\n        }\n\n        // If the model doesn't have any associations, then stop here\n        if (_.isEmpty(this._associations)) {\n            return json;\n        }\n\n        if (options.json.associations === true) {\n            _.each(this._associations, function(association, key) {\n                var newOptions;\n\n                if (this._associations.hasOwnProperty(key)) {\n                    if (!association || association.length === 0) { return; }\n\n                    newOptions = _.omit(options, \"json\"); // watch out, not deep clone\n                    newOptions.json = {\n                        attributes: true,\n                        associations: true\n                    };\n\n                    json[key] = association.map(function(model) {\n                        return model.toJSON(newOptions);\n                    });\n                }\n            }, this);\n        }\n        else if (_.isObject(options.json.associations)) {\n            _.each(options.json.associations, function(value, key) {\n                var association;\n                var newOptions = _.omit(options, \"json\"); // watch out, not deep clone;\n                newOptions.json = value === true ? { associations: true } : _.clone(value);\n\n                association = this.getAssociation(key);\n                if (!association || association.length === 0) { return; }\n\n                json[key] = association.map(function(model) {\n                    return model.toJSON(newOptions);\n                });\n            }, this);\n        }\n\n        return json;\n    }\n});\n\nmodule.exports = ExtendedModel;\n\n\n},{\"backbone\":\"backbone\",\"errors/ApiError\":153,\"underscore\":\"underscore\"}],203:[function(require,module,exports){\n/*global window:false, JSON:false*/\n\"use strict\";\n\nmodule.exports = {\n    get: function(key, options) {\n        options = options || {};\n        var value = window.localStorage[key];\n        if(!value) {\n            if(options.defaultValue) {\n                return options.defaultValue;\n            } else {\n                return null;\n            }\n        }\n        return JSON.parse(value);\n    },\n\n    set: function(key, value, options) {\n        options = options || {overwrite: true};\n        if(!options.overwrite && window.localStorage[key]) {\n            throw new Error(\"Key already exists\");\n        }\n        window.localStorage[key] = JSON.stringify(value);\n    },\n\n    clearAll: function() {\n        return window.localStorage.clear();\n    },\n\n    remove: function(key) {\n        return window.localStorage.removeItem(key);\n    }\n};\n\n},{}]},{},[1]);\n"],"file":"bom.js","sourceRoot":"/source/"}